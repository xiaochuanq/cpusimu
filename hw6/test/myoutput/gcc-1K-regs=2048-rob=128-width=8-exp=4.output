Processing trace...
1: 0 1 2 2, r13 -> p50 [p13] | SET ADD
2: 0 1 2 2, r49 -> p49, r13 -> p51 [p50] | SET ADD_IMM
3: 0 1 4 4, r5 -> p5, r45 -> p52 [p45] | CMP LOAD
4: 0 4 5 5, r45 -> p52, r3 -> p3, r44 -> p53 [p44], r49 -> p54 [p49] | CMP SUB
5: 0 1 4 5, r5 -> p5, r3 -> p55 [p3] | MOV LOAD
6: 0 1 2 5, r0 -> p56 [p0] | SET ADD
7: 0 5 6 6, r49 -> p54, r0 -> p57 [p56] | SET ADD_IMM
8: 0 1 2 6, r12 -> p58 [p12] | XOR ADD
9: 1 6 7 7, r13 -> p51, r0 -> p57, r13 -> p59 [p51], r49 -> p60 [p54] | OR OR
10: 1 2 3 7 | JMP JMP_IMM
11: 1 4 7 7, r3 -> p55, r0 -> p61 [p57] | MOV LOAD
12: 1 7 8 8, r0 -> p61, r0 -> p61, r44 -> p62 [p53], r49 -> p63 [p60] | TEST AND
13: 1 8 9 9, r49 -> p63 | J JMP_IMM
14: 1 7 10 10, r0 -> p61, r7 -> p64 [p7] | MOV LOAD
15: 1 10 13 13, r7 -> p64, r44 -> p65 [p62] | MOVZX LOAD
16: 1 13 14 14, r44 -> p65, r0 -> p66 [p61] | MOVZX ZEXT_WORD_TO_DWORD
17: 2 14 15 15, r0 -> p66, r44 -> p67 [p65], r49 -> p68 [p63] | CMP SUB_IMM
18: 2 15 16 16, r49 -> p68 | J JMP_IMM
19: 2 3 4 16, r6 -> p69 [p6] | XOR ADD
20: 2 3 4 16, r44 -> p70 [p67] | CALL SAVE_PC
21: 2 3 4 16, r4 -> p4, r4 -> p71 [p4] | CALL SUB_IMM
22: 2 4 5 16, r44 -> p70, r4 -> p71 | CALL STORE
23: 2 3 4 16 | CALL JMP_IMM
24: 2 4 5 16, r15 -> p15, r4 -> p71 | PUSH STORE
25: 3 4 5 16, r4 -> p71, r4 -> p72 [p71] | PUSH SUB_IMM
26: 3 5 6 17, r14 -> p14, r4 -> p72 | PUSH STORE
27: 3 5 6 17, r4 -> p72, r4 -> p73 [p72] | PUSH SUB_IMM
28: 3 7 8 17, r13 -> p59, r4 -> p73 | PUSH STORE
29: 3 6 7 17, r4 -> p73, r4 -> p74 [p73] | PUSH SUB_IMM
30: 3 10 11 17, r7 -> p64, r13 -> p75 [p59] | MOV ADD
31: 3 7 8 17, r12 -> p58, r4 -> p74 | PUSH STORE
32: 3 7 8 17, r4 -> p74, r4 -> p76 [p74] | PUSH SUB_IMM
33: 4 5 6 17, r6 -> p69, r12 -> p77 [p58] | MOV ADD
34: 4 8 9 18, r5 -> p5, r4 -> p76 | PUSH STORE
35: 4 8 9 18, r4 -> p76, r4 -> p78 [p76] | PUSH SUB_IMM
36: 4 9 10 18, r3 -> p55, r4 -> p78 | PUSH STORE
37: 4 9 10 18, r4 -> p78, r4 -> p79 [p78] | PUSH SUB_IMM
38: 4 10 11 18, r4 -> p79, r4 -> p80 [p79], r49 -> p81 [p68] | SUB SUB_IMM
39: 4 10 13 18, r7 -> p64, r44 -> p82 [p70] | MOVZX LOAD
40: 4 13 14 18, r44 -> p82, r0 -> p83 [p66] | MOVZX ZEXT_WORD_TO_DWORD
41: 5 14 15 18, r0 -> p83, r44 -> p84 [p82], r49 -> p85 [p81] | CMP SUB_IMM
42: 5 15 16 19, r49 -> p85 | J JMP_IMM
43: 20 21 24 24, r7 -> p64, r5 -> p86 [p5] | MOV LOAD
44: 20 24 25 25, r5 -> p86, r44 -> p87 [p84], r49 -> p88 [p85] | CMP SUB_IMM
45: 20 25 26 26, r49 -> p88 | J JMP_IMM
46: 20 21 22 26, r45 -> p89 [p52] | CMP SAVE_PC
47: 20 22 25 26, r45 -> p89, r45 -> p90 [p89] | CMP LOAD
48: 20 25 26 26, r5 -> p86, r45 -> p90, r44 -> p91 [p87], r49 -> p92 [p88] | CMP SUB
49: 20 26 27 27, r49 -> p92 | J JMP_IMM
50: 31 32 33 33, r44 -> p93 [p91] | MOV SAVE_PC
51: 31 33 36 36, r44 -> p93, r2 -> p94 [p2] | MOV LOAD
52: 31 36 37 37, r2 -> p94, r2 -> p94, r44 -> p95 [p93], r49 -> p96 [p92] | TEST AND
53: 31 37 38 38, r49 -> p96 | J JMP_IMM
54: 42 43 46 46, r2 -> p94, r12 -> p97 [p77] | MOV LOAD
55: 42 46 47 47, r12 -> p97, r12 -> p98 [p97], r49 -> p99 [p96] | AND AND_IMM
56: 42 43 44 47, r45 -> p100 [p90] | CMP SAVE_PC
57: 42 44 47 47, r45 -> p100, r45 -> p101 [p100] | CMP LOAD
58: 42 47 48 48, r5 -> p86, r45 -> p101, r44 -> p102 [p95], r49 -> p103 [p99] | CMP SUB
59: 42 48 49 49, r49 -> p103 | J JMP_IMM
60: 53 54 55 55, r44 -> p104 [p102] | MOV SAVE_PC
61: 53 55 58 58, r44 -> p104, r2 -> p105 [p94] | MOV LOAD
62: 53 58 59 59, r2 -> p105, r2 -> p105, r44 -> p106 [p104], r49 -> p107 [p103] | TEST AND
63: 53 59 60 60, r49 -> p107 | J JMP_IMM
64: 64 65 68 68, r2 -> p105, r0 -> p108 [p83] | MOV LOAD
65: 64 68 69 69, r5 -> p86, r0 -> p108, r44 -> p109 [p106], r49 -> p110 [p107] | CMP SUB
66: 64 69 70 70, r49 -> p110 | J JMP_IMM
67: 74 75 76 76, r45 -> p111 [p101] | CMP SAVE_PC
68: 74 76 79 79, r45 -> p111, r45 -> p112 [p111] | CMP LOAD
69: 74 79 80 80, r5 -> p86, r45 -> p112, r44 -> p113 [p109], r49 -> p114 [p110] | CMP SUB
70: 74 80 81 81, r49 -> p114 | J JMP_IMM
71: 85 86 87 87, r44 -> p115 [p113] | MOV SAVE_PC
72: 85 87 90 90, r44 -> p115, r2 -> p116 [p105] | MOV LOAD
73: 85 90 91 91, r2 -> p116, r2 -> p116, r44 -> p117 [p115], r49 -> p118 [p114] | TEST AND
74: 85 91 92 92, r49 -> p118 | J JMP_IMM
75: 96 97 100 100, r2 -> p116, r45 -> p119 [p112] | ADD LOAD
76: 96 100 101 101, r45 -> p119, r44 -> p120 [p117], r49 -> p121 [p118] | ADD ADD_IMM
77: 96 101 102 102, r44 -> p120, r2 -> p116 | ADD STORE
78: 96 97 98 102, r5 -> p86, r44 -> p122 [p120], r49 -> p123 [p121] | CMP SUB_IMM
79: 96 97 98 102, r12 -> p98, r12 -> p124 [p98] | MOV ADD
80: 96 98 99 102, r49 -> p123 | J JMP_IMM
81: 103 104 107 107, r13 -> p75, r45 -> p125 [p119] | CMP LOAD
82: 103 107 108 108, r45 -> p125, r44 -> p126 [p122], r49 -> p127 [p123] | CMP SUB_IMM
83: 103 104 107 108, r13 -> p75, r44 -> p128 [p126] | MOVZX LOAD
84: 103 107 108 108, r44 -> p128, r5 -> p129 [p86] | MOVZX ZEXT_BYTE_TO_DWORD
85: 103 108 109 109, r49 -> p127 | J JMP_IMM
86: 113 114 117 117, r12 -> p124, r3 -> p130 [p55] | MOV LOAD
87: 113 114 117 117, r13 -> p75, r2 -> p131 [p116] | MOV LOAD
88: 113 117 118 118, r3 -> p130, r3 -> p130, r44 -> p132 [p128], r49 -> p133 [p127] | TEST AND
89: 113 118 119 119, r49 -> p133 | J JMP_IMM
90: 123 124 127 127, r3 -> p130, r0 -> p134 [p108] | MOV LOAD
91: 123 127 130 130, r0 -> p134, r45 -> p135 [p125] | CMP LOAD
92: 123 130 131 131, r45 -> p135, r44 -> p136 [p132], r49 -> p137 [p133] | CMP SUB_IMM
93: 123 131 132 132, r49 -> p137 | J JMP_IMM
94: 136 137 140 140, r3 -> p130, r3 -> p138 [p130] | MOV LOAD
95: 136 140 141 141, r3 -> p138, r3 -> p138, r44 -> p139 [p136], r49 -> p140 [p137] | TEST AND
96: 136 141 142 142, r49 -> p140 | J JMP_IMM
97: 146 147 148 148, r4 -> p80, r4 -> p141 [p80], r49 -> p142 [p140] | ADD ADD_IMM
98: 146 148 151 151, r4 -> p141, r3 -> p143 [p138] | POP LOAD
99: 146 148 149 151, r4 -> p141, r4 -> p144 [p141] | POP ADD_IMM
100: 146 149 152 152, r4 -> p144, r5 -> p145 [p129] | POP LOAD
101: 146 149 150 152, r4 -> p144, r4 -> p146 [p144] | POP ADD_IMM
102: 146 150 153 153, r4 -> p146, r12 -> p147 [p124] | POP LOAD
103: 146 150 151 153, r4 -> p146, r4 -> p148 [p146] | POP ADD_IMM
104: 146 151 154 154, r4 -> p148, r13 -> p149 [p75] | POP LOAD
105: 147 151 152 154, r4 -> p148, r4 -> p150 [p148] | POP ADD_IMM
106: 147 152 155 155, r4 -> p150, r14 -> p151 [p14] | POP LOAD
107: 147 152 153 155, r4 -> p150, r4 -> p152 [p150] | POP ADD_IMM
108: 147 153 156 156, r4 -> p152, r15 -> p153 [p15] | POP LOAD
109: 147 153 154 156, r4 -> p152, r4 -> p154 [p152] | POP ADD_IMM
110: 147 154 157 157, r4 -> p154, r44 -> p155 [p139] | RET LOAD
111: 147 154 155 157, r4 -> p154, r4 -> p156 [p154] | RET ADD_IMM
112: 147 157 158 158, r44 -> p155 | RET JMP_REG
113: 148 149 150 158 | JMP JMP_IMM
114: 148 153 154 158, r12 -> p147, r12 -> p157 [p147], r49 -> p158 [p142] | ADD ADD_IMM
115: 148 151 152 158, r3 -> p143, r3 -> p159 [p143], r49 -> p160 [p158] | ADD ADD_IMM
116: 148 152 155 158, r5 -> p145, r45 -> p161 [p135] | CMP LOAD
117: 148 155 156 158, r12 -> p157, r45 -> p161, r44 -> p162 [p155], r49 -> p163 [p160] | CMP SUB
118: 148 156 157 158, r49 -> p163 | J JMP_IMM
119: 161 162 165 165, r5 -> p145, r0 -> p164 [p134] | MOV LOAD
120: 161 165 168 168, r0 -> p164, r45 -> p165 [p161] | CMP LOAD
121: 161 168 169 169, r45 -> p165, r44 -> p166 [p162], r49 -> p167 [p163] | CMP SUB_IMM
122: 161 169 170 170, r49 -> p167 | J JMP_IMM
123: 174 175 178 178, r0 -> p164, r0 -> p168 [p164] | MOV LOAD
124: 174 178 181 181, r0 -> p168, r0 -> p169 [p168] | MOV LOAD
125: 174 181 182 182, r0 -> p169, r0 -> p170 [p169], r49 -> p171 [p167] | AND AND_IMM
126: 174 182 183 183, r0 -> p170, r44 -> p172 [p166], r49 -> p173 [p171] | CMP SUB_IMM
127: 174 183 184 184, r49 -> p173 | J JMP_IMM
128: 188 189 192 192, r5 -> p145, r11 -> p174 [p11] | MOV LOAD
129: 188 192 193 193, r11 -> p174, r11 -> p174, r44 -> p175 [p172], r49 -> p176 [p173] | TEST AND
130: 188 193 194 194, r49 -> p176 | J JMP_IMM
131: 188 189 192 194, r5 -> p145, r1 -> p177 [p1] | MOV LOAD
132: 188 189 190 194, r5 -> p145 | MOV STORE
133: 188 192 193 194, r1 -> p177, r5 -> p145 | MOV STORE
134: 188 189 190 194 | JMP JMP_IMM
135: 188 193 196 196, r5 -> p145, r3 -> p178 [p159] | MOV LOAD
136: 189 196 199 199, r3 -> p178, r0 -> p179 [p170] | MOV LOAD
137: 189 199 200 200, r0 -> p179, r0 -> p179, r44 -> p180 [p175], r49 -> p181 [p176] | TEST AND
138: 189 200 201 201, r49 -> p181 | J JMP_IMM
139: 189 199 202 202, r0 -> p179, r7 -> p182 [p64] | MOV LOAD
140: 189 202 205 205, r7 -> p182, r45 -> p183 [p165] | CMP LOAD
141: 189 205 206 206, r45 -> p183, r44 -> p184 [p180], r49 -> p185 [p181] | CMP SUB_IMM
142: 189 206 207 207, r49 -> p185 | J JMP_IMM
143: 189 202 205 207, r7 -> p182, r1 -> p186 [p177] | MOV LOAD
144: 190 205 206 207, r1 -> p186, r44 -> p187 [p184], r49 -> p188 [p185] | CMP SUB_IMM
145: 190 206 207 207, r49 -> p188 | J JMP_IMM
146: 211 212 213 213, r0 -> p189 [p179] | MOV ADD_IMM
147: 211 212 213 213 | JMP JMP_IMM
148: 211 213 214 214, r0 -> p189, r1 -> p186, r0 -> p190 [p189], r49 -> p191 [p188] | ADD ADD
149: 211 214 215 215, r1 -> p186, r0 -> p190, r44 -> p192 [p187], r49 -> p193 [p191] | CMP SUB
150: 211 215 216 216, r49 -> p193 | J JMP_IMM
151: 211 212 213 216, r1 -> p186, r13 -> p194 [p149] | MOV ADD
152: 211 212 213 216, r45 -> p195 [p183] | CMP SAVE_PC
153: 211 213 216 216, r45 -> p195, r45 -> p196 [p195] | CMP LOAD
154: 212 216 217 217, r45 -> p196, r13 -> p194, r44 -> p197 [p192], r49 -> p198 [p193] | CMP SUB
155: 212 214 215 217, r0 -> p190, r5 -> p145 | MOV STORE
156: 212 217 218 218, r49 -> p198 | J JMP_IMM
157: 222 223 224 224, r44 -> p199 [p197] | MOV SAVE_PC
158: 222 224 227 227, r44 -> p199, r2 -> p200 [p131] | MOV LOAD
159: 222 227 228 228, r2 -> p200, r2 -> p200, r44 -> p201 [p199], r49 -> p202 [p198] | TEST AND
160: 222 228 229 229, r49 -> p202 | J JMP_IMM
161: 233 234 237 237, r2 -> p200, r10 -> p203 [p10] | MOV LOAD
162: 233 237 238 238, r10 -> p203, r10 -> p203, r44 -> p204 [p201], r49 -> p205 [p202] | TEST AND
163: 233 238 239 239, r49 -> p205 | J JMP_IMM
164: 243 244 245 245, r13 -> p194, r13 -> p206 [p194], r49 -> p207 [p205] | ADD ADD_IMM
165: 243 244 247 247, r5 -> p145, r45 -> p208 [p196] | CMP LOAD
166: 243 247 248 248, r45 -> p208, r13 -> p206, r44 -> p209 [p204], r49 -> p210 [p207] | CMP SUB
167: 243 248 249 249, r49 -> p210 | J JMP_IMM
168: 253 254 257 257, r5 -> p145, r45 -> p211 [p208] | ADD LOAD
169: 253 257 258 258, r45 -> p211, r44 -> p212 [p209], r49 -> p213 [p210] | ADD ADD_IMM
170: 253 258 259 259, r44 -> p212, r5 -> p145 | ADD STORE
171: 253 254 257 259, r5 -> p145, r45 -> p214 [p211] | ADD LOAD
172: 253 257 258 259, r45 -> p214, r44 -> p215 [p212], r49 -> p216 [p213] | ADD ADD_IMM
173: 253 258 259 259, r44 -> p215, r5 -> p145 | ADD STORE
174: 253 254 257 259, r5 -> p145, r0 -> p217 [p190] | MOV LOAD
175: 253 259 262 262, r5 -> p145, r45 -> p218 [p214] | CMP LOAD
176: 254 262 263 263, r45 -> p218, r0 -> p217, r44 -> p219 [p215], r49 -> p220 [p216] | CMP SUB
177: 254 263 264 264, r49 -> p220 | J JMP_IMM
178: 268 269 272 272, r5 -> p145, r1 -> p221 [p186] | MOV LOAD
179: 268 269 270 272, r6 -> p222 [p69] | XOR ADD
180: 268 269 270 272 | XCHG NOP
181: 268 269 270 272 | JMP JMP_IMM
182: 268 272 275 275, r1 -> p221, r45 -> p223 [p218] | CMP LOAD
183: 268 275 276 276, r45 -> p223, r44 -> p224 [p219], r49 -> p225 [p220] | CMP SUB
184: 268 276 277 277, r49 -> p225 | J JMP_IMM
185: 268 272 275 277, r1 -> p221, r0 -> p226 [p217] | MOV LOAD
186: 269 275 276 277, r0 -> p226, r0 -> p226, r44 -> p227 [p224], r49 -> p228 [p225] | TEST AND
187: 269 276 277 277, r49 -> p228 | J JMP_IMM
188: 269 275 278 278, r0 -> p226, r45 -> p229 [p223] | CMP LOAD
189: 269 278 279 279, r45 -> p229, r44 -> p230 [p227], r49 -> p231 [p228] | CMP SUB
190: 269 279 280 280, r49 -> p231 | J JMP_IMM
191: 284 285 286 286, r6 -> p222, r6 -> p232 [p222], r49 -> p233 [p231] | ADD ADD_IMM
192: 284 285 286 286, r1 -> p221, r1 -> p234 [p221], r49 -> p235 [p233] | ADD ADD_IMM
193: 284 285 288 288, r5 -> p145, r45 -> p236 [p229] | CMP LOAD
194: 284 288 289 289, r6 -> p232, r45 -> p236, r44 -> p237 [p230], r49 -> p238 [p235] | CMP SUB
195: 284 289 290 290, r49 -> p238 | J JMP_IMM
196: 294 295 298 298, r5 -> p145, r1 -> p239 [p234] | MOV LOAD
197: 294 295 296 298, r5 -> p145 | MOV STORE
198: 294 298 299 299, r1 -> p239, r5 -> p145 | MOV STORE
199: 294 295 296 299 | JMP JMP_IMM
200: 294 299 302 302, r5 -> p145, r2 -> p240 [p200] | MOV LOAD
201: 294 302 305 305, r2 -> p240, r0 -> p241 [p226] | MOV LOAD
202: 294 305 306 306, r0 -> p241, r0 -> p241, r44 -> p242 [p237], r49 -> p243 [p238] | TEST AND
203: 294 306 307 307, r49 -> p243 | J JMP_IMM
204: 295 296 297 307, r44 -> p244 [p242] | MOV SAVE_PC
205: 295 297 300 307, r44 -> p244, r9 -> p245 [p9] | MOV LOAD
206: 295 305 308 308, r0 -> p241, r12 -> p246 [p157] | MOV LOAD
207: 295 302 305 308, r2 -> p240, r14 -> p247 [p151] | MOV LOAD
208: 295 300 301 308, r9 -> p245, r9 -> p245, r44 -> p248 [p244], r49 -> p249 [p243] | TEST AND
209: 295 301 302 308, r49 -> p249 | J JMP_IMM
210: 306 308 311 311, r12 -> p246, r44 -> p250 [p248] | MOVZX LOAD
211: 306 311 312 312, r44 -> p250, r2 -> p251 [p240] | MOVZX ZEXT_BYTE_TO_DWORD
212: 306 312 313 313, r2 -> p251, r44 -> p252 [p250], r49 -> p253 [p249] | CMP SUB_IMM
213: 306 313 314 314, r49 -> p253 | J JMP_IMM
214: 306 307 310 314, r5 -> p145, r45 -> p254 [p236] | CMP LOAD
215: 306 310 311 314, r45 -> p254, r44 -> p255 [p252], r49 -> p256 [p253] | CMP SUB
216: 306 311 312 314, r49 -> p256 | J JMP_IMM
217: 316 317 320 320, r5 -> p145, r1 -> p257 [p239] | MOV LOAD
218: 316 320 323 323, r1 -> p257, r6 -> p258 [p232] | MOV LOAD
219: 316 323 324 324, r6 -> p258, r6 -> p258, r44 -> p259 [p255], r49 -> p260 [p256] | TEST AND
220: 316 317 318 324 | NOP NOP
221: 316 324 325 325, r49 -> p260 | J JMP_IMM
222: 316 317 320 325, r12 -> p246, r44 -> p261 [p259] | MOVZX LOAD
223: 316 320 321 325, r44 -> p261, r0 -> p262 [p241] | MOVZX ZEXT_WORD_TO_DWORD
224: 316 321 322 325, r0 -> p262, r44 -> p263 [p261], r49 -> p264 [p260] | CMP SUB_IMM
225: 317 322 323 325, r49 -> p264 | J JMP_IMM
226: 317 321 322 325, r0 -> p262, r44 -> p265 [p263], r49 -> p266 [p264] | CMP SUB_IMM
227: 317 322 323 325, r49 -> p266 | J JMP_IMM
228: 327 328 329 329, r0 -> p262, r44 -> p267 [p265], r49 -> p268 [p266] | CMP SUB_IMM
229: 327 329 330 330, r49 -> p268 | J JMP_IMM
230: 334 335 336 336, r2 -> p269 [p251] | MOV ADD_IMM
231: 334 335 336 336, r12 -> p246, r7 -> p270 [p182] | MOV ADD
232: 334 335 336 336, r44 -> p271 [p267] | CALL SAVE_PC
233: 334 335 336 336, r4 -> p156, r4 -> p272 [p156] | CALL SUB_IMM
234: 334 336 337 337, r44 -> p271, r4 -> p272 | CALL STORE
235: 334 335 336 337 | CALL JMP_IMM
236: 334 336 337 337, r14 -> p247, r4 -> p272 | PUSH STORE
237: 334 336 337 337, r4 -> p272, r4 -> p273 [p272] | PUSH SUB_IMM
238: 335 336 337 337, r2 -> p269, r14 -> p274 [p247] | MOV ADD
239: 335 337 338 338, r13 -> p206, r4 -> p273 | PUSH STORE
240: 335 337 338 338, r4 -> p273, r4 -> p275 [p273] | PUSH SUB_IMM
241: 335 336 337 338, r6 -> p258, r13 -> p276 [p206] | MOV ADD
242: 335 338 339 339, r12 -> p246, r4 -> p275 | PUSH STORE
243: 335 338 339 339, r4 -> p275, r4 -> p277 [p275] | PUSH SUB_IMM
244: 335 339 340 340, r5 -> p145, r4 -> p277 | PUSH STORE
245: 335 339 340 340, r4 -> p277, r4 -> p278 [p277] | PUSH SUB_IMM
246: 336 337 338 340, r7 -> p270, r5 -> p279 [p145] | MOV ADD
247: 336 340 341 341, r3 -> p178, r4 -> p278 | PUSH STORE
248: 336 340 341 341, r4 -> p278, r4 -> p280 [p278] | PUSH SUB_IMM
249: 336 337 340 341, r7 -> p270, r44 -> p281 [p271] | MOVZX LOAD
250: 336 340 341 341, r44 -> p281, r0 -> p282 [p262] | MOVZX ZEXT_WORD_TO_DWORD
251: 336 341 342 342, r0 -> p282, r44 -> p283 [p281], r49 -> p284 [p268] | CMP SUB_IMM
252: 336 342 343 343, r49 -> p284 | J JMP_IMM
253: 347 348 351 351, r7 -> p270, r3 -> p285 [p178] | MOV LOAD
254: 347 348 349 351, r45 -> p286 [p254] | CMP SAVE_PC
255: 347 349 352 352, r45 -> p286, r45 -> p287 [p286] | CMP LOAD
256: 347 352 353 353, r3 -> p285, r45 -> p287, r44 -> p288 [p283], r49 -> p289 [p284] | CMP SUB
257: 347 353 354 354, r49 -> p289 | J JMP_IMM
258: 358 359 360 360, r44 -> p290 [p288] | MOV SAVE_PC
259: 358 360 363 363, r44 -> p290, r2 -> p291 [p269] | MOV LOAD
260: 358 363 364 364, r2 -> p291, r2 -> p291, r44 -> p292 [p290], r49 -> p293 [p289] | TEST AND
261: 358 364 365 365, r49 -> p293 | J JMP_IMM
262: 369 370 373 373, r2 -> p291, r45 -> p294 [p287] | CMP LOAD
263: 369 373 374 374, r45 -> p294, r3 -> p285, r44 -> p295 [p292], r49 -> p296 [p293] | CMP SUB
264: 369 374 375 375, r49 -> p296 | J JMP_IMM
265: 379 380 381 381, r13 -> p276, r13 -> p276, r44 -> p297 [p295], r49 -> p298 [p296] | TEST AND
266: 379 381 382 382, r49 -> p298 | J JMP_IMM
267: 379 380 383 383, r13 -> p276, r1 -> p299 [p257] | MOV LOAD
268: 379 383 384 384, r1 -> p299, r1 -> p299, r44 -> p300 [p297], r49 -> p301 [p298] | TEST AND
269: 379 384 385 385, r49 -> p301 | J JMP_IMM
270: 389 390 393 393, r1 -> p299, r2 -> p302 [p291] | MOV LOAD
271: 389 393 396 396, r2 -> p302, r45 -> p303 [p294] | CMP LOAD
272: 389 396 397 397, r45 -> p303, r44 -> p304 [p300], r49 -> p305 [p301] | CMP SUB_IMM
273: 389 397 398 398, r49 -> p305 | J JMP_IMM
274: 402 403 406 406, r1 -> p299, r1 -> p306 [p299] | MOV LOAD
275: 402 406 407 407, r1 -> p306, r1 -> p306, r44 -> p307 [p304], r49 -> p308 [p305] | TEST AND
276: 402 407 408 408, r49 -> p308 | J JMP_IMM
277: 402 406 409 409, r1 -> p306, r2 -> p309 [p302] | MOV LOAD
278: 402 409 412 412, r2 -> p309, r45 -> p310 [p303] | CMP LOAD
279: 402 412 413 413, r45 -> p310, r44 -> p311 [p307], r49 -> p312 [p308] | CMP SUB_IMM
280: 402 413 414 414, r49 -> p312 | J JMP_IMM
281: 402 409 412 414, r2 -> p309, r44 -> p313 [p311] | MOVZX LOAD
282: 403 412 413 414, r44 -> p313, r0 -> p314 [p282] | MOVZX ZEXT_BYTE_TO_DWORD
283: 403 404 407 414, r5 -> p279, r45 -> p315 [p310] | CMP LOAD
284: 403 413 414 414, r0 -> p314, r45 -> p315, r44 -> p316 [p313], r49 -> p317 [p312] | CMP SUB
285: 403 414 415 415, r49 -> p317 | J JMP_IMM
286: 403 409 412 415, r2 -> p309, r5 -> p318 [p279] | MOV LOAD
287: 403 404 405 415, r45 -> p319 [p315] | CMP SAVE_PC
288: 403 405 408 415, r45 -> p319, r45 -> p320 [p319] | CMP LOAD
289: 403 412 413 415, r5 -> p318, r45 -> p320, r44 -> p321 [p316], r49 -> p322 [p317] | CMP SUB
290: 404 413 414 415, r49 -> p322 | J JMP_IMM
291: 404 412 413 415, r5 -> p318, r0 -> p323 [p314] | MOV ADD
292: 404 413 414 415, r0 -> p323, r0 -> p324 [p323], r49 -> p325 [p322] | SHR SHR_IMM
293: 404 414 415 416, r0 -> p324, r5 -> p318, r0 -> p326 [p324], r49 -> p327 [p325] | XOR XOR
294: 404 415 416 416, r0 -> p326, r0 -> p328 [p326], r49 -> p329 [p327] | AND AND_IMM
295: 404 416 417 417, r0 -> p328, r0 -> p330 [p328], r49 -> p331 [p329] | SHL SHL_IMM
296: 404 417 420 420, r0 -> p330, r2 -> p332 [p309] | MOV LOAD
297: 404 417 418 420, r0 -> p330, r12 -> p333 [p246] | LEA LEA
298: 405 420 421 421, r2 -> p332, r2 -> p332, r44 -> p334 [p321], r49 -> p335 [p331] | TEST AND
299: 405 421 422 422, r49 -> p335 | J JMP_IMM
300: 405 420 423 423, r2 -> p332, r45 -> p336 [p320] | CMP LOAD
301: 405 423 424 424, r45 -> p336, r5 -> p318, r44 -> p337 [p334], r49 -> p338 [p335] | CMP SUB
302: 405 424 425 425, r49 -> p338 | J JMP_IMM
303: 405 406 407 425 | JMP JMP_IMM
304: 405 420 423 425, r2 -> p332, r12 -> p339 [p333] | MOV LOAD
305: 405 406 407 425, r44 -> p340 [p337] | MOV SAVE_PC
306: 406 412 413 425, r5 -> p318, r44 -> p340 | MOV STORE
307: 406 407 408 425, r44 -> p341 [p340] | MOV SAVE_PC
308: 406 420 421 425, r2 -> p332, r44 -> p341 | MOV STORE
309: 406 423 424 425, r12 -> p339, r0 -> p342 [p330] | MOVSX SEXT_DWORD_TO_QWORD
310: 406 424 425 426, r0 -> p342, r0 -> p342, r14 -> p343 [p274] | LEA LEA
311: 406 425 426 426, r14 -> p343, r14 -> p344 [p343], r49 -> p345 [p338] | SHL SHL_IMM
312: 406 426 427 427, r14 -> p344, r13 -> p346 [p276] | MOV ADD
313: 406 407 408 427, r44 -> p347 [p341] | ADD SAVE_PC
314: 407 408 411 427, r44 -> p347, r44 -> p348 [p347] | ADD LOAD
315: 407 427 428 428, r13 -> p346, r44 -> p348, r13 -> p349 [p346], r49 -> p350 [p345] | ADD ADD
316: 407 420 423 428, r2 -> p332, r45 -> p351 [p336] | CMP LOAD
317: 407 423 424 428, r45 -> p351, r5 -> p318, r44 -> p352 [p348], r49 -> p353 [p350] | CMP SUB
318: 407 424 425 428, r49 -> p353 | J JMP_IMM
319: 407 408 409 428, r45 -> p354 [p351] | CMP SAVE_PC
320: 407 413 416 428, r45 -> p354, r45 -> p355 [p354] | CMP LOAD
321: 407 416 417 428, r3 -> p285, r45 -> p355, r44 -> p356 [p352], r49 -> p357 [p353] | CMP SUB
322: 408 417 418 428, r49 -> p357 | J JMP_IMM
323: 408 409 410 429, r3 -> p285, r0 -> p358 [p342] | MOV ADD
324: 408 410 411 429, r0 -> p358, r0 -> p359 [p358], r49 -> p360 [p357] | SHR SHR_IMM
325: 408 411 412 429, r0 -> p359, r3 -> p285, r0 -> p361 [p359], r49 -> p362 [p360] | XOR XOR
326: 408 412 413 429, r0 -> p361, r0 -> p363 [p361], r49 -> p364 [p362] | AND AND_IMM
327: 408 413 414 429, r0 -> p363, r0 -> p365 [p363], r49 -> p366 [p364] | SHL SHL_IMM
328: 408 414 417 429, r0 -> p365, r2 -> p367 [p332] | MOV LOAD
329: 408 414 415 429, r0 -> p365, r5 -> p368 [p318] | LEA LEA
330: 409 417 418 429, r2 -> p367, r2 -> p367, r44 -> p369 [p356], r49 -> p370 [p366] | TEST AND
331: 409 418 419 430, r49 -> p370 | J JMP_IMM
332: 423 424 427 430, r2 -> p367, r45 -> p371 [p355] | CMP LOAD
333: 423 427 428 430, r3 -> p285, r45 -> p371, r44 -> p372 [p369], r49 -> p373 [p370] | CMP SUB
334: 423 428 429 430, r49 -> p373 | J JMP_IMM
335: 423 424 425 430, r44 -> p374 [p372] | MOV SAVE_PC
336: 423 425 426 430, r3 -> p285, r44 -> p374 | MOV STORE
337: 423 424 425 430, r44 -> p375 [p374] | MOV SAVE_PC
338: 423 425 426 430, r2 -> p367, r44 -> p375 | MOV STORE
339: 423 424 425 431, r12 -> p339, r2 -> p367 | MOV STORE
340: 424 428 431 431, r13 -> p349, r2 -> p376 [p367] | MOV LOAD
341: 424 428 431 431, r13 -> p349, r7 -> p377 [p270] | MOV LOAD
342: 424 431 432 432, r2 -> p376, r44 -> p378 [p375], r49 -> p379 [p373] | CMP SUB_IMM
343: 424 432 433 433, r49 -> p379 | J JMP_IMM
344: 437 438 439 439, r3 -> p285, r44 -> p380 [p378], r49 -> p381 [p379] | CMP SUB_IMM
345: 437 439 440 440, r49 -> p381 | J JMP_IMM
346: 444 445 446 446, r2 -> p376, r44 -> p382 [p380], r49 -> p383 [p381] | CMP SUB_IMM
347: 444 445 446 446, r2 -> p376, r1 -> p384 [p306] | MOV ADD
348: 444 445 446 446, r3 -> p285, r8 -> p385 [p8] | MOV ADD
349: 444 446 447 447, r49 -> p383 | J JMP_IMM
350: 444 445 446 447, r44 -> p386 [p382] | MOV SAVE_PC
351: 444 446 449 449, r44 -> p386, r10 -> p387 [p203] | MOV LOAD
352: 444 445 446 449, r44 -> p388 [p386] | MOV SAVE_PC
353: 444 446 449 449, r44 -> p388, r6 -> p389 [p258] | MOV LOAD
354: 445 449 452 452, r8 -> p385, r10 -> p387, r1 -> p390 [p384] | MOV LOAD
355: 445 452 455 455, r1 -> p390, r44 -> p391 [p388] | MOVSX LOAD
356: 445 455 456 456, r44 -> p391, r0 -> p392 [p365] | MOVSX SEXT_DWORD_TO_QWORD
357: 445 456 459 459, r0 -> p392, r6 -> p389, r9 -> p393 [p245] | MOV LOAD
358: 445 446 447 459, r45 -> p394 [p371] | CMP SAVE_PC
359: 445 447 450 459, r45 -> p394, r45 -> p395 [p394] | CMP LOAD
360: 445 459 460 460, r9 -> p393, r45 -> p395, r44 -> p396 [p391], r49 -> p397 [p383] | CMP SUB
361: 445 460 461 461, r49 -> p397 | J JMP_IMM
362: 446 452 455 461, r1 -> p390, r44 -> p398 [p396] | MOVSX LOAD
363: 446 455 456 461, r44 -> p398, r0 -> p399 [p392] | MOVSX SEXT_DWORD_TO_QWORD
364: 446 456 459 461, r0 -> p399, r6 -> p389, r0 -> p400 [p399] | MOV LOAD
365: 446 447 448 461, r45 -> p401 [p395] | CMP SAVE_PC
366: 446 448 451 461, r45 -> p401, r45 -> p402 [p401] | CMP LOAD
367: 446 459 460 461, r0 -> p400, r45 -> p402, r44 -> p403 [p398], r49 -> p404 [p397] | CMP SUB
368: 446 460 461 461, r49 -> p404 | J JMP_IMM
369: 465 466 467 467, r7 -> p377, r44 -> p405 [p403], r49 -> p406 [p404] | CMP SUB_IMM
370: 465 467 468 468, r49 -> p406 | J JMP_IMM
371: 472 473 474 474, r44 -> p407 [p405] | MOV SAVE_PC
372: 472 474 477 477, r44 -> p407, r6 -> p408 [p389] | MOV LOAD
373: 472 473 474 477, r7 -> p377, r0 -> p409 [p400] | MOV ADD
374: 472 474 475 477, r0 -> p409, r0 -> p410 [p409], r49 -> p411 [p406] | SHL SHL_IMM
375: 472 473 474 477 | JMP JMP_IMM
376: 472 477 478 478, r0 -> p410, r6 -> p408, r2 -> p412 [p376] | LEA LEA
377: 472 477 478 478, r8 -> p385, r6 -> p408, r1 -> p413 [p390] | LEA LEA
378: 472 478 481 481, r2 -> p412, r0 -> p414 [p410] | MOV LOAD
379: 473 481 482 482, r0 -> p414, r1 -> p413 | MOV STORE
380: 473 478 481 482, r2 -> p412, r0 -> p415 [p414] | MOV LOAD
381: 473 481 482 482, r0 -> p415, r0 -> p415, r44 -> p416 [p407], r49 -> p417 [p411] | TEST AND
382: 473 482 483 483, r49 -> p417 | J JMP_IMM
383: 487 488 489 489, r44 -> p418 [p416] | MOV SAVE_PC
384: 487 489 492 492, r44 -> p418, r0 -> p419 [p415] | MOV LOAD
385: 487 492 493 493, r14 -> p344, r0 -> p419, r44 -> p420 [p418] | MOV LEA
386: 487 493 494 494, r3 -> p285, r44 -> p420 | MOV STORE
387: 487 488 489 494 | JMP JMP_IMM
388: 487 488 489 494, r0 -> p421 [p419] | MOV ADD_IMM
389: 487 488 489 494, r3 -> p285, r2 -> p412 | MOV STORE
390: 487 488 489 494, r7 -> p377, r1 -> p413 | MOV STORE
391: 488 489 490 494 | JMP JMP_IMM
392: 488 489 492 494, r4 -> p280, r3 -> p422 [p285] | POP LOAD
393: 488 489 490 494, r4 -> p280, r4 -> p423 [p280] | POP ADD_IMM
394: 488 490 493 495, r4 -> p423, r5 -> p424 [p368] | POP LOAD
395: 488 490 491 495, r4 -> p423, r4 -> p425 [p423] | POP ADD_IMM
396: 488 491 494 495, r4 -> p425, r12 -> p426 [p339] | POP LOAD
397: 488 491 492 495, r4 -> p425, r4 -> p427 [p425] | POP ADD_IMM
398: 488 492 495 495, r4 -> p427, r13 -> p428 [p349] | POP LOAD
399: 489 492 493 495, r4 -> p427, r4 -> p429 [p427] | POP ADD_IMM
400: 489 493 496 496, r4 -> p429, r14 -> p430 [p344] | POP LOAD
401: 489 493 494 496, r4 -> p429, r4 -> p431 [p429] | POP ADD_IMM
402: 489 494 497 497, r4 -> p431, r44 -> p432 [p420] | RET LOAD
403: 489 494 495 497, r4 -> p431, r4 -> p433 [p431] | RET ADD_IMM
404: 489 497 498 498, r44 -> p432 | RET JMP_REG
405: 489 490 491 498, r0 -> p421, r0 -> p421, r44 -> p434 [p432], r49 -> p435 [p417] | TEST AND
406: 489 491 492 498, r49 -> p435 | J JMP_IMM
407: 490 494 495 498, r12 -> p426, r7 -> p436 [p377] | MOV ADD
408: 490 491 492 498, r44 -> p437 [p434] | CALL SAVE_PC
409: 490 495 496 498, r4 -> p433, r4 -> p438 [p433] | CALL SUB_IMM
410: 490 496 497 498, r44 -> p437, r4 -> p438 | CALL STORE
411: 490 491 492 498 | CALL JMP_IMM
412: 490 496 497 499, r15 -> p153, r4 -> p438 | PUSH STORE
413: 490 496 497 499, r4 -> p438, r4 -> p439 [p438] | PUSH SUB_IMM
414: 490 495 496 499, r7 -> p436, r15 -> p440 [p153] | MOV ADD
415: 491 497 498 499, r14 -> p430, r4 -> p439 | PUSH STORE
416: 491 497 498 499, r4 -> p439, r4 -> p441 [p439] | PUSH SUB_IMM
417: 491 498 499 499, r13 -> p428, r4 -> p441 | PUSH STORE
418: 491 498 499 499, r4 -> p441, r4 -> p442 [p441] | PUSH SUB_IMM
419: 491 499 500 500, r12 -> p426, r4 -> p442 | PUSH STORE
420: 491 499 500 500, r4 -> p442, r4 -> p443 [p442] | PUSH SUB_IMM
421: 491 500 501 501, r5 -> p424, r4 -> p443 | PUSH STORE
422: 491 500 501 501, r4 -> p443, r4 -> p444 [p443] | PUSH SUB_IMM
423: 492 501 502 502, r3 -> p422, r4 -> p444 | PUSH STORE
424: 492 501 502 502, r4 -> p444, r4 -> p445 [p444] | PUSH SUB_IMM
425: 492 502 503 503, r4 -> p445, r4 -> p446 [p445], r49 -> p447 [p435] | SUB SUB_IMM
426: 492 495 498 503, r7 -> p436, r45 -> p448 [p402] | CMP LOAD
427: 492 498 499 503, r45 -> p448, r44 -> p449 [p437], r49 -> p450 [p447] | CMP SUB_IMM
428: 492 499 500 503, r49 -> p450 | J JMP_IMM
429: 492 496 499 503, r15 -> p440, r45 -> p451 [p448] | CMP LOAD
430: 492 499 500 503, r45 -> p451, r44 -> p452 [p449], r49 -> p453 [p450] | CMP SUB_IMM
431: 493 500 501 503, r49 -> p453 | J JMP_IMM
432: 505 506 509 509, r15 -> p440, r3 -> p454 [p422] | MOV LOAD
433: 505 506 507 509, r45 -> p455 [p451] | CMP SAVE_PC
434: 505 507 510 510, r45 -> p455, r45 -> p456 [p455] | CMP LOAD
435: 505 510 511 511, r3 -> p454, r45 -> p456, r44 -> p457 [p452], r49 -> p458 [p453] | CMP SUB
436: 505 511 512 512, r49 -> p458 | J JMP_IMM
437: 516 517 518 518, r44 -> p459 [p457] | MOV SAVE_PC
438: 516 518 521 521, r44 -> p459, r2 -> p460 [p412] | MOV LOAD
439: 516 521 522 522, r2 -> p460, r2 -> p460, r44 -> p461 [p459], r49 -> p462 [p458] | TEST AND
440: 516 522 523 523, r49 -> p462 | J JMP_IMM
441: 527 528 531 531, r2 -> p460, r5 -> p463 [p424] | MOV LOAD
442: 527 531 532 532, r5 -> p463, r5 -> p463, r44 -> p464 [p461], r49 -> p465 [p462] | TEST AND
443: 527 532 533 533, r49 -> p465 | J JMP_IMM
444: 537 538 539 539, r4 -> p446, r4 -> p466 [p446], r49 -> p467 [p465] | ADD ADD_IMM
445: 537 539 542 542, r4 -> p466, r3 -> p468 [p454] | POP LOAD
446: 537 539 540 542, r4 -> p466, r4 -> p469 [p466] | POP ADD_IMM
447: 537 540 543 543, r4 -> p469, r5 -> p470 [p463] | POP LOAD
448: 537 540 541 543, r4 -> p469, r4 -> p471 [p469] | POP ADD_IMM
449: 537 541 544 544, r4 -> p471, r12 -> p472 [p426] | POP LOAD
450: 537 541 542 544, r4 -> p471, r4 -> p473 [p471] | POP ADD_IMM
451: 537 542 545 545, r4 -> p473, r13 -> p474 [p428] | POP LOAD
452: 538 542 543 545, r4 -> p473, r4 -> p475 [p473] | POP ADD_IMM
453: 538 543 546 546, r4 -> p475, r14 -> p476 [p430] | POP LOAD
454: 538 543 544 546, r4 -> p475, r4 -> p477 [p475] | POP ADD_IMM
455: 538 544 547 547, r4 -> p477, r15 -> p478 [p440] | POP LOAD
456: 538 544 545 547, r4 -> p477, r4 -> p479 [p477] | POP ADD_IMM
457: 538 545 548 548, r4 -> p479, r44 -> p480 [p464] | RET LOAD
458: 538 545 546 548, r4 -> p479, r4 -> p481 [p479] | RET ADD_IMM
459: 538 548 549 549, r44 -> p480 | RET JMP_REG
460: 539 544 547 549, r12 -> p472, r45 -> p482 [p456] | CMP LOAD
461: 539 547 548 549, r45 -> p482, r44 -> p483 [p480], r49 -> p484 [p467] | CMP SUB_IMM
462: 539 548 549 549, r49 -> p484 | J JMP_IMM
463: 539 544 547 549, r12 -> p472, r3 -> p485 [p468] | MOV LOAD
464: 539 547 548 549, r3 -> p485, r44 -> p486 [p483], r49 -> p487 [p484] | CMP SUB_IMM
465: 539 548 549 549, r49 -> p487 | J JMP_IMM
466: 539 540 541 549, r45 -> p488 [p482] | CMP SAVE_PC
467: 539 541 544 550, r45 -> p488, r45 -> p489 [p488] | CMP LOAD
468: 540 547 548 550, r3 -> p485, r45 -> p489, r44 -> p490 [p486], r49 -> p491 [p487] | CMP SUB
469: 540 548 549 550, r49 -> p491 | J JMP_IMM
470: 553 554 555 555, r44 -> p492 [p490] | MOV SAVE_PC
471: 553 555 558 558, r44 -> p492, r2 -> p493 [p460] | MOV LOAD
472: 553 558 559 559, r2 -> p493, r2 -> p493, r44 -> p494 [p492], r49 -> p495 [p491] | TEST AND
473: 553 559 560 560, r49 -> p495 | J JMP_IMM
474: 564 565 568 568, r2 -> p493, r0 -> p496 [p421] | MOV LOAD
475: 564 568 569 569, r0 -> p496, r0 -> p497 [p496], r49 -> p498 [p495] | AND AND_IMM
476: 564 565 568 569, r5 -> p470, r2 -> p499 [p493] | MOV LOAD
477: 564 569 570 570, r0 -> p497, r2 -> p499 | MOV STORE
478: 564 565 566 570 | JMP JMP_IMM
479: 564 565 568 570, r14 -> p476, r45 -> p500 [p489] | CMP LOAD
480: 564 568 569 570, r45 -> p500, r44 -> p501 [p494], r49 -> p502 [p498] | CMP SUB_IMM
481: 564 569 570 570, r49 -> p502 | J JMP_IMM
482: 574 575 578 578, r5 -> p470, r0 -> p503 [p497] | MOV LOAD
483: 574 575 578 578, r12 -> p472, r44 -> p504 [p501] | MOVZX LOAD
484: 574 578 579 579, r44 -> p504, r1 -> p505 [p413] | MOVZX ZEXT_BYTE_TO_DWORD
485: 574 575 576 579, r12 -> p472, r7 -> p506 [p436] | MOV ADD
486: 574 578 581 581, r0 -> p503, r2 -> p507 [p499] | MOV LOAD
487: 574 578 581 581, r0 -> p503, r6 -> p508 [p408] | MOV LOAD
488: 574 575 576 581, r44 -> p509 [p504] | CALL SAVE_PC
489: 574 575 576 581, r4 -> p481, r4 -> p510 [p481] | CALL SUB_IMM
490: 575 576 577 581, r44 -> p509, r4 -> p510 | CALL STORE
491: 575 576 577 581 | CALL JMP_IMM
492: 575 576 577 581, r15 -> p478, r4 -> p510 | PUSH STORE
493: 575 576 577 581, r4 -> p510, r4 -> p511 [p510] | PUSH SUB_IMM
494: 575 581 582 582, r2 -> p507, r15 -> p512 [p478] | MOV ADD
495: 575 577 578 582, r14 -> p476, r4 -> p511 | PUSH STORE
496: 575 577 578 582, r4 -> p511, r4 -> p513 [p511] | PUSH SUB_IMM
497: 575 581 582 582, r6 -> p508, r14 -> p514 [p476] | MOV ADD
498: 576 578 579 582, r13 -> p474, r4 -> p513 | PUSH STORE
499: 576 578 579 582, r4 -> p513, r4 -> p515 [p513] | PUSH SUB_IMM
500: 576 579 580 582, r12 -> p472, r4 -> p515 | PUSH STORE
501: 576 579 580 582, r4 -> p515, r4 -> p516 [p515] | PUSH SUB_IMM
502: 576 580 581 583, r5 -> p470, r4 -> p516 | PUSH STORE
503: 576 580 581 583, r4 -> p516, r4 -> p517 [p516] | PUSH SUB_IMM
504: 576 577 578 583, r7 -> p506, r5 -> p518 [p470] | MOV ADD
505: 576 581 582 583, r3 -> p485, r4 -> p517 | PUSH STORE
506: 577 581 582 583, r4 -> p517, r4 -> p519 [p517] | PUSH SUB_IMM
507: 577 582 583 583, r4 -> p519, r4 -> p520 [p519], r49 -> p521 [p502] | SUB SUB_IMM
508: 577 578 581 583, r7 -> p506, r45 -> p522 [p500] | CMP LOAD
509: 577 581 582 583, r45 -> p522, r44 -> p523 [p509], r49 -> p524 [p521] | CMP SUB_IMM
510: 577 583 584 584, r1 -> p505, r4 -> p520 | MOV STORE
511: 577 582 583 584, r49 -> p524 | J JMP_IMM
512: 587 588 591 591, r7 -> p506, r3 -> p525 [p485] | MOV LOAD
513: 587 588 589 591, r45 -> p526 [p522] | CMP SAVE_PC
514: 587 589 592 592, r45 -> p526, r45 -> p527 [p526] | CMP LOAD
515: 587 592 593 593, r3 -> p525, r45 -> p527, r44 -> p528 [p523], r49 -> p529 [p524] | CMP SUB
516: 587 593 594 594, r49 -> p529 | J JMP_IMM
517: 598 599 600 600, r44 -> p530 [p528] | MOV SAVE_PC
518: 598 600 603 603, r44 -> p530, r2 -> p531 [p507] | MOV LOAD
519: 598 603 604 604, r2 -> p531, r2 -> p531, r44 -> p532 [p530], r49 -> p533 [p529] | TEST AND
520: 598 604 605 605, r49 -> p533 | J JMP_IMM
521: 609 610 613 613, r2 -> p531, r45 -> p534 [p527] | CMP LOAD
522: 609 613 614 614, r45 -> p534, r3 -> p525, r44 -> p535 [p532], r49 -> p536 [p533] | CMP SUB
523: 609 614 615 615, r49 -> p536 | J JMP_IMM
524: 609 610 613 615, r5 -> p518, r45 -> p537 [p534] | CMP LOAD
525: 609 613 614 615, r45 -> p537, r44 -> p538 [p535], r49 -> p539 [p536] | CMP SUB_IMM
526: 609 614 615 615, r49 -> p539 | J JMP_IMM
527: 609 610 611 615, r3 -> p525, r44 -> p540 [p538], r49 -> p541 [p539] | CMP SUB_IMM
528: 609 611 612 615, r49 -> p541 | J JMP_IMM
529: 616 617 618 618, r44 -> p542 [p540] | MOV SAVE_PC
530: 616 618 621 621, r44 -> p542, r13 -> p543 [p474] | MOV LOAD
531: 616 621 622 622, r13 -> p543, r13 -> p543, r44 -> p544 [p542], r49 -> p545 [p541] | TEST AND
532: 616 622 623 623, r49 -> p545 | J JMP_IMM
533: 616 621 624 624, r13 -> p543, r0 -> p546 [p503] | MOV LOAD
534: 616 617 618 624, r44 -> p547 [p544] | MOV SAVE_PC
535: 616 624 625 625, r0 -> p546, r44 -> p547 | MOV STORE
536: 616 621 622 625, r5 -> p518, r13 -> p543 | MOV STORE
537: 617 621 622 625, r13 -> p543 | MOV STORE
538: 617 618 621 625, r5 -> p518, r44 -> p548 [p547] | MOVZX LOAD
539: 617 621 622 625, r44 -> p548, r0 -> p549 [p546] | MOVZX ZEXT_WORD_TO_DWORD
540: 617 622 623 625, r0 -> p549, r44 -> p550 [p548], r49 -> p551 [p545] | CMP SUB_IMM
541: 617 623 624 625, r49 -> p551 | J JMP_IMM
542: 628 629 630 630, r0 -> p552 [p549] | XOR ADD
543: 628 629 630 630 | JMP JMP_IMM
544: 628 630 631 631, r0 -> p552, r13 -> p543 | MOV STORE
545: 628 629 630 631, r5 -> p518, r7 -> p553 [p506] | MOV ADD
546: 628 629 630 631, r44 -> p554 [p550] | CALL SAVE_PC
547: 628 629 630 631, r4 -> p520, r4 -> p555 [p520] | CALL SUB_IMM
548: 628 630 631 631, r44 -> p554, r4 -> p555 | CALL STORE
549: 628 629 630 631 | CALL JMP_IMM
550: 629 630 631 631, r12 -> p472, r4 -> p555 | PUSH STORE
551: 629 630 631 631, r4 -> p555, r4 -> p556 [p555] | PUSH SUB_IMM
552: 629 631 632 632, r5 -> p518, r4 -> p556 | PUSH STORE
553: 629 631 632 632, r4 -> p556, r4 -> p557 [p556] | PUSH SUB_IMM
554: 629 630 631 632, r5 -> p558 [p518] | XOR ADD
555: 629 632 633 633, r3 -> p525, r4 -> p557 | PUSH STORE
556: 629 632 633 633, r4 -> p557, r4 -> p559 [p557] | PUSH SUB_IMM
557: 629 630 631 633, r3 -> p560 [p525] | XOR ADD
558: 630 633 634 634, r4 -> p559, r4 -> p561 [p559], r49 -> p562 [p551] | SUB SUB_IMM
559: 630 634 635 635, r4 -> p561, r12 -> p563 [p472] | LEA LEA
560: 630 634 635 635, r7 -> p553, r4 -> p561 | MOV STORE
561: 630 635 636 636, r12 -> p563, r7 -> p564 [p553] | MOV ADD
562: 630 631 632 636, r44 -> p565 [p554] | CALL SAVE_PC
563: 630 634 635 636, r4 -> p561, r4 -> p566 [p561] | CALL SUB_IMM
564: 630 635 636 636, r44 -> p565, r4 -> p566 | CALL STORE
565: 630 631 632 636 | CALL JMP_IMM
566: 631 636 637 637, r7 -> p564, r0 -> p567 [p552] | MOV ADD
567: 631 636 637 637, r7 -> p564 | MOV STORE
568: 631 636 637 637, r7 -> p564 | MOV STORE
569: 631 636 639 639, r4 -> p566, r44 -> p568 [p565] | RET LOAD
570: 631 635 636 639, r4 -> p566, r4 -> p569 [p566] | RET ADD_IMM
571: 631 639 640 640, r44 -> p568 | RET JMP_REG
572: 631 636 637 640, r4 -> p569, r7 -> p570 [p564] | LEA LEA
573: 631 635 636 640, r12 -> p563, r2 -> p571 [p531] | MOV ADD
574: 632 633 634 640, r6 -> p572 [p508] | MOV ADD_IMM
575: 632 633 634 640, r44 -> p573 [p568] | CALL SAVE_PC
576: 632 636 637 640, r4 -> p569, r4 -> p574 [p569] | CALL SUB_IMM
577: 632 637 638 640, r44 -> p573, r4 -> p574 | CALL STORE
578: 632 633 634 640 | CALL JMP_IMM
579: 632 637 638 641, r15 -> p512, r4 -> p574 | PUSH STORE
580: 632 637 638 641, r4 -> p574, r4 -> p575 [p574] | PUSH SUB_IMM
581: 632 634 635 641, r6 -> p572, r15 -> p576 [p512] | MOV ADD
582: 633 636 637 641, r2 -> p571, r6 -> p577 [p572] | MOV ADD
583: 633 638 639 641, r14 -> p514, r4 -> p575 | PUSH STORE
584: 633 638 639 641, r4 -> p575, r4 -> p578 [p575] | PUSH SUB_IMM
585: 633 636 637 641, r2 -> p571, r14 -> p579 [p514] | MOV ADD
586: 633 639 640 641, r13 -> p543, r4 -> p578 | PUSH STORE
587: 633 639 640 642, r4 -> p578, r4 -> p580 [p578] | PUSH SUB_IMM
588: 633 640 641 642, r12 -> p563, r4 -> p580 | PUSH STORE
589: 633 640 641 642, r4 -> p580, r4 -> p581 [p580] | PUSH SUB_IMM
590: 634 641 642 642, r5 -> p558, r4 -> p581 | PUSH STORE
591: 634 641 642 642, r4 -> p581, r4 -> p582 [p581] | PUSH SUB_IMM
592: 634 642 643 643, r3 -> p560, r4 -> p582 | PUSH STORE
593: 634 642 643 643, r4 -> p582, r4 -> p583 [p582] | PUSH SUB_IMM
594: 634 643 644 644, r4 -> p583, r4 -> p584 [p583], r49 -> p585 [p562] | SUB SUB_IMM
595: 634 644 645 645, r7 -> p570, r4 -> p584 | MOV STORE
596: 634 635 636 645, r44 -> p586 [p573] | CALL SAVE_PC
597: 634 644 645 645, r4 -> p584, r4 -> p587 [p584] | CALL SUB_IMM
598: 635 645 646 646, r44 -> p586, r4 -> p587 | CALL STORE
599: 635 637 638 646, r15 -> p576 | CALL JMP_REG
600: 635 645 646 646, r4 -> p587, r4 -> p588 [p587], r49 -> p589 [p585] | SUB SUB_IMM
601: 635 637 640 646, r7 -> p570, r0 -> p590 [p567] | MOV LOAD
602: 635 637 638 646, r6 -> p577, r2 -> p591 [p571] | MOV ADD
603: 635 640 641 646, r0 -> p590, r0 -> p590, r44 -> p592 [p586], r49 -> p593 [p589] | TEST AND
604: 635 641 642 646, r49 -> p593 | J JMP_IMM
605: 635 640 643 646, r0 -> p590, r45 -> p594 [p537] | CMP LOAD
606: 636 643 644 647, r45 -> p594, r44 -> p595 [p592], r49 -> p596 [p593] | CMP SUB_IMM
607: 636 644 645 647, r49 -> p596 | J JMP_IMM
608: 649 650 653 653, r0 -> p590, r6 -> p597 [p577] | MOV LOAD
609: 649 650 651 653, r2 -> p591, r7 -> p598 [p570] | MOV ADD
610: 649 650 651 653, r44 -> p599 [p595] | CALL SAVE_PC
611: 649 650 651 653, r4 -> p588, r4 -> p600 [p588] | CALL SUB_IMM
612: 649 651 652 653, r44 -> p599, r4 -> p600 | CALL STORE
613: 649 650 651 653 | CALL JMP_IMM
614: 649 651 652 653, r12 -> p563, r4 -> p600 | PUSH STORE
615: 649 651 652 653, r4 -> p600, r4 -> p601 [p600] | PUSH SUB_IMM
616: 650 653 654 654, r6 -> p597, r12 -> p602 [p563] | MOV ADD
617: 650 654 655 655, r12 -> p602, r12 -> p603 [p602], r49 -> p604 [p596] | SHR SHR_IMM
618: 650 652 653 655, r5 -> p558, r4 -> p601 | PUSH STORE
619: 650 652 653 655, r4 -> p601, r4 -> p605 [p601] | PUSH SUB_IMM
620: 650 651 652 655, r7 -> p598, r5 -> p606 [p558] | MOV ADD
621: 650 653 654 655, r3 -> p560, r4 -> p605 | PUSH STORE
622: 650 653 654 655, r4 -> p605, r4 -> p607 [p605] | PUSH SUB_IMM
623: 650 651 654 655, r7 -> p598, r7 -> p608 [p598] | MOV LOAD
624: 651 653 654 655, r6 -> p597, r3 -> p609 [p560] | MOV ADD
625: 651 654 655 656, r7 -> p608, r7 -> p608, r44 -> p610 [p599], r49 -> p611 [p604] | TEST AND
626: 651 655 656 656, r49 -> p611 | J JMP_IMM
627: 660 661 662 662, r44 -> p612 [p610] | MOV SAVE_PC
628: 660 662 665 665, r44 -> p612, r6 -> p613 [p597] | MOV LOAD
629: 660 665 666 666, r6 -> p613, r6 -> p613, r44 -> p614 [p612], r49 -> p615 [p611] | TEST AND
630: 660 666 667 667, r49 -> p615 | J JMP_IMM
631: 660 665 668 668, r6 -> p613, r0 -> p616 [p590] | MOV LOAD
632: 660 661 662 668, r44 -> p617 [p614] | MOV SAVE_PC
633: 660 668 669 669, r0 -> p616, r44 -> p617 | MOV STORE
634: 660 661 662 669, r3 -> p609, r2 -> p618 [p591] | MOV ADD
635: 661 662 663 669, r3 -> p609, r3 -> p619 [p609], r49 -> p620 [p615] | AND AND_IMM
636: 661 662 663 669, r0 -> p621 [p616] | MOV ADD_IMM
637: 661 662 663 669, r2 -> p618, r2 -> p622 [p618], r49 -> p623 [p620] | SHR SHR_IMM
638: 661 663 664 669, r3 -> p619, r1 -> p624 [p505] | MOV ADD
639: 661 665 666 669, r6 -> p613 | MOV STORE
640: 661 665 666 669, r6 -> p613 | MOV STORE
641: 661 663 664 670, r2 -> p622, r2 -> p625 [p622], r49 -> p626 [p623] | AND AND_IMM
642: 661 664 665 670, r0 -> p621, r1 -> p624, r0 -> p627 [p621], r49 -> p628 [p626] | SHL SHL
643: 662 663 666 670, r5 -> p606, r45 -> p629 [p594] | CMP LOAD
644: 662 666 667 670, r45 -> p629, r44 -> p630 [p617], r49 -> p631 [p628] | CMP SUB
645: 662 665 666 670, r12 -> p603, r6 -> p613 | MOV STORE
646: 662 665 666 670, r2 -> p625, r6 -> p613, r44 -> p632 [p630] | MOV LEA
647: 662 666 667 670, r0 -> p627, r44 -> p632 | MOV STORE
648: 662 667 668 670, r49 -> p631 | J JMP_IMM
649: 672 673 674 674, r6 -> p613 | MOV STORE
650: 672 673 674 674, r6 -> p613 | MOV STORE
651: 672 673 674 674, r6 -> p613, r5 -> p606 | MOV STORE
652: 672 673 674 674 | JMP JMP_IMM
653: 672 673 674 674, r6 -> p613, r5 -> p606 | MOV STORE
654: 672 673 674 674, r12 -> p603, r5 -> p606 | MOV STORE
655: 672 673 676 676, r4 -> p607, r3 -> p633 [p619] | POP LOAD
656: 672 673 674 676, r4 -> p607, r4 -> p634 [p607] | POP ADD_IMM
657: 673 674 677 677, r4 -> p634, r5 -> p635 [p606] | POP LOAD
658: 673 674 675 677, r4 -> p634, r4 -> p636 [p634] | POP ADD_IMM
659: 673 675 678 678, r4 -> p636, r12 -> p637 [p603] | POP LOAD
660: 673 675 676 678, r4 -> p636, r4 -> p638 [p636] | POP ADD_IMM
661: 673 676 679 679, r4 -> p638, r44 -> p639 [p632] | RET LOAD
662: 673 676 677 679, r4 -> p638, r4 -> p640 [p638] | RET ADD_IMM
663: 673 679 680 680, r44 -> p639 | RET JMP_REG
664: 673 674 675 680, r0 -> p641 [p627] | XOR ADD
665: 674 677 678 680, r4 -> p640, r4 -> p642 [p640], r49 -> p643 [p631] | ADD ADD_IMM
666: 674 678 681 681, r4 -> p642, r44 -> p644 [p639] | RET LOAD
667: 674 678 679 681, r4 -> p642, r4 -> p645 [p642] | RET ADD_IMM
668: 674 681 682 682, r44 -> p644 | RET JMP_REG
669: 674 679 680 682, r0 -> p641, r4 -> p645 | MOV STORE
670: 674 675 676 682, r0 -> p641, r0 -> p646 [p641], r49 -> p647 [p643] | ADD ADD_IMM
671: 674 676 677 682, r49 -> p647 | J JMP_IMM
672: 674 680 683 683, r4 -> p645, r11 -> p648 [p174] | MOV LOAD
673: 675 683 684 684, r11 -> p648, r11 -> p648, r44 -> p649 [p644], r49 -> p650 [p647] | TEST AND
674: 675 684 685 685, r49 -> p650 | J JMP_IMM
675: 675 679 682 685, r4 -> p645, r2 -> p651 [p625] | MOV LOAD
676: 675 682 685 685, r2 -> p651, r0 -> p652 [p646] | MOV LOAD
677: 675 685 686 686, r0 -> p652, r0 -> p652, r44 -> p653 [p649], r49 -> p654 [p650] | TEST AND
678: 675 686 687 687, r49 -> p654 | J JMP_IMM
679: 675 685 688 688, r0 -> p652, r44 -> p655 [p653] | MOVZX LOAD
680: 675 688 689 689, r44 -> p655, r0 -> p656 [p652] | MOVZX ZEXT_WORD_TO_DWORD
681: 676 689 692 692, r0 -> p656, r1 -> p657 [p624] | MOV LOAD
682: 676 689 692 692, r0 -> p656, r44 -> p658 [p655] | MOVZX LOAD
683: 676 692 693 693, r44 -> p658, r0 -> p659 [p656] | MOVZX ZEXT_BYTE_TO_DWORD
684: 676 692 693 693, r1 -> p657, r4 -> p645 | MOV STORE
685: 676 693 694 694, r0 -> p659, r0 -> p659, r44 -> p660 [p658], r49 -> p661 [p654] | TEST AND
686: 676 694 695 695, r49 -> p661 | J JMP_IMM
687: 676 693 694 695, r0 -> p659, r0 -> p662 [p659], r49 -> p663 [p661] | SUB SUB_IMM
688: 676 679 680 695, r4 -> p645 | MOV STORE
689: 677 694 695 695, r0 -> p662, r0 -> p664 [p662], r49 -> p665 [p663] | ADD ADD_IMM
690: 677 695 696 696, r0 -> p664, r4 -> p645 | MOV STORE
691: 677 680 683 696, r4 -> p645, r3 -> p666 [p633] | MOV LOAD
692: 677 693 696 696, r4 -> p645, r1 -> p667 [p657] | MOV LOAD
693: 677 680 683 696, r4 -> p645, r2 -> p668 [p651] | MOV LOAD
694: 677 696 699 699, r1 -> p667, r3 -> p666, r44 -> p669 [p660] | MOVZX LOAD
695: 677 699 700 700, r44 -> p669, r0 -> p670 [p664] | MOVZX ZEXT_BYTE_TO_DWORD
696: 677 700 701 701, r0 -> p670, r44 -> p671 [p669], r49 -> p672 [p665] | CMP SUB_IMM
697: 678 701 702 702, r49 -> p672 | J JMP_IMM
698: 678 700 701 702, r0 -> p670, r44 -> p673 [p671], r49 -> p674 [p672] | CMP SUB_IMM
699: 678 701 702 702, r49 -> p674 | J JMP_IMM
700: 678 700 701 702, r0 -> p670, r44 -> p675 [p673], r49 -> p676 [p674] | CMP SUB_IMM
701: 678 701 702 702, r49 -> p676 | J JMP_IMM
702: 678 680 683 702, r4 -> p645, r45 -> p677 [p629] | ADD LOAD
703: 678 683 684 702, r45 -> p677, r44 -> p678 [p675], r49 -> p679 [p676] | ADD ADD_IMM
704: 678 684 685 702, r44 -> p678, r4 -> p645 | ADD STORE
705: 679 696 699 703, r4 -> p645, r0 -> p680 [p670] | MOV LOAD
706: 679 685 688 703, r4 -> p645, r45 -> p681 [p677] | CMP LOAD
707: 679 699 700 703, r45 -> p681, r0 -> p680, r44 -> p682 [p678], r49 -> p683 [p679] | CMP SUB
708: 679 700 701 703, r49 -> p683 | J JMP_IMM
709: 705 706 709 709, r4 -> p645, r3 -> p684 [p666] | MOV LOAD
710: 705 706 709 709, r4 -> p645, r1 -> p685 [p667] | MOV LOAD
711: 705 706 709 709, r4 -> p645, r2 -> p686 [p668] | MOV LOAD
712: 705 709 712 712, r1 -> p685, r3 -> p684, r44 -> p687 [p682] | MOVZX LOAD
713: 705 712 713 713, r44 -> p687, r0 -> p688 [p680] | MOVZX ZEXT_BYTE_TO_DWORD
714: 705 713 714 714, r0 -> p688, r44 -> p689 [p687], r49 -> p690 [p683] | CMP SUB_IMM
715: 705 714 715 715, r49 -> p690 | J JMP_IMM
716: 705 713 714 715, r0 -> p688, r44 -> p691 [p689], r49 -> p692 [p690] | CMP SUB_IMM
717: 706 714 715 715, r49 -> p692 | J JMP_IMM
718: 706 713 714 715, r0 -> p688, r44 -> p693 [p691], r49 -> p694 [p692] | CMP SUB_IMM
719: 706 714 715 715, r49 -> p694 | J JMP_IMM
720: 706 707 710 715, r4 -> p645, r45 -> p695 [p681] | ADD LOAD
721: 706 710 711 715, r45 -> p695, r44 -> p696 [p693], r49 -> p697 [p694] | ADD ADD_IMM
722: 706 711 712 715, r44 -> p696, r4 -> p645 | ADD STORE
723: 706 707 710 716, r4 -> p645, r0 -> p698 [p688] | MOV LOAD
724: 706 712 715 716, r4 -> p645, r45 -> p699 [p695] | CMP LOAD
725: 707 715 716 716, r45 -> p699, r0 -> p698, r44 -> p700 [p696], r49 -> p701 [p697] | CMP SUB
726: 707 716 717 717, r49 -> p701 | J JMP_IMM
727: 707 708 709 717 | NOP NOP
728: 707 708 711 717, r4 -> p645, r0 -> p702 [p698] | MOV LOAD
729: 707 708 709 717, r4 -> p645, r4 -> p703 [p645], r49 -> p704 [p701] | ADD ADD_IMM
730: 707 709 712 717, r4 -> p703, r3 -> p705 [p684] | POP LOAD
731: 707 709 710 717, r4 -> p703, r4 -> p706 [p703] | POP ADD_IMM
732: 707 710 713 717, r4 -> p706, r5 -> p707 [p635] | POP LOAD
733: 708 710 711 717, r4 -> p706, r4 -> p708 [p706] | POP ADD_IMM
734: 708 711 714 718, r4 -> p708, r12 -> p709 [p637] | POP LOAD
735: 708 711 712 718, r4 -> p708, r4 -> p710 [p708] | POP ADD_IMM
736: 708 712 715 718, r4 -> p710, r13 -> p711 [p543] | POP LOAD
737: 708 712 713 718, r4 -> p710, r4 -> p712 [p710] | POP ADD_IMM
738: 708 713 716 718, r4 -> p712, r14 -> p713 [p579] | POP LOAD
739: 708 713 714 718, r4 -> p712, r4 -> p714 [p712] | POP ADD_IMM
740: 708 714 717 718, r4 -> p714, r15 -> p715 [p576] | POP LOAD
741: 709 714 715 718, r4 -> p714, r4 -> p716 [p714] | POP ADD_IMM
742: 709 715 718 719, r4 -> p716, r44 -> p717 [p700] | RET LOAD
743: 709 715 716 719, r4 -> p716, r4 -> p718 [p716] | RET ADD_IMM
744: 709 718 719 719, r44 -> p717 | RET JMP_REG
745: 709 716 719 719, r4 -> p718, r8 -> p719 [p385] | MOV LOAD
746: 709 719 720 720, r8 -> p719, r8 -> p719, r44 -> p720 [p717], r49 -> p721 [p704] | TEST AND
747: 709 720 721 721, r49 -> p721 | J JMP_IMM
748: 709 710 711 721, r9 -> p722 [p393] | XOR ADD
749: 710 719 722 722, r9 -> p722, r8 -> p719, r6 -> p723 [p613] | MOV LOAD
750: 710 711 712 722, r9 -> p722, r10 -> p724 [p387] | MOV ADD
751: 710 722 723 723, r6 -> p723, r6 -> p723, r44 -> p725 [p720], r49 -> p726 [p721] | TEST AND
752: 710 723 724 724, r49 -> p726 | J JMP_IMM
753: 710 711 712 724, r7 -> p727 [p608] | XOR ADD
754: 710 711 712 724, r11 -> p728 [p648] | MOV ADD_IMM
755: 710 711 712 724 | NOP NOP
756: 710 712 713 724, r7 -> p727, r1 -> p729 [p685] | MOV ADD
757: 711 712 713 724, r11 -> p728, r0 -> p730 [p702] | MOV ADD
758: 711 713 714 724, r0 -> p730, r1 -> p729, r0 -> p731 [p730], r49 -> p732 [p726] | SHL SHL
759: 711 722 723 724, r0 -> p731, r6 -> p723, r44 -> p733 [p725], r49 -> p734 [p732] | TEST AND
760: 711 723 724 725, r49 -> p734 | J JMP_IMM
761: 711 714 715 725, r0 -> p731, r0 -> p735 [p731] | NOT NOT
762: 711 722 723 725, r6 -> p723, r0 -> p735, r6 -> p736 [p723], r49 -> p737 [p734] | AND AND
763: 711 719 722 725, r8 -> p719, r0 -> p738 [p735] | MOV LOAD
764: 711 722 723 725, r0 -> p738, r10 -> p724, r0 -> p739 [p738] | LEA LEA
765: 712 723 724 725, r0 -> p739, r0 -> p740 [p739], r49 -> p741 [p737] | SHL SHL_IMM
766: 712 724 725 725, r1 -> p729, r0 -> p740, r2 -> p742 [p686] | LEA LEA
767: 712 725 726 726, r2 -> p742, r44 -> p743 [p733], r49 -> p744 [p741] | CMP SUB_IMM
768: 712 726 727 727, r49 -> p744 | J JMP_IMM
769: 712 725 726 727, r2 -> p742, r44 -> p745 [p743], r49 -> p746 [p744] | CMP SUB_IMM
770: 712 726 727 727, r49 -> p746 | J JMP_IMM
771: 712 725 726 727, r2 -> p742, r44 -> p747 [p745], r49 -> p748 [p746] | CMP SUB_IMM
772: 712 726 727 727, r49 -> p748 | J JMP_IMM
773: 713 725 726 727, r2 -> p742, r44 -> p749 [p747], r49 -> p750 [p748] | CMP SUB_IMM
774: 713 726 727 727, r49 -> p750 | J JMP_IMM
775: 713 725 726 727, r2 -> p742, r0 -> p751 [p740] | LEA LEA
776: 713 726 727 728, r0 -> p751, r44 -> p752 [p749], r49 -> p753 [p750] | CMP SUB_IMM
777: 713 727 728 728, r49 -> p753 | J JMP_IMM
778: 713 725 726 728, r2 -> p742, r44 -> p754 [p752], r49 -> p755 [p753] | CMP SUB_IMM
779: 713 714 715 728, r0 -> p756 [p751] | MOV ADD_IMM
780: 713 726 727 728, r49 -> p755 | J JMP_IMM
781: 731 732 733 733, r3 -> p705, r0 -> p756, r3 -> p757 [p705], r49 -> p758 [p755] | ADD ADD
782: 731 732 733 733, r6 -> p736, r6 -> p736, r44 -> p759 [p754], r49 -> p760 [p758] | TEST AND
783: 731 733 734 734, r49 -> p760 | J JMP_IMM
784: 738 739 740 740, r9 -> p722, r9 -> p761 [p722], r49 -> p762 [p760] | ADD ADD_IMM
785: 738 740 741 741, r9 -> p761, r44 -> p763 [p759], r49 -> p764 [p762] | CMP SUB_IMM
786: 738 741 742 742, r49 -> p764 | J JMP_IMM
787: 746 747 750 750, r9 -> p761, r8 -> p719, r6 -> p765 [p736] | MOV LOAD
788: 746 747 748 750, r9 -> p761, r10 -> p766 [p724] | MOV ADD
789: 746 750 751 751, r6 -> p765, r6 -> p765, r44 -> p767 [p763], r49 -> p768 [p764] | TEST AND
790: 746 751 752 752, r49 -> p768 | J JMP_IMM
791: 756 757 758 758, r9 -> p761, r9 -> p769 [p761], r49 -> p770 [p768] | ADD ADD_IMM
792: 756 758 759 759, r9 -> p769, r44 -> p771 [p767], r49 -> p772 [p770] | CMP SUB_IMM
793: 756 759 760 760, r49 -> p772 | J JMP_IMM
794: 756 757 760 760, r8 -> p719, r8 -> p773 [p719] | MOV LOAD
795: 756 760 761 761, r8 -> p773, r8 -> p773, r44 -> p774 [p771], r49 -> p775 [p772] | TEST AND
796: 756 761 762 762, r49 -> p775 | J JMP_IMM
797: 756 757 758 762, r12 -> p709, r7 -> p776 [p727] | MOV ADD
798: 756 757 758 762, r44 -> p777 [p774] | CALL SAVE_PC
799: 757 758 759 762, r4 -> p718, r4 -> p778 [p718] | CALL SUB_IMM
800: 757 759 760 762, r44 -> p777, r4 -> p778 | CALL STORE
801: 757 758 759 762 | CALL JMP_IMM
802: 757 758 761 762, r7 -> p776, r0 -> p779 [p756] | MOV LOAD
803: 757 761 762 762, r0 -> p779, r0 -> p779, r44 -> p780 [p777], r49 -> p781 [p775] | TEST AND
804: 757 762 763 763, r49 -> p781 | J JMP_IMM
805: 757 758 759 763, r44 -> p782 [p780] | MOV SAVE_PC
806: 757 759 762 763, r44 -> p782, r1 -> p783 [p729] | MOV LOAD
807: 758 759 760 763 | JMP JMP_IMM
808: 758 761 764 764, r0 -> p779, r2 -> p784 [p742] | MOV LOAD
809: 758 762 763 764, r1 -> p783, r0 -> p779 | MOV STORE
810: 758 764 765 765, r2 -> p784, r2 -> p784, r44 -> p785 [p782], r49 -> p786 [p781] | TEST AND
811: 758 765 766 766, r49 -> p786 | J JMP_IMM
812: 758 759 760 766, r44 -> p787 [p785] | MOV SAVE_PC
813: 758 761 762 766, r0 -> p779, r44 -> p787 | MOV STORE
814: 758 759 760 766, r7 -> p776 | MOV STORE
815: 759 760 761 766, r7 -> p776 | MOV STORE
816: 759 760 763 766, r4 -> p778, r44 -> p788 [p787] | RET LOAD
817: 759 760 761 766, r4 -> p778, r4 -> p789 [p778] | RET ADD_IMM
818: 759 763 764 766, r44 -> p788 | RET JMP_REG
819: 759 760 761 767, r5 -> p707, r5 -> p707, r44 -> p790 [p788], r49 -> p791 [p786] | TEST AND
820: 759 761 762 767, r49 -> p791 | J JMP_IMM
821: 766 767 768 768, r4 -> p789, r4 -> p792 [p789], r49 -> p793 [p791] | ADD ADD_IMM
822: 766 767 768 768, r3 -> p757, r0 -> p794 [p779] | MOV ADD
823: 766 768 771 771, r4 -> p792, r3 -> p795 [p757] | POP LOAD
824: 766 768 769 771, r4 -> p792, r4 -> p796 [p792] | POP ADD_IMM
825: 766 769 772 772, r4 -> p796, r5 -> p797 [p707] | POP LOAD
826: 766 769 770 772, r4 -> p796, r4 -> p798 [p796] | POP ADD_IMM
827: 766 770 773 773, r4 -> p798, r12 -> p799 [p709] | POP LOAD
828: 766 770 771 773, r4 -> p798, r4 -> p800 [p798] | POP ADD_IMM
829: 767 771 774 774, r4 -> p800, r44 -> p801 [p790] | RET LOAD
830: 767 771 772 774, r4 -> p800, r4 -> p802 [p800] | RET ADD_IMM
831: 767 774 775 775, r44 -> p801 | RET JMP_REG
832: 767 768 769 775, r15 -> p715, r2 -> p803 [p784] | MOV ADD
833: 767 768 769 775, r0 -> p794, r13 -> p711 | MOV STORE
834: 767 768 769 775, r13 -> p711 | MOV STORE
835: 767 768 769 775, r13 -> p711 | MOV STORE
836: 767 769 772 775, r2 -> p803, r6 -> p804 [p765] | MOV LOAD
837: 768 769 770 775, r13 -> p711 | MOV STORE
838: 768 772 775 775, r4 -> p802, r0 -> p805 [p794] | MOV LOAD
839: 768 769 770 776, r13 -> p711 | MOV STORE
840: 768 769 770 776, r13 -> p711 | MOV STORE
841: 768 772 773 776, r6 -> p804, r13 -> p711 | MOV STORE
842: 768 775 776 776, r0 -> p805, r13 -> p711 | MOV STORE
843: 768 772 775 776, r5 -> p797, r44 -> p806 [p801] | MOVZX LOAD
844: 768 775 776 776, r44 -> p806, r1 -> p807 [p783] | MOVZX ZEXT_WORD_TO_DWORD
845: 769 776 777 777, r1 -> p807, r0 -> p808 [p805] | LEA LEA
846: 769 777 778 778, r0 -> p808, r44 -> p809 [p806], r49 -> p810 [p793] | CMP SUB_IMM
847: 769 778 779 779, r49 -> p810 | J JMP_IMM
848: 783 784 785 785, r1 -> p807, r44 -> p811 [p809], r49 -> p812 [p810] | CMP SUB_IMM
849: 783 785 786 786, r49 -> p812 | J JMP_IMM
850: 783 784 785 786, r1 -> p807, r44 -> p813 [p811], r49 -> p814 [p812] | CMP SUB_IMM
851: 783 785 786 786, r49 -> p814 | J JMP_IMM
852: 783 784 785 786, r1 -> p807, r44 -> p815 [p813], r49 -> p816 [p814] | CMP SUB_IMM
853: 783 784 785 786 | NOP NOP
854: 783 785 786 786, r49 -> p816 | J JMP_IMM
855: 783 784 785 786, r1 -> p807, r44 -> p817 [p815], r49 -> p818 [p816] | CMP SUB_IMM
856: 784 785 786 786 | NOP NOP
857: 784 785 786 787, r49 -> p818 | J JMP_IMM
858: 784 785 786 787, r1 -> p807, r44 -> p819 [p817], r49 -> p820 [p818] | CMP SUB_IMM
859: 784 786 787 787, r49 -> p820 | J JMP_IMM
860: 784 785 786 787, r1 -> p807, r44 -> p821 [p819], r49 -> p822 [p820] | CMP SUB_IMM
861: 784 786 787 787, r49 -> p822 | J JMP_IMM
862: 784 785 788 788, r5 -> p797, r0 -> p823 [p808] | MOV LOAD
863: 784 788 789 789, r0 -> p823, r0 -> p824 [p823], r49 -> p825 [p822] | AND AND_IMM
864: 785 789 790 790, r0 -> p824, r44 -> p826 [p821], r49 -> p827 [p825] | CMP SUB_IMM
865: 785 790 791 791, r49 -> p827 | J JMP_IMM
866: 785 786 787 791, r44 -> p828 [p826] | MOV SAVE_PC
867: 785 787 790 791, r44 -> p828, r8 -> p829 [p773] | MOV LOAD
868: 785 790 791 791, r5 -> p797, r8 -> p829, r44 -> p830 [p828], r49 -> p831 [p827] | CMP SUB
869: 785 791 792 792, r49 -> p831 | J JMP_IMM
870: 785 786 787 792, r44 -> p832 [p830] | MOV SAVE_PC
871: 785 787 790 792, r44 -> p832, r7 -> p833 [p776] | MOV LOAD
872: 786 790 791 792, r5 -> p797, r7 -> p833, r44 -> p834 [p832], r49 -> p835 [p831] | CMP SUB
873: 786 791 792 792, r49 -> p835 | J JMP_IMM
874: 786 787 788 792, r44 -> p836 [p834] | MOV SAVE_PC
875: 786 788 791 792, r44 -> p836, r11 -> p837 [p728] | MOV LOAD
876: 786 791 792 792, r5 -> p797, r11 -> p837, r44 -> p838 [p836], r49 -> p839 [p835] | CMP SUB
877: 786 792 793 793, r49 -> p839 | J JMP_IMM
878: 786 787 788 793, r44 -> p840 [p838] | MOV SAVE_PC
879: 786 788 791 793, r44 -> p840, r9 -> p841 [p769] | MOV LOAD
880: 787 791 792 793, r5 -> p797, r9 -> p841, r44 -> p842 [p840], r49 -> p843 [p839] | CMP SUB
881: 787 792 793 793, r49 -> p843 | J JMP_IMM
882: 787 788 789 793, r44 -> p844 [p842] | MOV SAVE_PC
883: 787 789 792 793, r44 -> p844, r10 -> p845 [p766] | MOV LOAD
884: 787 792 793 793, r5 -> p797, r10 -> p845, r44 -> p846 [p844], r49 -> p847 [p843] | CMP SUB
885: 787 793 794 794, r49 -> p847 | J JMP_IMM
886: 787 788 789 794, r1 -> p807, r44 -> p848 [p846], r49 -> p849 [p847] | CMP SUB_IMM
887: 787 789 790 794, r49 -> p849 | J JMP_IMM
888: 788 789 790 794, r1 -> p807, r44 -> p850 [p848], r49 -> p851 [p849] | CMP SUB_IMM
889: 788 789 790 794, r1 -> p852 [p807] | SET ADD
890: 788 790 791 794, r49 -> p851, r1 -> p853 [p852] | SET ADD_IMM
891: 788 789 790 794 | JMP JMP_IMM
892: 788 789 790 794, r6 -> p804, r6 -> p804, r44 -> p854 [p850], r49 -> p855 [p851] | TEST AND
893: 788 791 792 795, r1 -> p853, r13 -> p711 | MOV STORE
894: 788 790 791 795, r49 -> p855 | J JMP_IMM
895: 788 789 790 795, r13 -> p711, r6 -> p804 | MOV STORE
896: 789 790 791 795, r14 -> p713, r14 -> p713, r44 -> p856 [p854], r49 -> p857 [p855] | TEST AND
897: 789 790 791 795, r2 -> p803, r44 -> p858 [p856] | MOV LEA
898: 789 791 792 795, r13 -> p711, r44 -> p858 | MOV STORE
899: 789 791 792 795, r49 -> p857 | J JMP_IMM
900: 789 790 793 795, r14 -> p713, r12 -> p859 [p799] | MOV LOAD
901: 789 791 794 796, r13 -> p711, r6 -> p860 [p804] | MOV LOAD
902: 789 792 795 796, r13 -> p711, r8 -> p861 [p829] | MOV LOAD
903: 789 793 796 796, r12 -> p859, r0 -> p862 [p824] | MOV LOAD
904: 790 793 796 796, r12 -> p859, r2 -> p863 [p803] | MOV LOAD
905: 790 796 797 797, r0 -> p862, r6 -> p860, r44 -> p864 [p858], r49 -> p865 [p857] | CMP SUB
906: 790 797 798 798, r49 -> p865 | J JMP_IMM
907: 802 803 804 804, r2 -> p863, r8 -> p861, r44 -> p866 [p864], r49 -> p867 [p865] | CMP SUB
908: 802 804 805 805, r49 -> p867 | J JMP_IMM
909: 802 803 804 805, r8 -> p861, r44 -> p868 [p866], r49 -> p869 [p867] | CMP SUB_IMM
910: 802 804 805 805, r49 -> p869 | J JMP_IMM
911: 802 803 804 805, r2 -> p863, r44 -> p870 [p868], r49 -> p871 [p869] | CMP SUB_IMM
912: 802 804 805 805, r49 -> p871 | J JMP_IMM
913: 802 803 804 805, r0 -> p862, r6 -> p860, r44 -> p872 [p870], r49 -> p873 [p871] | CMP SUB
914: 802 803 804 805 | XCHG NOP
915: 803 804 805 805, r49 -> p873 | J JMP_IMM
916: 809 810 811 811, r2 -> p863, r8 -> p861, r44 -> p874 [p872], r49 -> p875 [p873] | CMP SUB
917: 809 810 811 811 | NOP NOP
918: 809 811 812 812, r49 -> p875 | J JMP_IMM
919: 809 810 811 812, r8 -> p861, r0 -> p876 [p862] | MOV ADD
920: 809 811 812 812, r0 -> p876, r2 -> p863, r0 -> p877 [p876], r49 -> p878 [p875] | SUB SUB
921: 809 810 811 812 | NOP NOP
922: 809 810 811 812 | JMP JMP_IMM
923: 809 812 813 813, r0 -> p877, r0 -> p877, r44 -> p879 [p874], r49 -> p880 [p878] | TEST AND
924: 810 813 814 814, r49 -> p880 | J JMP_IMM
925: 810 811 812 814, r8 -> p861, r44 -> p881 [p879], r49 -> p882 [p880] | CMP SUB_IMM
926: 810 812 813 814, r49 -> p882 | J JMP_IMM
927: 810 811 812 814, r6 -> p860, r44 -> p883 [p881], r49 -> p884 [p882] | CMP SUB_IMM
928: 810 812 813 814, r49 -> p884 | J JMP_IMM
929: 810 811 812 814, r12 -> p859, r7 -> p885 [p833] | MOV ADD
930: 810 811 812 814 | JMP JMP_IMM
931: 810 812 815 815, r7 -> p885, r1 -> p886 [p853] | MOV LOAD
932: 811 815 816 816, r1 -> p886, r1 -> p886, r44 -> p887 [p883], r49 -> p888 [p884] | TEST AND
933: 811 816 817 817, r49 -> p888 | J JMP_IMM
934: 811 815 818 818, r1 -> p886, r0 -> p889 [p877] | MOV LOAD
935: 811 815 818 818, r1 -> p886, r2 -> p890 [p863] | MOV LOAD
936: 811 818 819 819, r0 -> p889, r6 -> p860, r44 -> p891 [p887], r49 -> p892 [p888] | CMP SUB
937: 811 819 820 820, r49 -> p892 | J JMP_IMM
938: 824 825 826 826, r8 -> p861, r2 -> p890, r44 -> p893 [p891], r49 -> p894 [p892] | CMP SUB
939: 824 826 827 827, r49 -> p894 | J JMP_IMM
940: 831 832 833 833, r0 -> p889, r6 -> p860, r44 -> p895 [p893], r49 -> p896 [p894] | CMP SUB
941: 831 833 834 834, r49 -> p896 | J JMP_IMM
942: 831 832 833 834, r8 -> p861, r2 -> p890, r44 -> p897 [p895], r49 -> p898 [p896] | CMP SUB
943: 831 832 833 834 | NOP NOP
944: 831 833 834 834, r49 -> p898 | J JMP_IMM
945: 838 839 840 840, r1 -> p886, r13 -> p711 | MOV STORE
946: 838 839 840 840, r13 -> p711, r1 -> p886 | MOV STORE
947: 838 839 840 840, r7 -> p885, r13 -> p711 | MOV STORE
948: 838 839 840 840, r13 -> p711, r7 -> p885 | MOV STORE
949: 838 839 840 840, r12 -> p859, r13 -> p711 | MOV STORE
950: 838 839 842 842, r13 -> p711, r45 -> p899 [p699] | CMP LOAD
951: 838 842 843 843, r45 -> p899, r44 -> p900 [p897], r49 -> p901 [p898] | CMP SUB
952: 838 843 844 844, r49 -> p901 | J JMP_IMM
953: 848 849 852 852, r5 -> p797, r45 -> p902 [p899] | CMP LOAD
954: 848 852 853 853, r45 -> p902, r44 -> p903 [p900], r49 -> p904 [p901] | CMP SUB_IMM
955: 848 853 854 854, r49 -> p904 | J JMP_IMM
956: 848 849 852 854, r5 -> p797, r3 -> p905 [p795] | MOV LOAD
957: 848 849 850 854, r45 -> p906 [p902] | CMP SAVE_PC
958: 848 850 853 854, r45 -> p906, r45 -> p907 [p906] | CMP LOAD
959: 848 853 854 854, r3 -> p905, r45 -> p907, r44 -> p908 [p903], r49 -> p909 [p904] | CMP SUB
960: 848 854 855 855, r49 -> p909 | J JMP_IMM
961: 859 860 861 861, r44 -> p910 [p908] | MOV SAVE_PC
962: 859 861 864 864, r44 -> p910, r2 -> p911 [p890] | MOV LOAD
963: 859 864 865 865, r2 -> p911, r2 -> p911, r44 -> p912 [p910], r49 -> p913 [p909] | TEST AND
964: 859 865 866 866, r49 -> p913 | J JMP_IMM
965: 870 871 874 874, r2 -> p911, r44 -> p914 [p912] | MOVSX LOAD
966: 870 874 875 875, r44 -> p914, r0 -> p915 [p889] | MOVSX SEXT_DWORD_TO_QWORD
967: 870 871 872 875, r44 -> p916 [p914] | MOV SAVE_PC
968: 870 872 875 875, r44 -> p916, r2 -> p917 [p911] | MOV LOAD
969: 870 875 876 876, r0 -> p915, r0 -> p915, r0 -> p918 [p915] | LEA LEA
970: 870 876 877 877, r0 -> p918, r0 -> p919 [p918], r49 -> p920 [p913] | SHL SHL_IMM
971: 870 877 880 880, r2 -> p917, r0 -> p919, r45 -> p921 [p907] | CMP LOAD
972: 870 880 881 881, r45 -> p921, r44 -> p922 [p916], r49 -> p923 [p920] | CMP SUB
973: 871 881 882 882, r49 -> p923 | J JMP_IMM
974: 871 872 875 882, r5 -> p797, r45 -> p924 [p921] | CMP LOAD
975: 871 875 876 882, r45 -> p924, r44 -> p925 [p922], r49 -> p926 [p923] | CMP SUB_IMM
976: 871 876 877 882, r49 -> p926 | J JMP_IMM
977: 881 882 885 885, r5 -> p797, r3 -> p927 [p905] | MOV LOAD
978: 881 882 883 885, r45 -> p928 [p924] | CMP SAVE_PC
979: 881 883 886 886, r45 -> p928, r45 -> p929 [p928] | CMP LOAD
980: 881 886 887 887, r3 -> p927, r45 -> p929, r44 -> p930 [p925], r49 -> p931 [p926] | CMP SUB
981: 881 887 888 888, r49 -> p931 | J JMP_IMM
982: 892 893 894 894, r44 -> p932 [p930] | MOV SAVE_PC
983: 892 894 897 897, r44 -> p932, r2 -> p933 [p917] | MOV LOAD
984: 892 897 898 898, r2 -> p933, r2 -> p933, r44 -> p934 [p932], r49 -> p935 [p931] | TEST AND
985: 892 898 899 899, r49 -> p935 | J JMP_IMM
986: 903 904 907 907, r2 -> p933, r44 -> p936 [p934] | MOVSX LOAD
987: 903 907 908 908, r44 -> p936, r0 -> p937 [p919] | MOVSX SEXT_DWORD_TO_QWORD
988: 903 904 905 908, r44 -> p938 [p936] | MOV SAVE_PC
989: 903 905 908 908, r44 -> p938, r6 -> p939 [p860] | MOV LOAD
990: 903 908 909 909, r0 -> p937, r0 -> p937, r0 -> p940 [p937] | LEA LEA
991: 903 909 910 910, r0 -> p940, r0 -> p941 [p940], r49 -> p942 [p935] | SHL SHL_IMM
992: 903 910 913 913, r6 -> p939, r0 -> p941, r45 -> p943 [p929] | CMP LOAD
993: 903 913 914 914, r45 -> p943, r44 -> p944 [p938], r49 -> p945 [p942] | CMP SUB
994: 904 914 915 915, r49 -> p945 | J JMP_IMM
995: 904 905 908 915, r5 -> p797, r3 -> p946 [p927] | MOV LOAD
996: 904 905 906 915, r45 -> p947 [p943] | CMP SAVE_PC
997: 904 906 909 915, r45 -> p947, r45 -> p948 [p947] | CMP LOAD
998: 904 909 910 915, r3 -> p946, r45 -> p948, r44 -> p949 [p944], r49 -> p950 [p945] | CMP SUB
999: 904 905 908 915, r5 -> p797, r44 -> p951 [p949] | MOVZX LOAD
1000: 904 908 909 915, r44 -> p951, r14 -> p952 [p713] | MOVZX ZEXT_BYTE_TO_DWORD
Processed 1000 trace records.
Micro-ops: 1000
Macro-ops: 754
TotalCycles: 916
uIPC: 1.0917
