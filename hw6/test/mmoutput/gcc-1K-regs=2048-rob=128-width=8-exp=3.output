Processing trace...
1: 0 1 2 2, r13 -> p50 [p13] | SET ADD
2: 0 1 2 2, r49 -> p49, r13 -> p51 [p50] | SET ADD_IMM
3: 0 1 4 4, r5 -> p5, r45 -> p52 [p45] | CMP LOAD
4: 0 4 5 5, r45 -> p52, r3 -> p3, r44 -> p53 [p44], r49 -> p54 [p49] | CMP SUB
5: 0 1 4 5, r5 -> p5, r3 -> p55 [p3] | MOV LOAD
6: 0 1 2 5, r0 -> p56 [p0] | SET ADD
7: 0 5 6 6, r49 -> p54, r0 -> p57 [p56] | SET ADD_IMM
8: 0 1 2 6, r12 -> p58 [p12] | XOR ADD
9: 1 6 7 7, r13 -> p51, r0 -> p57, r13 -> p59 [p51], r49 -> p60 [p54] | OR OR
10: 1 2 3 7 | JMP JMP_IMM
11: 1 4 7 7, r3 -> p55, r0 -> p61 [p57] | MOV LOAD
12: 1 7 8 8, r0 -> p61, r0 -> p61, r44 -> p62 [p53], r49 -> p63 [p60] | TEST AND
13: 1 8 9 9, r49 -> p63 | J JMP_IMM
14: 1 7 10 10, r0 -> p61, r7 -> p64 [p7] | MOV LOAD
15: 1 10 13 13, r7 -> p64, r44 -> p65 [p62] | MOVZX LOAD
16: 1 13 14 14, r44 -> p65, r0 -> p66 [p61] | MOVZX ZEXT_WORD_TO_DWORD
17: 2 14 15 15, r0 -> p66, r44 -> p67 [p65], r49 -> p68 [p63] | CMP SUB_IMM
18: 2 15 16 16, r49 -> p68 | J JMP_IMM
19: 2 3 4 16, r6 -> p69 [p6] | XOR ADD
20: 2 3 4 16, r44 -> p70 [p67] | CALL SAVE_PC
21: 2 3 4 16, r4 -> p4, r4 -> p71 [p4] | CALL SUB_IMM
22: 2 4 5 16, r44 -> p70, r4 -> p71 | CALL STORE
23: 2 3 4 16 | CALL JMP_IMM
24: 2 4 5 16, r15 -> p15, r4 -> p71 | PUSH STORE
25: 3 4 5 16, r4 -> p71, r4 -> p72 [p71] | PUSH SUB_IMM
26: 3 5 6 17, r14 -> p14, r4 -> p72 | PUSH STORE
27: 3 5 6 17, r4 -> p72, r4 -> p73 [p72] | PUSH SUB_IMM
28: 3 7 8 17, r13 -> p59, r4 -> p73 | PUSH STORE
29: 3 6 7 17, r4 -> p73, r4 -> p74 [p73] | PUSH SUB_IMM
30: 3 10 11 17, r7 -> p64, r13 -> p75 [p59] | MOV ADD
31: 3 7 8 17, r12 -> p58, r4 -> p74 | PUSH STORE
32: 3 7 8 17, r4 -> p74, r4 -> p76 [p74] | PUSH SUB_IMM
33: 4 5 6 17, r6 -> p69, r12 -> p77 [p58] | MOV ADD
34: 4 8 9 18, r5 -> p5, r4 -> p76 | PUSH STORE
35: 4 8 9 18, r4 -> p76, r4 -> p78 [p76] | PUSH SUB_IMM
36: 4 9 10 18, r3 -> p55, r4 -> p78 | PUSH STORE
37: 4 9 10 18, r4 -> p78, r4 -> p79 [p78] | PUSH SUB_IMM
38: 4 10 11 18, r4 -> p79, r4 -> p80 [p79], r49 -> p81 [p68] | SUB SUB_IMM
39: 4 10 13 18, r7 -> p64, r44 -> p82 [p70] | MOVZX LOAD
40: 4 13 14 18, r44 -> p82, r0 -> p83 [p66] | MOVZX ZEXT_WORD_TO_DWORD
41: 5 14 15 18, r0 -> p83, r44 -> p84 [p82], r49 -> p85 [p81] | CMP SUB_IMM
42: 5 15 16 19, r49 -> p85 | J JMP_IMM
43: 5 10 13 19, r7 -> p64, r5 -> p86 [p5] | MOV LOAD
44: 5 13 14 19, r5 -> p86, r44 -> p87 [p84], r49 -> p88 [p85] | CMP SUB_IMM
45: 5 14 15 19, r49 -> p88 | J JMP_IMM
46: 5 6 7 19, r45 -> p89 [p52] | CMP SAVE_PC
47: 5 7 10 19, r45 -> p89, r45 -> p90 [p89] | CMP LOAD
48: 5 13 14 19, r5 -> p86, r45 -> p90, r44 -> p91 [p87], r49 -> p92 [p88] | CMP SUB
49: 6 14 15 19, r49 -> p92 | J JMP_IMM
50: 6 7 8 20, r44 -> p93 [p91] | MOV SAVE_PC
51: 6 8 11 20, r44 -> p93, r2 -> p94 [p2] | MOV LOAD
52: 6 11 12 20, r2 -> p94, r2 -> p94, r44 -> p95 [p93], r49 -> p96 [p92] | TEST AND
53: 6 12 13 20, r49 -> p96 | J JMP_IMM
54: 6 11 14 20, r2 -> p94, r12 -> p97 [p77] | MOV LOAD
55: 6 14 15 20, r12 -> p97, r12 -> p98 [p97], r49 -> p99 [p96] | AND AND_IMM
56: 6 7 8 20, r45 -> p100 [p90] | CMP SAVE_PC
57: 7 8 11 20, r45 -> p100, r45 -> p101 [p100] | CMP LOAD
58: 7 13 14 21, r5 -> p86, r45 -> p101, r44 -> p102 [p95], r49 -> p103 [p99] | CMP SUB
59: 7 14 15 21, r49 -> p103 | J JMP_IMM
60: 7 8 9 21, r44 -> p104 [p102] | MOV SAVE_PC
61: 7 9 12 21, r44 -> p104, r2 -> p105 [p94] | MOV LOAD
62: 7 12 13 21, r2 -> p105, r2 -> p105, r44 -> p106 [p104], r49 -> p107 [p103] | TEST AND
63: 7 13 14 21, r49 -> p107 | J JMP_IMM
64: 7 12 15 21, r2 -> p105, r0 -> p108 [p83] | MOV LOAD
65: 8 15 16 21, r5 -> p86, r0 -> p108, r44 -> p109 [p106], r49 -> p110 [p107] | CMP SUB
66: 8 16 17 22, r49 -> p110 | J JMP_IMM
67: 8 9 10 22, r45 -> p111 [p101] | CMP SAVE_PC
68: 8 10 13 22, r45 -> p111, r45 -> p112 [p111] | CMP LOAD
69: 8 13 14 22, r5 -> p86, r45 -> p112, r44 -> p113 [p109], r49 -> p114 [p110] | CMP SUB
70: 8 14 15 22, r49 -> p114 | J JMP_IMM
71: 8 9 10 22, r44 -> p115 [p113] | MOV SAVE_PC
72: 8 10 13 22, r44 -> p115, r2 -> p116 [p105] | MOV LOAD
73: 9 13 14 22, r2 -> p116, r2 -> p116, r44 -> p117 [p115], r49 -> p118 [p114] | TEST AND
74: 9 14 15 23, r49 -> p118 | J JMP_IMM
75: 9 15 18 23, r2 -> p116, r45 -> p119 [p112] | ADD LOAD
76: 9 18 19 23, r45 -> p119, r44 -> p120 [p117], r49 -> p121 [p118] | ADD ADD_IMM
77: 9 19 20 23, r44 -> p120, r2 -> p116 | ADD STORE
78: 9 15 16 23, r5 -> p86, r44 -> p122 [p120], r49 -> p123 [p121] | CMP SUB_IMM
79: 9 15 16 23, r12 -> p98, r12 -> p124 [p98] | MOV ADD
80: 9 16 17 23, r49 -> p123 | J JMP_IMM
81: 10 11 14 23, r13 -> p75, r45 -> p125 [p119] | CMP LOAD
82: 10 15 16 24, r45 -> p125, r44 -> p126 [p122], r49 -> p127 [p123] | CMP SUB_IMM
83: 10 11 14 24, r13 -> p75, r44 -> p128 [p126] | MOVZX LOAD
84: 10 15 16 24, r44 -> p128, r5 -> p129 [p86] | MOVZX ZEXT_BYTE_TO_DWORD
85: 10 16 17 24, r49 -> p127 | J JMP_IMM
86: 10 16 19 24, r12 -> p124, r3 -> p130 [p55] | MOV LOAD
87: 10 11 14 24, r13 -> p75, r2 -> p131 [p116] | MOV LOAD
88: 10 19 20 24, r3 -> p130, r3 -> p130, r44 -> p132 [p128], r49 -> p133 [p127] | TEST AND
89: 11 20 21 24, r49 -> p133 | J JMP_IMM
90: 11 19 22 25, r3 -> p130, r0 -> p134 [p108] | MOV LOAD
91: 11 22 25 25, r0 -> p134, r45 -> p135 [p125] | CMP LOAD
92: 11 25 26 26, r45 -> p135, r44 -> p136 [p132], r49 -> p137 [p133] | CMP SUB_IMM
93: 11 26 27 27, r49 -> p137 | J JMP_IMM
94: 11 19 22 27, r3 -> p130, r3 -> p138 [p130] | MOV LOAD
95: 11 22 23 27, r3 -> p138, r3 -> p138, r44 -> p139 [p136], r49 -> p140 [p137] | TEST AND
96: 11 23 24 27, r49 -> p140 | J JMP_IMM
97: 12 16 17 27, r4 -> p80, r4 -> p141 [p80], r49 -> p142 [p140] | ADD ADD_IMM
98: 12 17 20 27, r4 -> p141, r3 -> p143 [p138] | POP LOAD
99: 12 17 18 27, r4 -> p141, r4 -> p144 [p141] | POP ADD_IMM
100: 12 18 21 27, r4 -> p144, r5 -> p145 [p129] | POP LOAD
101: 12 18 19 28, r4 -> p144, r4 -> p146 [p144] | POP ADD_IMM
102: 12 19 22 28, r4 -> p146, r12 -> p147 [p124] | POP LOAD
103: 12 19 20 28, r4 -> p146, r4 -> p148 [p146] | POP ADD_IMM
104: 12 20 23 28, r4 -> p148, r13 -> p149 [p75] | POP LOAD
105: 13 20 21 28, r4 -> p148, r4 -> p150 [p148] | POP ADD_IMM
106: 13 21 24 28, r4 -> p150, r14 -> p151 [p14] | POP LOAD
107: 13 21 22 28, r4 -> p150, r4 -> p152 [p150] | POP ADD_IMM
108: 13 22 25 28, r4 -> p152, r15 -> p153 [p15] | POP LOAD
109: 13 22 23 29, r4 -> p152, r4 -> p154 [p152] | POP ADD_IMM
110: 13 23 26 29, r4 -> p154, r44 -> p155 [p139] | RET LOAD
111: 13 23 24 29, r4 -> p154, r4 -> p156 [p154] | RET ADD_IMM
112: 13 26 27 29, r44 -> p155 | RET JMP_REG
113: 14 16 17 29 | JMP JMP_IMM
114: 14 22 23 29, r12 -> p147, r12 -> p157 [p147], r49 -> p158 [p142] | ADD ADD_IMM
115: 14 20 21 29, r3 -> p143, r3 -> p159 [p143], r49 -> p160 [p158] | ADD ADD_IMM
116: 14 21 24 29, r5 -> p145, r45 -> p161 [p135] | CMP LOAD
117: 14 24 25 30, r12 -> p157, r45 -> p161, r44 -> p162 [p155], r49 -> p163 [p160] | CMP SUB
118: 14 25 26 30, r49 -> p163 | J JMP_IMM
119: 14 21 24 30, r5 -> p145, r0 -> p164 [p134] | MOV LOAD
120: 14 24 27 30, r0 -> p164, r45 -> p165 [p161] | CMP LOAD
121: 15 27 28 30, r45 -> p165, r44 -> p166 [p162], r49 -> p167 [p163] | CMP SUB_IMM
122: 15 28 29 30, r49 -> p167 | J JMP_IMM
123: 15 24 27 30, r0 -> p164, r0 -> p168 [p164] | MOV LOAD
124: 15 27 30 30, r0 -> p168, r0 -> p169 [p168] | MOV LOAD
125: 15 30 31 31, r0 -> p169, r0 -> p170 [p169], r49 -> p171 [p167] | AND AND_IMM
126: 15 31 32 32, r0 -> p170, r44 -> p172 [p166], r49 -> p173 [p171] | CMP SUB_IMM
127: 15 32 33 33, r49 -> p173 | J JMP_IMM
128: 15 21 24 33, r5 -> p145, r11 -> p174 [p11] | MOV LOAD
129: 16 24 25 33, r11 -> p174, r11 -> p174, r44 -> p175 [p172], r49 -> p176 [p173] | TEST AND
130: 16 25 26 33, r49 -> p176 | J JMP_IMM
131: 16 21 24 33, r5 -> p145, r1 -> p177 [p1] | MOV LOAD
132: 16 21 22 33, r5 -> p145 | MOV STORE
133: 16 24 25 33, r1 -> p177, r5 -> p145 | MOV STORE
134: 16 17 18 33 | JMP JMP_IMM
135: 16 25 28 34, r5 -> p145, r3 -> p178 [p159] | MOV LOAD
136: 16 28 31 34, r3 -> p178, r0 -> p179 [p170] | MOV LOAD
137: 17 31 32 34, r0 -> p179, r0 -> p179, r44 -> p180 [p175], r49 -> p181 [p176] | TEST AND
138: 17 32 33 34, r49 -> p181 | J JMP_IMM
139: 17 31 34 34, r0 -> p179, r7 -> p182 [p64] | MOV LOAD
140: 17 34 37 37, r7 -> p182, r45 -> p183 [p165] | CMP LOAD
141: 17 37 38 38, r45 -> p183, r44 -> p184 [p180], r49 -> p185 [p181] | CMP SUB_IMM
142: 17 38 39 39, r49 -> p185 | J JMP_IMM
143: 17 34 37 39, r7 -> p182, r1 -> p186 [p177] | MOV LOAD
144: 17 37 38 39, r1 -> p186, r44 -> p187 [p184], r49 -> p188 [p185] | CMP SUB_IMM
145: 18 38 39 39, r49 -> p188 | J JMP_IMM
146: 18 19 20 39, r0 -> p189 [p179] | MOV ADD_IMM
147: 18 19 20 39 | JMP JMP_IMM
148: 18 37 38 39, r0 -> p189, r1 -> p186, r0 -> p190 [p189], r49 -> p191 [p188] | ADD ADD
149: 18 38 39 39, r1 -> p186, r0 -> p190, r44 -> p192 [p187], r49 -> p193 [p191] | CMP SUB
150: 18 39 40 40, r49 -> p193 | J JMP_IMM
151: 18 37 38 40, r1 -> p186, r13 -> p194 [p149] | MOV ADD
152: 18 20 21 40, r45 -> p195 [p183] | CMP SAVE_PC
153: 19 21 24 40, r45 -> p195, r45 -> p196 [p195] | CMP LOAD
154: 19 38 39 40, r45 -> p196, r13 -> p194, r44 -> p197 [p192], r49 -> p198 [p193] | CMP SUB
155: 19 38 39 40, r0 -> p190, r5 -> p145 | MOV STORE
156: 19 39 40 40, r49 -> p198 | J JMP_IMM
157: 19 20 21 40, r44 -> p199 [p197] | MOV SAVE_PC
158: 19 22 25 41, r44 -> p199, r2 -> p200 [p131] | MOV LOAD
159: 19 25 26 41, r2 -> p200, r2 -> p200, r44 -> p201 [p199], r49 -> p202 [p198] | TEST AND
160: 19 26 27 41, r49 -> p202 | J JMP_IMM
161: 20 25 28 41, r2 -> p200, r10 -> p203 [p10] | MOV LOAD
162: 20 28 29 41, r10 -> p203, r10 -> p203, r44 -> p204 [p201], r49 -> p205 [p202] | TEST AND
163: 20 29 30 41, r49 -> p205 | J JMP_IMM
164: 20 38 39 41, r13 -> p194, r13 -> p206 [p194], r49 -> p207 [p205] | ADD ADD_IMM
165: 20 39 42 42, r5 -> p145, r45 -> p208 [p196] | CMP LOAD
166: 20 42 43 43, r45 -> p208, r13 -> p206, r44 -> p209 [p204], r49 -> p210 [p207] | CMP SUB
167: 20 43 44 44, r49 -> p210 | J JMP_IMM
168: 20 22 25 44, r5 -> p145, r45 -> p211 [p208] | ADD LOAD
169: 21 25 26 44, r45 -> p211, r44 -> p212 [p209], r49 -> p213 [p210] | ADD ADD_IMM
170: 21 26 27 44, r44 -> p212, r5 -> p145 | ADD STORE
171: 21 25 28 44, r5 -> p145, r45 -> p214 [p211] | ADD LOAD
172: 21 28 29 44, r45 -> p214, r44 -> p215 [p212], r49 -> p216 [p213] | ADD ADD_IMM
173: 21 29 30 44, r44 -> p215, r5 -> p145 | ADD STORE
174: 21 22 25 44, r5 -> p145, r0 -> p217 [p190] | MOV LOAD
175: 21 27 30 45, r5 -> p145, r45 -> p218 [p214] | CMP LOAD
176: 21 30 31 45, r45 -> p218, r0 -> p217, r44 -> p219 [p215], r49 -> p220 [p216] | CMP SUB
177: 22 31 32 45, r49 -> p220 | J JMP_IMM
178: 22 23 26 45, r5 -> p145, r1 -> p221 [p186] | MOV LOAD
179: 22 23 24 45, r6 -> p222 [p69] | XOR ADD
180: 22 23 24 45 | XCHG NOP
181: 22 23 24 45 | JMP JMP_IMM
182: 22 26 29 45, r1 -> p221, r45 -> p223 [p218] | CMP LOAD
183: 22 29 30 46, r45 -> p223, r44 -> p224 [p219], r49 -> p225 [p220] | CMP SUB
184: 22 30 31 46, r49 -> p225 | J JMP_IMM
185: 23 26 29 46, r1 -> p221, r0 -> p226 [p217] | MOV LOAD
186: 23 29 30 46, r0 -> p226, r0 -> p226, r44 -> p227 [p224], r49 -> p228 [p225] | TEST AND
187: 23 30 31 46, r49 -> p228 | J JMP_IMM
188: 23 29 32 46, r0 -> p226, r45 -> p229 [p223] | CMP LOAD
189: 23 32 33 46, r45 -> p229, r44 -> p230 [p227], r49 -> p231 [p228] | CMP SUB
190: 23 33 34 46, r49 -> p231 | J JMP_IMM
191: 23 24 25 47, r6 -> p222, r6 -> p232 [p222], r49 -> p233 [p231] | ADD ADD_IMM
192: 23 26 27 47, r1 -> p221, r1 -> p234 [p221], r49 -> p235 [p233] | ADD ADD_IMM
193: 24 26 29 47, r5 -> p145, r45 -> p236 [p229] | CMP LOAD
194: 24 29 30 47, r6 -> p232, r45 -> p236, r44 -> p237 [p230], r49 -> p238 [p235] | CMP SUB
195: 24 30 31 47, r49 -> p238 | J JMP_IMM
196: 24 27 30 47, r5 -> p145, r1 -> p239 [p234] | MOV LOAD
197: 24 27 28 47, r5 -> p145 | MOV STORE
198: 24 30 31 47, r1 -> p239, r5 -> p145 | MOV STORE
199: 24 27 28 48 | JMP JMP_IMM
200: 24 31 34 48, r5 -> p145, r2 -> p240 [p200] | MOV LOAD
201: 25 34 37 48, r2 -> p240, r0 -> p241 [p226] | MOV LOAD
202: 25 37 38 48, r0 -> p241, r0 -> p241, r44 -> p242 [p237], r49 -> p243 [p238] | TEST AND
203: 25 38 39 48, r49 -> p243 | J JMP_IMM
204: 25 27 28 48, r44 -> p244 [p242] | MOV SAVE_PC
205: 25 28 31 48, r44 -> p244, r9 -> p245 [p9] | MOV LOAD
206: 25 37 40 48, r0 -> p241, r12 -> p246 [p157] | MOV LOAD
207: 25 34 37 49, r2 -> p240, r14 -> p247 [p151] | MOV LOAD
208: 25 31 32 49, r9 -> p245, r9 -> p245, r44 -> p248 [p244], r49 -> p249 [p243] | TEST AND
209: 26 32 33 49, r49 -> p249 | J JMP_IMM
210: 26 40 43 49, r12 -> p246, r44 -> p250 [p248] | MOVZX LOAD
211: 26 43 44 49, r44 -> p250, r2 -> p251 [p240] | MOVZX ZEXT_BYTE_TO_DWORD
212: 26 44 45 49, r2 -> p251, r44 -> p252 [p250], r49 -> p253 [p249] | CMP SUB_IMM
213: 26 45 46 49, r49 -> p253 | J JMP_IMM
214: 26 27 30 49, r5 -> p145, r45 -> p254 [p236] | CMP LOAD
215: 26 30 31 50, r45 -> p254, r44 -> p255 [p252], r49 -> p256 [p253] | CMP SUB
216: 26 31 32 50, r49 -> p256 | J JMP_IMM
217: 27 31 34 50, r5 -> p145, r1 -> p257 [p239] | MOV LOAD
218: 27 34 37 50, r1 -> p257, r6 -> p258 [p232] | MOV LOAD
219: 27 37 38 50, r6 -> p258, r6 -> p258, r44 -> p259 [p255], r49 -> p260 [p256] | TEST AND
220: 27 28 29 50 | NOP NOP
221: 27 38 39 50, r49 -> p260 | J JMP_IMM
222: 27 40 43 50, r12 -> p246, r44 -> p261 [p259] | MOVZX LOAD
223: 27 43 44 51, r44 -> p261, r0 -> p262 [p241] | MOVZX ZEXT_WORD_TO_DWORD
224: 27 44 45 51, r0 -> p262, r44 -> p263 [p261], r49 -> p264 [p260] | CMP SUB_IMM
225: 28 45 46 51, r49 -> p264 | J JMP_IMM
226: 28 44 45 51, r0 -> p262, r44 -> p265 [p263], r49 -> p266 [p264] | CMP SUB_IMM
227: 28 45 46 51, r49 -> p266 | J JMP_IMM
228: 28 44 45 51, r0 -> p262, r44 -> p267 [p265], r49 -> p268 [p266] | CMP SUB_IMM
229: 28 45 46 51, r49 -> p268 | J JMP_IMM
230: 28 29 30 51, r2 -> p269 [p251] | MOV ADD_IMM
231: 28 40 41 52, r12 -> p246, r7 -> p270 [p182] | MOV ADD
232: 28 29 30 52, r44 -> p271 [p267] | CALL SAVE_PC
233: 29 30 31 52, r4 -> p156, r4 -> p272 [p156] | CALL SUB_IMM
234: 29 32 33 52, r44 -> p271, r4 -> p272 | CALL STORE
235: 29 32 33 52 | CALL JMP_IMM
236: 29 37 38 52, r14 -> p247, r4 -> p272 | PUSH STORE
237: 29 32 33 52, r4 -> p272, r4 -> p273 [p272] | PUSH SUB_IMM
238: 29 32 33 52, r2 -> p269, r14 -> p274 [p247] | MOV ADD
239: 29 39 40 53, r13 -> p206, r4 -> p273 | PUSH STORE
240: 29 33 34 53, r4 -> p273, r4 -> p275 [p273] | PUSH SUB_IMM
241: 30 39 40 53, r6 -> p258, r13 -> p276 [p206] | MOV ADD
242: 30 40 41 53, r12 -> p246, r4 -> p275 | PUSH STORE
243: 30 34 35 53, r4 -> p275, r4 -> p277 [p275] | PUSH SUB_IMM
244: 30 35 36 53, r5 -> p145, r4 -> p277 | PUSH STORE
245: 30 35 36 53, r4 -> p277, r4 -> p278 [p277] | PUSH SUB_IMM
246: 30 41 42 53, r7 -> p270, r5 -> p279 [p145] | MOV ADD
247: 30 36 37 54, r3 -> p178, r4 -> p278 | PUSH STORE
248: 30 36 37 54, r4 -> p278, r4 -> p280 [p278] | PUSH SUB_IMM
249: 31 41 44 54, r7 -> p270, r44 -> p281 [p271] | MOVZX LOAD
250: 31 44 45 54, r44 -> p281, r0 -> p282 [p262] | MOVZX ZEXT_WORD_TO_DWORD
251: 31 45 46 54, r0 -> p282, r44 -> p283 [p281], r49 -> p284 [p268] | CMP SUB_IMM
252: 31 46 47 54, r49 -> p284 | J JMP_IMM
253: 31 41 44 54, r7 -> p270, r3 -> p285 [p178] | MOV LOAD
254: 32 33 34 54, r45 -> p286 [p254] | CMP SAVE_PC
255: 33 34 37 55, r45 -> p286, r45 -> p287 [p286] | CMP LOAD
256: 33 44 45 55, r3 -> p285, r45 -> p287, r44 -> p288 [p283], r49 -> p289 [p284] | CMP SUB
257: 33 45 46 55, r49 -> p289 | J JMP_IMM
258: 33 34 35 55, r44 -> p290 [p288] | MOV SAVE_PC
259: 33 35 38 55, r44 -> p290, r2 -> p291 [p269] | MOV LOAD
260: 33 39 40 55, r2 -> p291, r2 -> p291, r44 -> p292 [p290], r49 -> p293 [p289] | TEST AND
261: 33 40 41 55, r49 -> p293 | J JMP_IMM
262: 33 39 42 55, r2 -> p291, r45 -> p294 [p287] | CMP LOAD
263: 34 44 45 56, r45 -> p294, r3 -> p285, r44 -> p295 [p292], r49 -> p296 [p293] | CMP SUB
264: 34 45 46 56, r49 -> p296 | J JMP_IMM
265: 34 40 41 56, r13 -> p276, r13 -> p276, r44 -> p297 [p295], r49 -> p298 [p296] | TEST AND
266: 34 41 42 56, r49 -> p298 | J JMP_IMM
267: 34 40 43 56, r13 -> p276, r1 -> p299 [p257] | MOV LOAD
268: 37 43 44 56, r1 -> p299, r1 -> p299, r44 -> p300 [p297], r49 -> p301 [p298] | TEST AND
269: 38 44 45 56, r49 -> p301 | J JMP_IMM
270: 39 43 46 56, r1 -> p299, r2 -> p302 [p291] | MOV LOAD
271: 39 46 49 57, r2 -> p302, r45 -> p303 [p294] | CMP LOAD
272: 39 49 50 57, r45 -> p303, r44 -> p304 [p300], r49 -> p305 [p301] | CMP SUB_IMM
273: 39 50 51 57, r49 -> p305 | J JMP_IMM
274: 39 43 46 57, r1 -> p299, r1 -> p306 [p299] | MOV LOAD
275: 39 46 47 57, r1 -> p306, r1 -> p306, r44 -> p307 [p304], r49 -> p308 [p305] | TEST AND
276: 39 47 48 57, r49 -> p308 | J JMP_IMM
277: 39 46 49 57, r1 -> p306, r2 -> p309 [p302] | MOV LOAD
278: 40 49 52 57, r2 -> p309, r45 -> p310 [p303] | CMP LOAD
279: 40 52 53 58, r45 -> p310, r44 -> p311 [p307], r49 -> p312 [p308] | CMP SUB_IMM
280: 40 53 54 58, r49 -> p312 | J JMP_IMM
281: 40 49 52 58, r2 -> p309, r44 -> p313 [p311] | MOVZX LOAD
282: 40 52 53 58, r44 -> p313, r0 -> p314 [p282] | MOVZX ZEXT_BYTE_TO_DWORD
283: 40 42 45 58, r5 -> p279, r45 -> p315 [p310] | CMP LOAD
284: 40 53 54 58, r0 -> p314, r45 -> p315, r44 -> p316 [p313], r49 -> p317 [p312] | CMP SUB
285: 40 54 55 58, r49 -> p317 | J JMP_IMM
286: 41 49 52 58, r2 -> p309, r5 -> p318 [p279] | MOV LOAD
287: 41 42 43 59, r45 -> p319 [p315] | CMP SAVE_PC
288: 41 43 46 59, r45 -> p319, r45 -> p320 [p319] | CMP LOAD
289: 41 52 53 59, r5 -> p318, r45 -> p320, r44 -> p321 [p316], r49 -> p322 [p317] | CMP SUB
290: 41 53 54 59, r49 -> p322 | J JMP_IMM
291: 41 52 53 59, r5 -> p318, r0 -> p323 [p314] | MOV ADD
292: 41 53 54 59, r0 -> p323, r0 -> p324 [p323], r49 -> p325 [p322] | SHR SHR_IMM
293: 42 54 55 59, r0 -> p324, r5 -> p318, r0 -> p326 [p324], r49 -> p327 [p325] | XOR XOR
294: 43 55 56 59, r0 -> p326, r0 -> p328 [p326], r49 -> p329 [p327] | AND AND_IMM
295: 44 56 57 60, r0 -> p328, r0 -> p330 [p328], r49 -> p331 [p329] | SHL SHL_IMM
296: 44 57 60 60, r0 -> p330, r2 -> p332 [p309] | MOV LOAD
297: 44 57 58 60, r0 -> p330, r12 -> p333 [p246] | LEA LEA
298: 44 60 61 61, r2 -> p332, r2 -> p332, r44 -> p334 [p321], r49 -> p335 [p331] | TEST AND
299: 44 61 62 62, r49 -> p335 | J JMP_IMM
300: 44 60 63 63, r2 -> p332, r45 -> p336 [p320] | CMP LOAD
301: 44 63 64 64, r45 -> p336, r5 -> p318, r44 -> p337 [p334], r49 -> p338 [p335] | CMP SUB
302: 44 64 65 65, r49 -> p338 | J JMP_IMM
303: 45 46 47 65 | JMP JMP_IMM
304: 45 60 63 65, r2 -> p332, r12 -> p339 [p333] | MOV LOAD
305: 45 46 47 65, r44 -> p340 [p337] | MOV SAVE_PC
306: 45 52 53 65, r5 -> p318, r44 -> p340 | MOV STORE
307: 45 46 47 65, r44 -> p341 [p340] | MOV SAVE_PC
308: 45 60 61 65, r2 -> p332, r44 -> p341 | MOV STORE
309: 45 63 64 65, r12 -> p339, r0 -> p342 [p330] | MOVSX SEXT_DWORD_TO_QWORD
310: 45 64 65 66, r0 -> p342, r0 -> p342, r14 -> p343 [p274] | LEA LEA
311: 46 65 66 66, r14 -> p343, r14 -> p344 [p343], r49 -> p345 [p338] | SHL SHL_IMM
312: 46 66 67 67, r14 -> p344, r13 -> p346 [p276] | MOV ADD
313: 46 47 48 67, r44 -> p347 [p341] | ADD SAVE_PC
314: 46 48 51 67, r44 -> p347, r44 -> p348 [p347] | ADD LOAD
315: 46 67 68 68, r13 -> p346, r44 -> p348, r13 -> p349 [p346], r49 -> p350 [p345] | ADD ADD
316: 46 60 63 68, r2 -> p332, r45 -> p351 [p336] | CMP LOAD
317: 46 63 64 68, r45 -> p351, r5 -> p318, r44 -> p352 [p348], r49 -> p353 [p350] | CMP SUB
318: 46 64 65 68, r49 -> p353 | J JMP_IMM
319: 47 48 49 68, r45 -> p354 [p351] | CMP SAVE_PC
320: 47 53 56 68, r45 -> p354, r45 -> p355 [p354] | CMP LOAD
321: 47 56 57 68, r3 -> p285, r45 -> p355, r44 -> p356 [p352], r49 -> p357 [p353] | CMP SUB
322: 47 57 58 68, r49 -> p357 | J JMP_IMM
323: 47 48 49 69, r3 -> p285, r0 -> p358 [p342] | MOV ADD
324: 47 49 50 69, r0 -> p358, r0 -> p359 [p358], r49 -> p360 [p357] | SHR SHR_IMM
325: 47 50 51 69, r0 -> p359, r3 -> p285, r0 -> p361 [p359], r49 -> p362 [p360] | XOR XOR
326: 47 51 52 69, r0 -> p361, r0 -> p363 [p361], r49 -> p364 [p362] | AND AND_IMM
327: 48 52 53 69, r0 -> p363, r0 -> p365 [p363], r49 -> p366 [p364] | SHL SHL_IMM
328: 48 53 56 69, r0 -> p365, r2 -> p367 [p332] | MOV LOAD
329: 48 53 54 69, r0 -> p365, r5 -> p368 [p318] | LEA LEA
330: 48 56 57 69, r2 -> p367, r2 -> p367, r44 -> p369 [p356], r49 -> p370 [p366] | TEST AND
331: 48 57 58 70, r49 -> p370 | J JMP_IMM
332: 48 56 59 70, r2 -> p367, r45 -> p371 [p355] | CMP LOAD
333: 48 59 60 70, r3 -> p285, r45 -> p371, r44 -> p372 [p369], r49 -> p373 [p370] | CMP SUB
334: 48 60 61 70, r49 -> p373 | J JMP_IMM
335: 49 50 51 70, r44 -> p374 [p372] | MOV SAVE_PC
336: 49 51 52 70, r3 -> p285, r44 -> p374 | MOV STORE
337: 49 50 51 70, r44 -> p375 [p374] | MOV SAVE_PC
338: 49 56 57 70, r2 -> p367, r44 -> p375 | MOV STORE
339: 49 63 64 71, r12 -> p339, r2 -> p367 | MOV STORE
340: 49 68 71 71, r13 -> p349, r2 -> p376 [p367] | MOV LOAD
341: 49 68 71 71, r13 -> p349, r7 -> p377 [p270] | MOV LOAD
342: 49 71 72 72, r2 -> p376, r44 -> p378 [p375], r49 -> p379 [p373] | CMP SUB_IMM
343: 50 72 73 73, r49 -> p379 | J JMP_IMM
344: 50 51 52 73, r3 -> p285, r44 -> p380 [p378], r49 -> p381 [p379] | CMP SUB_IMM
345: 50 52 53 73, r49 -> p381 | J JMP_IMM
346: 50 71 72 73, r2 -> p376, r44 -> p382 [p380], r49 -> p383 [p381] | CMP SUB_IMM
347: 50 71 72 73, r2 -> p376, r1 -> p384 [p306] | MOV ADD
348: 50 51 52 73, r3 -> p285, r8 -> p385 [p8] | MOV ADD
349: 50 72 73 73, r49 -> p383 | J JMP_IMM
350: 50 51 52 73, r44 -> p386 [p382] | MOV SAVE_PC
351: 51 52 55 74, r44 -> p386, r10 -> p387 [p203] | MOV LOAD
352: 51 53 54 74, r44 -> p388 [p386] | MOV SAVE_PC
353: 51 54 57 74, r44 -> p388, r6 -> p389 [p258] | MOV LOAD
354: 51 55 58 74, r8 -> p385, r10 -> p387, r1 -> p390 [p384] | MOV LOAD
355: 51 58 61 74, r1 -> p390, r44 -> p391 [p388] | MOVSX LOAD
356: 51 61 62 74, r44 -> p391, r0 -> p392 [p365] | MOVSX SEXT_DWORD_TO_QWORD
357: 51 62 65 74, r0 -> p392, r6 -> p389, r9 -> p393 [p245] | MOV LOAD
358: 51 54 55 74, r45 -> p394 [p371] | CMP SAVE_PC
359: 52 55 58 75, r45 -> p394, r45 -> p395 [p394] | CMP LOAD
360: 52 65 66 75, r9 -> p393, r45 -> p395, r44 -> p396 [p391], r49 -> p397 [p383] | CMP SUB
361: 52 66 67 75, r49 -> p397 | J JMP_IMM
362: 52 58 61 75, r1 -> p390, r44 -> p398 [p396] | MOVSX LOAD
363: 52 61 62 75, r44 -> p398, r0 -> p399 [p392] | MOVSX SEXT_DWORD_TO_QWORD
364: 52 62 65 75, r0 -> p399, r6 -> p389, r0 -> p400 [p399] | MOV LOAD
365: 52 54 55 75, r45 -> p401 [p395] | CMP SAVE_PC
366: 52 55 58 75, r45 -> p401, r45 -> p402 [p401] | CMP LOAD
367: 53 65 66 76, r0 -> p400, r45 -> p402, r44 -> p403 [p398], r49 -> p404 [p397] | CMP SUB
368: 53 66 67 76, r49 -> p404 | J JMP_IMM
369: 53 71 72 76, r7 -> p377, r44 -> p405 [p403], r49 -> p406 [p404] | CMP SUB_IMM
370: 53 72 73 76, r49 -> p406 | J JMP_IMM
371: 53 54 55 76, r44 -> p407 [p405] | MOV SAVE_PC
372: 53 55 58 76, r44 -> p407, r6 -> p408 [p389] | MOV LOAD
373: 53 71 72 76, r7 -> p377, r0 -> p409 [p400] | MOV ADD
374: 53 72 73 76, r0 -> p409, r0 -> p410 [p409], r49 -> p411 [p406] | SHL SHL_IMM
375: 54 55 56 77 | JMP JMP_IMM
376: 54 73 74 77, r0 -> p410, r6 -> p408, r2 -> p412 [p376] | LEA LEA
377: 54 58 59 77, r8 -> p385, r6 -> p408, r1 -> p413 [p390] | LEA LEA
378: 54 74 77 77, r2 -> p412, r0 -> p414 [p410] | MOV LOAD
379: 54 77 78 78, r0 -> p414, r1 -> p413 | MOV STORE
380: 54 74 77 78, r2 -> p412, r0 -> p415 [p414] | MOV LOAD
381: 54 77 78 78, r0 -> p415, r0 -> p415, r44 -> p416 [p407], r49 -> p417 [p411] | TEST AND
382: 54 78 79 79, r49 -> p417 | J JMP_IMM
383: 55 56 57 79, r44 -> p418 [p416] | MOV SAVE_PC
384: 55 57 60 79, r44 -> p418, r0 -> p419 [p415] | MOV LOAD
385: 55 66 67 79, r14 -> p344, r0 -> p419, r44 -> p420 [p418] | MOV LEA
386: 55 67 68 79, r3 -> p285, r44 -> p420 | MOV STORE
387: 55 56 57 79 | JMP JMP_IMM
388: 55 56 57 79, r0 -> p421 [p419] | MOV ADD_IMM
389: 55 74 75 79, r3 -> p285, r2 -> p412 | MOV STORE
390: 55 71 72 80, r7 -> p377, r1 -> p413 | MOV STORE
391: 56 57 58 80 | JMP JMP_IMM
392: 56 57 60 80, r4 -> p280, r3 -> p422 [p285] | POP LOAD
393: 56 57 58 80, r4 -> p280, r4 -> p423 [p280] | POP ADD_IMM
394: 56 58 61 80, r4 -> p423, r5 -> p424 [p368] | POP LOAD
395: 56 58 59 80, r4 -> p423, r4 -> p425 [p423] | POP ADD_IMM
396: 56 59 62 80, r4 -> p425, r12 -> p426 [p339] | POP LOAD
397: 56 59 60 80, r4 -> p425, r4 -> p427 [p425] | POP ADD_IMM
398: 56 60 63 81, r4 -> p427, r13 -> p428 [p349] | POP LOAD
399: 57 60 61 81, r4 -> p427, r4 -> p429 [p427] | POP ADD_IMM
400: 57 61 64 81, r4 -> p429, r14 -> p430 [p344] | POP LOAD
401: 57 61 62 81, r4 -> p429, r4 -> p431 [p429] | POP ADD_IMM
402: 57 62 65 81, r4 -> p431, r44 -> p432 [p420] | RET LOAD
403: 57 62 63 81, r4 -> p431, r4 -> p433 [p431] | RET ADD_IMM
404: 57 65 66 81, r44 -> p432 | RET JMP_REG
405: 57 58 59 81, r0 -> p421, r0 -> p421, r44 -> p434 [p432], r49 -> p435 [p417] | TEST AND
406: 57 59 60 82, r49 -> p435 | J JMP_IMM
407: 58 62 63 82, r12 -> p426, r7 -> p436 [p377] | MOV ADD
408: 58 59 60 82, r44 -> p437 [p434] | CALL SAVE_PC
409: 58 63 64 82, r4 -> p433, r4 -> p438 [p433] | CALL SUB_IMM
410: 58 64 65 82, r44 -> p437, r4 -> p438 | CALL STORE
411: 58 59 60 82 | CALL JMP_IMM
412: 58 64 65 82, r15 -> p153, r4 -> p438 | PUSH STORE
413: 58 64 65 82, r4 -> p438, r4 -> p439 [p438] | PUSH SUB_IMM
414: 58 63 64 83, r7 -> p436, r15 -> p440 [p153] | MOV ADD
415: 59 65 66 83, r14 -> p430, r4 -> p439 | PUSH STORE
416: 59 65 66 83, r4 -> p439, r4 -> p441 [p439] | PUSH SUB_IMM
417: 59 66 67 83, r13 -> p428, r4 -> p441 | PUSH STORE
418: 59 66 67 83, r4 -> p441, r4 -> p442 [p441] | PUSH SUB_IMM
419: 59 67 68 83, r12 -> p426, r4 -> p442 | PUSH STORE
420: 59 67 68 83, r4 -> p442, r4 -> p443 [p442] | PUSH SUB_IMM
421: 59 68 69 83, r5 -> p424, r4 -> p443 | PUSH STORE
422: 59 68 69 84, r4 -> p443, r4 -> p444 [p443] | PUSH SUB_IMM
423: 60 69 70 84, r3 -> p422, r4 -> p444 | PUSH STORE
424: 60 69 70 84, r4 -> p444, r4 -> p445 [p444] | PUSH SUB_IMM
425: 60 70 71 84, r4 -> p445, r4 -> p446 [p445], r49 -> p447 [p435] | SUB SUB_IMM
426: 61 63 66 84, r7 -> p436, r45 -> p448 [p402] | CMP LOAD
427: 62 66 67 84, r45 -> p448, r44 -> p449 [p437], r49 -> p450 [p447] | CMP SUB_IMM
428: 63 67 68 84, r49 -> p450 | J JMP_IMM
429: 64 65 68 84, r15 -> p440, r45 -> p451 [p448] | CMP LOAD
430: 65 68 69 85, r45 -> p451, r44 -> p452 [p449], r49 -> p453 [p450] | CMP SUB_IMM
431: 65 69 70 85, r49 -> p453 | J JMP_IMM
432: 65 66 69 85, r15 -> p440, r3 -> p454 [p422] | MOV LOAD
433: 65 67 68 85, r45 -> p455 [p451] | CMP SAVE_PC
434: 65 68 71 85, r45 -> p455, r45 -> p456 [p455] | CMP LOAD
435: 65 71 72 85, r3 -> p454, r45 -> p456, r44 -> p457 [p452], r49 -> p458 [p453] | CMP SUB
436: 65 72 73 85, r49 -> p458 | J JMP_IMM
437: 65 67 68 85, r44 -> p459 [p457] | MOV SAVE_PC
438: 66 68 71 86, r44 -> p459, r2 -> p460 [p412] | MOV LOAD
439: 66 71 72 86, r2 -> p460, r2 -> p460, r44 -> p461 [p459], r49 -> p462 [p458] | TEST AND
440: 67 72 73 86, r49 -> p462 | J JMP_IMM
441: 67 72 75 86, r2 -> p460, r5 -> p463 [p424] | MOV LOAD
442: 67 75 76 86, r5 -> p463, r5 -> p463, r44 -> p464 [p461], r49 -> p465 [p462] | TEST AND
443: 68 76 77 86, r49 -> p465 | J JMP_IMM
444: 68 72 73 86, r4 -> p446, r4 -> p466 [p446], r49 -> p467 [p465] | ADD ADD_IMM
445: 68 73 76 86, r4 -> p466, r3 -> p468 [p454] | POP LOAD
446: 68 73 74 87, r4 -> p466, r4 -> p469 [p466] | POP ADD_IMM
447: 68 74 77 87, r4 -> p469, r5 -> p470 [p463] | POP LOAD
448: 68 74 75 87, r4 -> p469, r4 -> p471 [p469] | POP ADD_IMM
449: 68 75 78 87, r4 -> p471, r12 -> p472 [p426] | POP LOAD
450: 68 75 76 87, r4 -> p471, r4 -> p473 [p471] | POP ADD_IMM
451: 69 76 79 87, r4 -> p473, r13 -> p474 [p428] | POP LOAD
452: 69 76 77 87, r4 -> p473, r4 -> p475 [p473] | POP ADD_IMM
453: 69 77 80 87, r4 -> p475, r14 -> p476 [p430] | POP LOAD
454: 69 77 78 88, r4 -> p475, r4 -> p477 [p475] | POP ADD_IMM
455: 69 78 81 88, r4 -> p477, r15 -> p478 [p440] | POP LOAD
456: 69 78 79 88, r4 -> p477, r4 -> p479 [p477] | POP ADD_IMM
457: 69 79 82 88, r4 -> p479, r44 -> p480 [p464] | RET LOAD
458: 69 79 80 88, r4 -> p479, r4 -> p481 [p479] | RET ADD_IMM
459: 70 82 83 88, r44 -> p480 | RET JMP_REG
460: 70 78 81 88, r12 -> p472, r45 -> p482 [p456] | CMP LOAD
461: 70 81 82 88, r45 -> p482, r44 -> p483 [p480], r49 -> p484 [p467] | CMP SUB_IMM
462: 70 82 83 89, r49 -> p484 | J JMP_IMM
463: 70 78 81 89, r12 -> p472, r3 -> p485 [p468] | MOV LOAD
464: 70 81 82 89, r3 -> p485, r44 -> p486 [p483], r49 -> p487 [p484] | CMP SUB_IMM
465: 70 82 83 89, r49 -> p487 | J JMP_IMM
466: 70 73 74 89, r45 -> p488 [p482] | CMP SAVE_PC
467: 71 74 77 89, r45 -> p488, r45 -> p489 [p488] | CMP LOAD
468: 71 81 82 89, r3 -> p485, r45 -> p489, r44 -> p490 [p486], r49 -> p491 [p487] | CMP SUB
469: 71 82 83 89, r49 -> p491 | J JMP_IMM
470: 72 73 74 90, r44 -> p492 [p490] | MOV SAVE_PC
471: 73 74 77 90, r44 -> p492, r2 -> p493 [p460] | MOV LOAD
472: 73 77 78 90, r2 -> p493, r2 -> p493, r44 -> p494 [p492], r49 -> p495 [p491] | TEST AND
473: 73 78 79 90, r49 -> p495 | J JMP_IMM
474: 73 77 80 90, r2 -> p493, r0 -> p496 [p421] | MOV LOAD
475: 73 80 81 90, r0 -> p496, r0 -> p497 [p496], r49 -> p498 [p495] | AND AND_IMM
476: 73 77 80 90, r5 -> p470, r2 -> p499 [p493] | MOV LOAD
477: 73 81 82 90, r0 -> p497, r2 -> p499 | MOV STORE
478: 73 74 75 91 | JMP JMP_IMM
479: 74 80 83 91, r14 -> p476, r45 -> p500 [p489] | CMP LOAD
480: 74 83 84 91, r45 -> p500, r44 -> p501 [p494], r49 -> p502 [p498] | CMP SUB_IMM
481: 74 84 85 91, r49 -> p502 | J JMP_IMM
482: 74 77 80 91, r5 -> p470, r0 -> p503 [p497] | MOV LOAD
483: 74 78 81 91, r12 -> p472, r44 -> p504 [p501] | MOVZX LOAD
484: 74 81 82 91, r44 -> p504, r1 -> p505 [p413] | MOVZX ZEXT_BYTE_TO_DWORD
485: 74 78 79 91, r12 -> p472, r7 -> p506 [p436] | MOV ADD
486: 74 82 85 92, r0 -> p503, r2 -> p507 [p499] | MOV LOAD
487: 75 80 83 92, r0 -> p503, r6 -> p508 [p408] | MOV LOAD
488: 75 76 77 92, r44 -> p509 [p504] | CALL SAVE_PC
489: 75 80 81 92, r4 -> p481, r4 -> p510 [p481] | CALL SUB_IMM
490: 75 81 82 92, r44 -> p509, r4 -> p510 | CALL STORE
491: 75 76 77 92 | CALL JMP_IMM
492: 75 81 82 92, r15 -> p478, r4 -> p510 | PUSH STORE
493: 75 81 82 92, r4 -> p510, r4 -> p511 [p510] | PUSH SUB_IMM
494: 75 85 86 93, r2 -> p507, r15 -> p512 [p478] | MOV ADD
495: 76 82 83 93, r14 -> p476, r4 -> p511 | PUSH STORE
496: 76 82 83 93, r4 -> p511, r4 -> p513 [p511] | PUSH SUB_IMM
497: 76 83 84 93, r6 -> p508, r14 -> p514 [p476] | MOV ADD
498: 76 83 84 93, r13 -> p474, r4 -> p513 | PUSH STORE
499: 76 83 84 93, r4 -> p513, r4 -> p515 [p513] | PUSH SUB_IMM
500: 76 84 85 93, r12 -> p472, r4 -> p515 | PUSH STORE
501: 76 84 85 93, r4 -> p515, r4 -> p516 [p515] | PUSH SUB_IMM
502: 76 85 86 94, r5 -> p470, r4 -> p516 | PUSH STORE
503: 77 85 86 94, r4 -> p516, r4 -> p517 [p516] | PUSH SUB_IMM
504: 77 79 80 94, r7 -> p506, r5 -> p518 [p470] | MOV ADD
505: 77 86 87 94, r3 -> p485, r4 -> p517 | PUSH STORE
506: 77 86 87 94, r4 -> p517, r4 -> p519 [p517] | PUSH SUB_IMM
507: 78 87 88 94, r4 -> p519, r4 -> p520 [p519], r49 -> p521 [p502] | SUB SUB_IMM
508: 78 79 82 94, r7 -> p506, r45 -> p522 [p500] | CMP LOAD
509: 78 82 83 94, r45 -> p522, r44 -> p523 [p509], r49 -> p524 [p521] | CMP SUB_IMM
510: 79 88 89 95, r1 -> p505, r4 -> p520 | MOV STORE
511: 79 83 84 95, r49 -> p524 | J JMP_IMM
512: 79 80 83 95, r7 -> p506, r3 -> p525 [p485] | MOV LOAD
513: 79 80 81 95, r45 -> p526 [p522] | CMP SAVE_PC
514: 79 83 86 95, r45 -> p526, r45 -> p527 [p526] | CMP LOAD
515: 79 86 87 95, r3 -> p525, r45 -> p527, r44 -> p528 [p523], r49 -> p529 [p524] | CMP SUB
516: 79 87 88 95, r49 -> p529 | J JMP_IMM
517: 79 80 81 95, r44 -> p530 [p528] | MOV SAVE_PC
518: 80 83 86 96, r44 -> p530, r2 -> p531 [p507] | MOV LOAD
519: 80 86 87 96, r2 -> p531, r2 -> p531, r44 -> p532 [p530], r49 -> p533 [p529] | TEST AND
520: 80 87 88 96, r49 -> p533 | J JMP_IMM
521: 80 86 89 96, r2 -> p531, r45 -> p534 [p527] | CMP LOAD
522: 80 89 90 96, r45 -> p534, r3 -> p525, r44 -> p535 [p532], r49 -> p536 [p533] | CMP SUB
523: 80 90 91 96, r49 -> p536 | J JMP_IMM
524: 80 83 86 96, r5 -> p518, r45 -> p537 [p534] | CMP LOAD
525: 80 86 87 96, r45 -> p537, r44 -> p538 [p535], r49 -> p539 [p536] | CMP SUB_IMM
526: 81 87 88 97, r49 -> p539 | J JMP_IMM
527: 81 84 85 97, r3 -> p525, r44 -> p540 [p538], r49 -> p541 [p539] | CMP SUB_IMM
528: 81 85 86 97, r49 -> p541 | J JMP_IMM
529: 81 84 85 97, r44 -> p542 [p540] | MOV SAVE_PC
530: 81 85 88 97, r44 -> p542, r13 -> p543 [p474] | MOV LOAD
531: 81 88 89 97, r13 -> p543, r13 -> p543, r44 -> p544 [p542], r49 -> p545 [p541] | TEST AND
532: 81 89 90 97, r49 -> p545 | J JMP_IMM
533: 81 88 91 97, r13 -> p543, r0 -> p546 [p503] | MOV LOAD
534: 82 84 85 98, r44 -> p547 [p544] | MOV SAVE_PC
535: 82 91 92 98, r0 -> p546, r44 -> p547 | MOV STORE
536: 82 88 89 98, r5 -> p518, r13 -> p543 | MOV STORE
537: 82 88 89 98, r13 -> p543 | MOV STORE
538: 82 84 87 98, r5 -> p518, r44 -> p548 [p547] | MOVZX LOAD
539: 82 87 88 98, r44 -> p548, r0 -> p549 [p546] | MOVZX ZEXT_WORD_TO_DWORD
540: 82 88 89 98, r0 -> p549, r44 -> p550 [p548], r49 -> p551 [p545] | CMP SUB_IMM
541: 82 89 90 98, r49 -> p551 | J JMP_IMM
542: 83 84 85 99, r0 -> p552 [p549] | XOR ADD
543: 83 85 86 99 | JMP JMP_IMM
544: 83 88 89 99, r0 -> p552, r13 -> p543 | MOV STORE
545: 83 85 86 99, r5 -> p518, r7 -> p553 [p506] | MOV ADD
546: 83 85 86 99, r44 -> p554 [p550] | CALL SAVE_PC
547: 83 88 89 99, r4 -> p520, r4 -> p555 [p520] | CALL SUB_IMM
548: 83 89 90 99, r44 -> p554, r4 -> p555 | CALL STORE
549: 83 86 87 99 | CALL JMP_IMM
550: 84 89 90 100, r12 -> p472, r4 -> p555 | PUSH STORE
551: 84 89 90 100, r4 -> p555, r4 -> p556 [p555] | PUSH SUB_IMM
552: 84 90 91 100, r5 -> p518, r4 -> p556 | PUSH STORE
553: 84 90 91 100, r4 -> p556, r4 -> p557 [p556] | PUSH SUB_IMM
554: 84 86 87 100, r5 -> p558 [p518] | XOR ADD
555: 84 91 92 100, r3 -> p525, r4 -> p557 | PUSH STORE
556: 84 91 92 100, r4 -> p557, r4 -> p559 [p557] | PUSH SUB_IMM
557: 84 87 88 100, r3 -> p560 [p525] | XOR ADD
558: 85 92 93 101, r4 -> p559, r4 -> p561 [p559], r49 -> p562 [p551] | SUB SUB_IMM
559: 85 93 94 101, r4 -> p561, r12 -> p563 [p472] | LEA LEA
560: 85 93 94 101, r7 -> p553, r4 -> p561 | MOV STORE
561: 85 94 95 101, r12 -> p563, r7 -> p564 [p553] | MOV ADD
562: 85 87 88 101, r44 -> p565 [p554] | CALL SAVE_PC
563: 85 93 94 101, r4 -> p561, r4 -> p566 [p561] | CALL SUB_IMM
564: 85 94 95 101, r44 -> p565, r4 -> p566 | CALL STORE
565: 85 87 88 101 | CALL JMP_IMM
566: 86 95 96 102, r7 -> p564, r0 -> p567 [p552] | MOV ADD
567: 86 95 96 102, r7 -> p564 | MOV STORE
568: 86 95 96 102, r7 -> p564 | MOV STORE
569: 86 95 98 102, r4 -> p566, r44 -> p568 [p565] | RET LOAD
570: 86 94 95 102, r4 -> p566, r4 -> p569 [p566] | RET ADD_IMM
571: 86 98 99 102, r44 -> p568 | RET JMP_REG
572: 86 95 96 102, r4 -> p569, r7 -> p570 [p564] | LEA LEA
573: 86 94 95 102, r12 -> p563, r2 -> p571 [p531] | MOV ADD
574: 87 89 90 103, r6 -> p572 [p508] | MOV ADD_IMM
575: 87 89 90 103, r44 -> p573 [p568] | CALL SAVE_PC
576: 87 95 96 103, r4 -> p569, r4 -> p574 [p569] | CALL SUB_IMM
577: 87 96 97 103, r44 -> p573, r4 -> p574 | CALL STORE
578: 87 90 91 103 | CALL JMP_IMM
579: 87 96 97 103, r15 -> p512, r4 -> p574 | PUSH STORE
580: 87 96 97 103, r4 -> p574, r4 -> p575 [p574] | PUSH SUB_IMM
581: 87 90 91 103, r6 -> p572, r15 -> p576 [p512] | MOV ADD
582: 88 95 96 104, r2 -> p571, r6 -> p577 [p572] | MOV ADD
583: 88 97 98 104, r14 -> p514, r4 -> p575 | PUSH STORE
584: 88 97 98 104, r4 -> p575, r4 -> p578 [p575] | PUSH SUB_IMM
585: 88 95 96 104, r2 -> p571, r14 -> p579 [p514] | MOV ADD
586: 88 98 99 104, r13 -> p543, r4 -> p578 | PUSH STORE
587: 88 98 99 104, r4 -> p578, r4 -> p580 [p578] | PUSH SUB_IMM
588: 88 99 100 104, r12 -> p563, r4 -> p580 | PUSH STORE
589: 88 99 100 104, r4 -> p580, r4 -> p581 [p580] | PUSH SUB_IMM
590: 89 100 101 105, r5 -> p558, r4 -> p581 | PUSH STORE
591: 89 100 101 105, r4 -> p581, r4 -> p582 [p581] | PUSH SUB_IMM
592: 89 101 102 105, r3 -> p560, r4 -> p582 | PUSH STORE
593: 89 101 102 105, r4 -> p582, r4 -> p583 [p582] | PUSH SUB_IMM
594: 89 102 103 105, r4 -> p583, r4 -> p584 [p583], r49 -> p585 [p562] | SUB SUB_IMM
595: 89 103 104 105, r7 -> p570, r4 -> p584 | MOV STORE
596: 89 90 91 105, r44 -> p586 [p573] | CALL SAVE_PC
597: 89 103 104 105, r4 -> p584, r4 -> p587 [p584] | CALL SUB_IMM
598: 90 104 105 106, r44 -> p586, r4 -> p587 | CALL STORE
599: 90 91 92 106, r15 -> p576 | CALL JMP_REG
600: 90 104 105 106, r4 -> p587, r4 -> p588 [p587], r49 -> p589 [p585] | SUB SUB_IMM
601: 90 96 99 106, r7 -> p570, r0 -> p590 [p567] | MOV LOAD
602: 90 96 97 106, r6 -> p577, r2 -> p591 [p571] | MOV ADD
603: 90 99 100 106, r0 -> p590, r0 -> p590, r44 -> p592 [p586], r49 -> p593 [p589] | TEST AND
604: 90 100 101 106, r49 -> p593 | J JMP_IMM
605: 90 99 102 106, r0 -> p590, r45 -> p594 [p537] | CMP LOAD
606: 91 102 103 107, r45 -> p594, r44 -> p595 [p592], r49 -> p596 [p593] | CMP SUB_IMM
607: 91 103 104 107, r49 -> p596 | J JMP_IMM
608: 91 99 102 107, r0 -> p590, r6 -> p597 [p577] | MOV LOAD
609: 91 97 98 107, r2 -> p591, r7 -> p598 [p570] | MOV ADD
610: 91 92 93 107, r44 -> p599 [p595] | CALL SAVE_PC
611: 91 105 106 107, r4 -> p588, r4 -> p600 [p588] | CALL SUB_IMM
612: 91 106 107 107, r44 -> p599, r4 -> p600 | CALL STORE
613: 91 92 93 107 | CALL JMP_IMM
614: 92 106 107 108, r12 -> p563, r4 -> p600 | PUSH STORE
615: 92 106 107 108, r4 -> p600, r4 -> p601 [p600] | PUSH SUB_IMM
616: 92 102 103 108, r6 -> p597, r12 -> p602 [p563] | MOV ADD
617: 92 103 104 108, r12 -> p602, r12 -> p603 [p602], r49 -> p604 [p596] | SHR SHR_IMM
618: 92 107 108 108, r5 -> p558, r4 -> p601 | PUSH STORE
619: 92 107 108 108, r4 -> p601, r4 -> p605 [p601] | PUSH SUB_IMM
620: 92 98 99 108, r7 -> p598, r5 -> p606 [p558] | MOV ADD
621: 92 108 109 109, r3 -> p560, r4 -> p605 | PUSH STORE
622: 93 108 109 109, r4 -> p605, r4 -> p607 [p605] | PUSH SUB_IMM
623: 93 98 101 109, r7 -> p598, r7 -> p608 [p598] | MOV LOAD
624: 93 102 103 109, r6 -> p597, r3 -> p609 [p560] | MOV ADD
625: 93 101 102 109, r7 -> p608, r7 -> p608, r44 -> p610 [p599], r49 -> p611 [p604] | TEST AND
626: 93 102 103 109, r49 -> p611 | J JMP_IMM
627: 93 94 95 109, r44 -> p612 [p610] | MOV SAVE_PC
628: 93 96 99 109, r44 -> p612, r6 -> p613 [p597] | MOV LOAD
629: 93 99 100 110, r6 -> p613, r6 -> p613, r44 -> p614 [p612], r49 -> p615 [p611] | TEST AND
630: 94 100 101 110, r49 -> p615 | J JMP_IMM
631: 94 99 102 110, r6 -> p613, r0 -> p616 [p590] | MOV LOAD
632: 94 96 97 110, r44 -> p617 [p614] | MOV SAVE_PC
633: 94 102 103 110, r0 -> p616, r44 -> p617 | MOV STORE
634: 94 103 104 110, r3 -> p609, r2 -> p618 [p591] | MOV ADD
635: 94 103 104 110, r3 -> p609, r3 -> p619 [p609], r49 -> p620 [p615] | AND AND_IMM
636: 94 96 97 110, r0 -> p621 [p616] | MOV ADD_IMM
637: 94 104 105 111, r2 -> p618, r2 -> p622 [p618], r49 -> p623 [p620] | SHR SHR_IMM
638: 95 104 105 111, r3 -> p619, r1 -> p624 [p505] | MOV ADD
639: 95 99 100 111, r6 -> p613 | MOV STORE
640: 95 100 101 111, r6 -> p613 | MOV STORE
641: 95 105 106 111, r2 -> p622, r2 -> p625 [p622], r49 -> p626 [p623] | AND AND_IMM
642: 95 105 106 111, r0 -> p621, r1 -> p624, r0 -> p627 [p621], r49 -> p628 [p626] | SHL SHL
643: 95 100 103 111, r5 -> p606, r45 -> p629 [p594] | CMP LOAD
644: 95 103 104 111, r45 -> p629, r44 -> p630 [p617], r49 -> p631 [p628] | CMP SUB
645: 95 104 105 112, r12 -> p603, r6 -> p613 | MOV STORE
646: 96 106 107 112, r2 -> p625, r6 -> p613, r44 -> p632 [p630] | MOV LEA
647: 96 107 108 112, r0 -> p627, r44 -> p632 | MOV STORE
648: 96 104 105 112, r49 -> p631 | J JMP_IMM
649: 96 100 101 112, r6 -> p613 | MOV STORE
650: 96 100 101 112, r6 -> p613 | MOV STORE
651: 96 101 102 112, r6 -> p613, r5 -> p606 | MOV STORE
652: 96 97 98 112 | JMP JMP_IMM
653: 96 101 102 113, r6 -> p613, r5 -> p606 | MOV STORE
654: 97 104 105 113, r12 -> p603, r5 -> p606 | MOV STORE
655: 97 109 112 113, r4 -> p607, r3 -> p633 [p619] | POP LOAD
656: 97 109 110 113, r4 -> p607, r4 -> p634 [p607] | POP ADD_IMM
657: 97 110 113 113, r4 -> p634, r5 -> p635 [p606] | POP LOAD
658: 97 110 111 113, r4 -> p634, r4 -> p636 [p634] | POP ADD_IMM
659: 97 111 114 114, r4 -> p636, r12 -> p637 [p603] | POP LOAD
660: 97 111 112 114, r4 -> p636, r4 -> p638 [p636] | POP ADD_IMM
661: 97 112 115 115, r4 -> p638, r44 -> p639 [p632] | RET LOAD
662: 98 112 113 115, r4 -> p638, r4 -> p640 [p638] | RET ADD_IMM
663: 98 115 116 116, r44 -> p639 | RET JMP_REG
664: 98 101 102 116, r0 -> p641 [p627] | XOR ADD
665: 98 113 114 116, r4 -> p640, r4 -> p642 [p640], r49 -> p643 [p631] | ADD ADD_IMM
666: 98 114 117 117, r4 -> p642, r44 -> p644 [p639] | RET LOAD
667: 98 114 115 117, r4 -> p642, r4 -> p645 [p642] | RET ADD_IMM
668: 98 117 118 118, r44 -> p644 | RET JMP_REG
669: 98 115 116 118, r0 -> p641, r4 -> p645 | MOV STORE
670: 99 102 103 118, r0 -> p641, r0 -> p646 [p641], r49 -> p647 [p643] | ADD ADD_IMM
671: 99 103 104 118, r49 -> p647 | J JMP_IMM
672: 99 116 119 119, r4 -> p645, r11 -> p648 [p174] | MOV LOAD
673: 99 119 120 120, r11 -> p648, r11 -> p648, r44 -> p649 [p644], r49 -> p650 [p647] | TEST AND
674: 99 120 121 121, r49 -> p650 | J JMP_IMM
675: 99 115 118 121, r4 -> p645, r2 -> p651 [p625] | MOV LOAD
676: 99 118 121 121, r2 -> p651, r0 -> p652 [p646] | MOV LOAD
677: 99 121 122 122, r0 -> p652, r0 -> p652, r44 -> p653 [p649], r49 -> p654 [p650] | TEST AND
678: 100 122 123 123, r49 -> p654 | J JMP_IMM
679: 100 121 124 124, r0 -> p652, r44 -> p655 [p653] | MOVZX LOAD
680: 100 124 125 125, r44 -> p655, r0 -> p656 [p652] | MOVZX ZEXT_WORD_TO_DWORD
681: 100 125 128 128, r0 -> p656, r1 -> p657 [p624] | MOV LOAD
682: 100 125 128 128, r0 -> p656, r44 -> p658 [p655] | MOVZX LOAD
683: 100 128 129 129, r44 -> p658, r0 -> p659 [p656] | MOVZX ZEXT_BYTE_TO_DWORD
684: 100 128 129 129, r1 -> p657, r4 -> p645 | MOV STORE
685: 100 129 130 130, r0 -> p659, r0 -> p659, r44 -> p660 [p658], r49 -> p661 [p654] | TEST AND
686: 101 130 131 131, r49 -> p661 | J JMP_IMM
687: 101 129 130 131, r0 -> p659, r0 -> p662 [p659], r49 -> p663 [p661] | SUB SUB_IMM
688: 101 115 116 131, r4 -> p645 | MOV STORE
689: 101 130 131 131, r0 -> p662, r0 -> p664 [p662], r49 -> p665 [p663] | ADD ADD_IMM
690: 101 131 132 132, r0 -> p664, r4 -> p645 | MOV STORE
691: 101 116 119 132, r4 -> p645, r3 -> p666 [p633] | MOV LOAD
692: 101 129 132 132, r4 -> p645, r1 -> p667 [p657] | MOV LOAD
693: 101 116 119 132, r4 -> p645, r2 -> p668 [p651] | MOV LOAD
694: 102 132 135 135, r1 -> p667, r3 -> p666, r44 -> p669 [p660] | MOVZX LOAD
695: 102 135 136 136, r44 -> p669, r0 -> p670 [p664] | MOVZX ZEXT_BYTE_TO_DWORD
696: 102 136 137 137, r0 -> p670, r44 -> p671 [p669], r49 -> p672 [p665] | CMP SUB_IMM
697: 102 137 138 138, r49 -> p672 | J JMP_IMM
698: 102 136 137 138, r0 -> p670, r44 -> p673 [p671], r49 -> p674 [p672] | CMP SUB_IMM
699: 102 137 138 138, r49 -> p674 | J JMP_IMM
700: 102 136 137 138, r0 -> p670, r44 -> p675 [p673], r49 -> p676 [p674] | CMP SUB_IMM
701: 102 137 138 138, r49 -> p676 | J JMP_IMM
702: 103 116 119 138, r4 -> p645, r45 -> p677 [p629] | ADD LOAD
703: 103 119 120 138, r45 -> p677, r44 -> p678 [p675], r49 -> p679 [p676] | ADD ADD_IMM
704: 103 120 121 138, r44 -> p678, r4 -> p645 | ADD STORE
705: 103 132 135 139, r4 -> p645, r0 -> p680 [p670] | MOV LOAD
706: 103 121 124 139, r4 -> p645, r45 -> p681 [p677] | CMP LOAD
707: 103 135 136 139, r45 -> p681, r0 -> p680, r44 -> p682 [p678], r49 -> p683 [p679] | CMP SUB
708: 103 136 137 139, r49 -> p683 | J JMP_IMM
709: 103 121 124 139, r4 -> p645, r3 -> p684 [p666] | MOV LOAD
710: 104 129 132 139, r4 -> p645, r1 -> p685 [p667] | MOV LOAD
711: 104 121 124 139, r4 -> p645, r2 -> p686 [p668] | MOV LOAD
712: 104 132 135 139, r1 -> p685, r3 -> p684, r44 -> p687 [p682] | MOVZX LOAD
713: 104 135 136 140, r44 -> p687, r0 -> p688 [p680] | MOVZX ZEXT_BYTE_TO_DWORD
714: 104 136 137 140, r0 -> p688, r44 -> p689 [p687], r49 -> p690 [p683] | CMP SUB_IMM
715: 104 137 138 140, r49 -> p690 | J JMP_IMM
716: 104 136 137 140, r0 -> p688, r44 -> p691 [p689], r49 -> p692 [p690] | CMP SUB_IMM
717: 104 137 138 140, r49 -> p692 | J JMP_IMM
718: 105 136 137 140, r0 -> p688, r44 -> p693 [p691], r49 -> p694 [p692] | CMP SUB_IMM
719: 105 137 138 140, r49 -> p694 | J JMP_IMM
720: 105 121 124 140, r4 -> p645, r45 -> p695 [p681] | ADD LOAD
721: 105 124 125 141, r45 -> p695, r44 -> p696 [p693], r49 -> p697 [p694] | ADD ADD_IMM
722: 105 125 126 141, r44 -> p696, r4 -> p645 | ADD STORE
723: 105 132 135 141, r4 -> p645, r0 -> p698 [p688] | MOV LOAD
724: 105 126 129 141, r4 -> p645, r45 -> p699 [p695] | CMP LOAD
725: 105 135 136 141, r45 -> p699, r0 -> p698, r44 -> p700 [p696], r49 -> p701 [p697] | CMP SUB
726: 106 136 137 141, r49 -> p701 | J JMP_IMM
727: 106 107 108 141 | NOP NOP
728: 106 116 119 141, r4 -> p645, r0 -> p702 [p698] | MOV LOAD
729: 106 115 116 142, r4 -> p645, r4 -> p703 [p645], r49 -> p704 [p701] | ADD ADD_IMM
730: 106 116 119 142, r4 -> p703, r3 -> p705 [p684] | POP LOAD
731: 106 116 117 142, r4 -> p703, r4 -> p706 [p703] | POP ADD_IMM
732: 106 117 120 142, r4 -> p706, r5 -> p707 [p635] | POP LOAD
733: 106 117 118 142, r4 -> p706, r4 -> p708 [p706] | POP ADD_IMM
734: 107 118 121 142, r4 -> p708, r12 -> p709 [p637] | POP LOAD
735: 107 118 119 142, r4 -> p708, r4 -> p710 [p708] | POP ADD_IMM
736: 107 119 122 142, r4 -> p710, r13 -> p711 [p543] | POP LOAD
737: 107 119 120 143, r4 -> p710, r4 -> p712 [p710] | POP ADD_IMM
738: 107 120 123 143, r4 -> p712, r14 -> p713 [p579] | POP LOAD
739: 107 120 121 143, r4 -> p712, r4 -> p714 [p712] | POP ADD_IMM
740: 107 121 124 143, r4 -> p714, r15 -> p715 [p576] | POP LOAD
741: 107 121 122 143, r4 -> p714, r4 -> p716 [p714] | POP ADD_IMM
742: 108 122 125 143, r4 -> p716, r44 -> p717 [p700] | RET LOAD
743: 108 122 123 143, r4 -> p716, r4 -> p718 [p716] | RET ADD_IMM
744: 108 125 126 143, r44 -> p717 | RET JMP_REG
745: 108 123 126 144, r4 -> p718, r8 -> p719 [p385] | MOV LOAD
746: 108 126 127 144, r8 -> p719, r8 -> p719, r44 -> p720 [p717], r49 -> p721 [p704] | TEST AND
747: 108 127 128 144, r49 -> p721 | J JMP_IMM
748: 108 109 110 144, r9 -> p722 [p393] | XOR ADD
749: 109 126 129 144, r9 -> p722, r8 -> p719, r6 -> p723 [p613] | MOV LOAD
750: 109 110 111 144, r9 -> p722, r10 -> p724 [p387] | MOV ADD
751: 109 129 130 144, r6 -> p723, r6 -> p723, r44 -> p725 [p720], r49 -> p726 [p721] | TEST AND
752: 109 130 131 144, r49 -> p726 | J JMP_IMM
753: 109 110 111 145, r7 -> p727 [p608] | XOR ADD
754: 109 110 111 145, r11 -> p728 [p648] | MOV ADD_IMM
755: 109 110 111 145 | NOP NOP
756: 109 111 112 145, r7 -> p727, r1 -> p729 [p685] | MOV ADD
757: 110 111 112 145, r11 -> p728, r0 -> p730 [p702] | MOV ADD
758: 110 112 113 145, r0 -> p730, r1 -> p729, r0 -> p731 [p730], r49 -> p732 [p726] | SHL SHL
759: 110 129 130 145, r0 -> p731, r6 -> p723, r44 -> p733 [p725], r49 -> p734 [p732] | TEST AND
760: 110 130 131 145, r49 -> p734 | J JMP_IMM
761: 110 113 114 146, r0 -> p731, r0 -> p735 [p731] | NOT NOT
762: 110 129 130 146, r6 -> p723, r0 -> p735, r6 -> p736 [p723], r49 -> p737 [p734] | AND AND
763: 110 126 129 146, r8 -> p719, r0 -> p738 [p735] | MOV LOAD
764: 110 129 130 146, r0 -> p738, r10 -> p724, r0 -> p739 [p738] | LEA LEA
765: 111 130 131 146, r0 -> p739, r0 -> p740 [p739], r49 -> p741 [p737] | SHL SHL_IMM
766: 111 131 132 146, r1 -> p729, r0 -> p740, r2 -> p742 [p686] | LEA LEA
767: 111 132 133 146, r2 -> p742, r44 -> p743 [p733], r49 -> p744 [p741] | CMP SUB_IMM
768: 111 133 134 146, r49 -> p744 | J JMP_IMM
769: 111 132 133 147, r2 -> p742, r44 -> p745 [p743], r49 -> p746 [p744] | CMP SUB_IMM
770: 111 133 134 147, r49 -> p746 | J JMP_IMM
771: 111 132 133 147, r2 -> p742, r44 -> p747 [p745], r49 -> p748 [p746] | CMP SUB_IMM
772: 111 133 134 147, r49 -> p748 | J JMP_IMM
773: 112 132 133 147, r2 -> p742, r44 -> p749 [p747], r49 -> p750 [p748] | CMP SUB_IMM
774: 112 133 134 147, r49 -> p750 | J JMP_IMM
775: 112 133 134 147, r2 -> p742, r0 -> p751 [p740] | LEA LEA
776: 112 134 135 147, r0 -> p751, r44 -> p752 [p749], r49 -> p753 [p750] | CMP SUB_IMM
777: 112 135 136 148, r49 -> p753 | J JMP_IMM
778: 112 133 134 148, r2 -> p742, r44 -> p754 [p752], r49 -> p755 [p753] | CMP SUB_IMM
779: 112 113 114 148, r0 -> p756 [p751] | MOV ADD_IMM
780: 112 134 135 148, r49 -> p755 | J JMP_IMM
781: 113 119 120 148, r3 -> p705, r0 -> p756, r3 -> p757 [p705], r49 -> p758 [p755] | ADD ADD
782: 113 130 131 148, r6 -> p736, r6 -> p736, r44 -> p759 [p754], r49 -> p760 [p758] | TEST AND
783: 113 131 132 148, r49 -> p760 | J JMP_IMM
784: 113 114 115 148, r9 -> p722, r9 -> p761 [p722], r49 -> p762 [p760] | ADD ADD_IMM
785: 113 115 116 149, r9 -> p761, r44 -> p763 [p759], r49 -> p764 [p762] | CMP SUB_IMM
786: 113 116 117 149, r49 -> p764 | J JMP_IMM
787: 114 126 129 149, r9 -> p761, r8 -> p719, r6 -> p765 [p736] | MOV LOAD
788: 114 115 116 149, r9 -> p761, r10 -> p766 [p724] | MOV ADD
789: 115 130 131 149, r6 -> p765, r6 -> p765, r44 -> p767 [p763], r49 -> p768 [p764] | TEST AND
790: 115 131 132 149, r49 -> p768 | J JMP_IMM
791: 116 117 118 149, r9 -> p761, r9 -> p769 [p761], r49 -> p770 [p768] | ADD ADD_IMM
792: 116 118 119 149, r9 -> p769, r44 -> p771 [p767], r49 -> p772 [p770] | CMP SUB_IMM
793: 116 119 120 150, r49 -> p772 | J JMP_IMM
794: 117 126 129 150, r8 -> p719, r8 -> p773 [p719] | MOV LOAD
795: 117 130 131 150, r8 -> p773, r8 -> p773, r44 -> p774 [p771], r49 -> p775 [p772] | TEST AND
796: 118 131 132 150, r49 -> p775 | J JMP_IMM
797: 118 122 123 150, r12 -> p709, r7 -> p776 [p727] | MOV ADD
798: 118 119 120 150, r44 -> p777 [p774] | CALL SAVE_PC
799: 118 123 124 150, r4 -> p718, r4 -> p778 [p718] | CALL SUB_IMM
800: 119 124 125 150, r44 -> p777, r4 -> p778 | CALL STORE
801: 120 122 123 151 | CALL JMP_IMM
802: 121 123 126 151, r7 -> p776, r0 -> p779 [p756] | MOV LOAD
803: 121 126 127 151, r0 -> p779, r0 -> p779, r44 -> p780 [p777], r49 -> p781 [p775] | TEST AND
804: 121 127 128 151, r49 -> p781 | J JMP_IMM
805: 122 123 124 151, r44 -> p782 [p780] | MOV SAVE_PC
806: 123 124 127 151, r44 -> p782, r1 -> p783 [p729] | MOV LOAD
807: 124 125 126 151 | JMP JMP_IMM
808: 125 126 129 151, r0 -> p779, r2 -> p784 [p742] | MOV LOAD
809: 128 131 132 152, r1 -> p783, r0 -> p779 | MOV STORE
810: 128 131 132 152, r2 -> p784, r2 -> p784, r44 -> p785 [p782], r49 -> p786 [p781] | TEST AND
811: 129 133 134 152, r49 -> p786 | J JMP_IMM
812: 129 131 132 152, r44 -> p787 [p785] | MOV SAVE_PC
813: 130 133 134 152, r0 -> p779, r44 -> p787 | MOV STORE
814: 131 134 135 152, r7 -> p776 | MOV STORE
815: 131 134 135 152, r7 -> p776 | MOV STORE
816: 131 134 137 152, r4 -> p778, r44 -> p788 [p787] | RET LOAD
817: 131 134 135 153, r4 -> p778, r4 -> p789 [p778] | RET ADD_IMM
818: 132 137 138 153, r44 -> p788 | RET JMP_REG
819: 132 134 135 153, r5 -> p707, r5 -> p707, r44 -> p790 [p788], r49 -> p791 [p786] | TEST AND
820: 132 135 136 153, r49 -> p791 | J JMP_IMM
821: 132 135 136 153, r4 -> p789, r4 -> p792 [p789], r49 -> p793 [p791] | ADD ADD_IMM
822: 135 137 138 153, r3 -> p757, r0 -> p794 [p779] | MOV ADD
823: 136 138 141 153, r4 -> p792, r3 -> p795 [p757] | POP LOAD
824: 137 138 139 153, r4 -> p792, r4 -> p796 [p792] | POP ADD_IMM
825: 138 139 142 154, r4 -> p796, r5 -> p797 [p707] | POP LOAD
826: 138 139 140 154, r4 -> p796, r4 -> p798 [p796] | POP ADD_IMM
827: 138 140 143 154, r4 -> p798, r12 -> p799 [p709] | POP LOAD
828: 138 140 141 154, r4 -> p798, r4 -> p800 [p798] | POP ADD_IMM
829: 138 141 144 154, r4 -> p800, r44 -> p801 [p790] | RET LOAD
830: 138 141 142 154, r4 -> p800, r4 -> p802 [p800] | RET ADD_IMM
831: 138 144 145 154, r44 -> p801 | RET JMP_REG
832: 138 139 140 154, r15 -> p715, r2 -> p803 [p784] | MOV ADD
833: 139 140 141 155, r0 -> p794, r13 -> p711 | MOV STORE
834: 139 140 141 155, r13 -> p711 | MOV STORE
835: 139 140 141 155, r13 -> p711 | MOV STORE
836: 139 140 143 155, r2 -> p803, r6 -> p804 [p765] | MOV LOAD
837: 139 140 141 155, r13 -> p711 | MOV STORE
838: 139 142 145 155, r4 -> p802, r0 -> p805 [p794] | MOV LOAD
839: 139 140 141 155, r13 -> p711 | MOV STORE
840: 139 141 142 155, r13 -> p711 | MOV STORE
841: 140 143 144 156, r6 -> p804, r13 -> p711 | MOV STORE
842: 140 145 146 156, r0 -> p805, r13 -> p711 | MOV STORE
843: 140 142 145 156, r5 -> p797, r44 -> p806 [p801] | MOVZX LOAD
844: 140 145 146 156, r44 -> p806, r1 -> p807 [p783] | MOVZX ZEXT_WORD_TO_DWORD
845: 140 146 147 156, r1 -> p807, r0 -> p808 [p805] | LEA LEA
846: 140 147 148 156, r0 -> p808, r44 -> p809 [p806], r49 -> p810 [p793] | CMP SUB_IMM
847: 140 148 149 156, r49 -> p810 | J JMP_IMM
848: 140 146 147 156, r1 -> p807, r44 -> p811 [p809], r49 -> p812 [p810] | CMP SUB_IMM
849: 141 147 148 157, r49 -> p812 | J JMP_IMM
850: 141 146 147 157, r1 -> p807, r44 -> p813 [p811], r49 -> p814 [p812] | CMP SUB_IMM
851: 141 147 148 157, r49 -> p814 | J JMP_IMM
852: 141 146 147 157, r1 -> p807, r44 -> p815 [p813], r49 -> p816 [p814] | CMP SUB_IMM
853: 141 142 143 157 | NOP NOP
854: 141 147 148 157, r49 -> p816 | J JMP_IMM
855: 141 146 147 157, r1 -> p807, r44 -> p817 [p815], r49 -> p818 [p816] | CMP SUB_IMM
856: 141 142 143 157 | NOP NOP
857: 142 147 148 158, r49 -> p818 | J JMP_IMM
858: 142 146 147 158, r1 -> p807, r44 -> p819 [p817], r49 -> p820 [p818] | CMP SUB_IMM
859: 142 147 148 158, r49 -> p820 | J JMP_IMM
860: 142 146 147 158, r1 -> p807, r44 -> p821 [p819], r49 -> p822 [p820] | CMP SUB_IMM
861: 142 147 148 158, r49 -> p822 | J JMP_IMM
862: 142 143 146 158, r5 -> p797, r0 -> p823 [p808] | MOV LOAD
863: 142 146 147 158, r0 -> p823, r0 -> p824 [p823], r49 -> p825 [p822] | AND AND_IMM
864: 142 147 148 158, r0 -> p824, r44 -> p826 [p821], r49 -> p827 [p825] | CMP SUB_IMM
865: 143 148 149 159, r49 -> p827 | J JMP_IMM
866: 143 144 145 159, r44 -> p828 [p826] | MOV SAVE_PC
867: 143 145 148 159, r44 -> p828, r8 -> p829 [p773] | MOV LOAD
868: 143 148 149 159, r5 -> p797, r8 -> p829, r44 -> p830 [p828], r49 -> p831 [p827] | CMP SUB
869: 143 149 150 159, r49 -> p831 | J JMP_IMM
870: 143 144 145 159, r44 -> p832 [p830] | MOV SAVE_PC
871: 143 145 148 159, r44 -> p832, r7 -> p833 [p776] | MOV LOAD
872: 143 148 149 159, r5 -> p797, r7 -> p833, r44 -> p834 [p832], r49 -> p835 [p831] | CMP SUB
873: 144 149 150 160, r49 -> p835 | J JMP_IMM
874: 144 145 146 160, r44 -> p836 [p834] | MOV SAVE_PC
875: 144 148 151 160, r44 -> p836, r11 -> p837 [p728] | MOV LOAD
876: 144 151 152 160, r5 -> p797, r11 -> p837, r44 -> p838 [p836], r49 -> p839 [p835] | CMP SUB
877: 144 152 153 160, r49 -> p839 | J JMP_IMM
878: 144 145 146 160, r44 -> p840 [p838] | MOV SAVE_PC
879: 144 148 151 160, r44 -> p840, r9 -> p841 [p769] | MOV LOAD
880: 144 151 152 160, r5 -> p797, r9 -> p841, r44 -> p842 [p840], r49 -> p843 [p839] | CMP SUB
881: 145 152 153 161, r49 -> p843 | J JMP_IMM
882: 145 148 149 161, r44 -> p844 [p842] | MOV SAVE_PC
883: 145 149 152 161, r44 -> p844, r10 -> p845 [p766] | MOV LOAD
884: 145 152 153 161, r5 -> p797, r10 -> p845, r44 -> p846 [p844], r49 -> p847 [p843] | CMP SUB
885: 145 153 154 161, r49 -> p847 | J JMP_IMM
886: 145 148 149 161, r1 -> p807, r44 -> p848 [p846], r49 -> p849 [p847] | CMP SUB_IMM
887: 145 149 150 161, r49 -> p849 | J JMP_IMM
888: 145 149 150 161, r1 -> p807, r44 -> p850 [p848], r49 -> p851 [p849] | CMP SUB_IMM
889: 146 149 150 162, r1 -> p852 [p807] | SET ADD
890: 146 150 151 162, r49 -> p851, r1 -> p853 [p852] | SET ADD_IMM
891: 146 149 150 162 | JMP JMP_IMM
892: 146 149 150 162, r6 -> p804, r6 -> p804, r44 -> p854 [p850], r49 -> p855 [p851] | TEST AND
893: 146 151 152 162, r1 -> p853, r13 -> p711 | MOV STORE
894: 146 150 151 162, r49 -> p855 | J JMP_IMM
895: 146 150 151 162, r13 -> p711, r6 -> p804 | MOV STORE
896: 146 150 151 162, r14 -> p713, r14 -> p713, r44 -> p856 [p854], r49 -> p857 [p855] | TEST AND
897: 147 150 151 163, r2 -> p803, r44 -> p858 [p856] | MOV LEA
898: 147 151 152 163, r13 -> p711, r44 -> p858 | MOV STORE
899: 147 151 152 163, r49 -> p857 | J JMP_IMM
900: 147 150 153 163, r14 -> p713, r12 -> p859 [p799] | MOV LOAD
901: 147 150 153 163, r13 -> p711, r6 -> p860 [p804] | MOV LOAD
902: 147 150 153 163, r13 -> p711, r8 -> p861 [p829] | MOV LOAD
903: 147 153 156 163, r12 -> p859, r0 -> p862 [p824] | MOV LOAD
904: 147 153 156 163, r12 -> p859, r2 -> p863 [p803] | MOV LOAD
905: 148 156 157 164, r0 -> p862, r6 -> p860, r44 -> p864 [p858], r49 -> p865 [p857] | CMP SUB
906: 148 157 158 164, r49 -> p865 | J JMP_IMM
907: 148 156 157 164, r2 -> p863, r8 -> p861, r44 -> p866 [p864], r49 -> p867 [p865] | CMP SUB
908: 148 157 158 164, r49 -> p867 | J JMP_IMM
909: 148 153 154 164, r8 -> p861, r44 -> p868 [p866], r49 -> p869 [p867] | CMP SUB_IMM
910: 148 154 155 164, r49 -> p869 | J JMP_IMM
911: 148 156 157 164, r2 -> p863, r44 -> p870 [p868], r49 -> p871 [p869] | CMP SUB_IMM
912: 148 157 158 164, r49 -> p871 | J JMP_IMM
913: 149 156 157 165, r0 -> p862, r6 -> p860, r44 -> p872 [p870], r49 -> p873 [p871] | CMP SUB
914: 149 151 152 165 | XCHG NOP
915: 149 157 158 165, r49 -> p873 | J JMP_IMM
916: 149 156 157 165, r2 -> p863, r8 -> p861, r44 -> p874 [p872], r49 -> p875 [p873] | CMP SUB
917: 149 151 152 165 | NOP NOP
918: 149 157 158 165, r49 -> p875 | J JMP_IMM
919: 149 153 154 165, r8 -> p861, r0 -> p876 [p862] | MOV ADD
920: 149 156 157 165, r0 -> p876, r2 -> p863, r0 -> p877 [p876], r49 -> p878 [p875] | SUB SUB
921: 150 151 152 166 | NOP NOP
922: 150 152 153 166 | JMP JMP_IMM
923: 150 157 158 166, r0 -> p877, r0 -> p877, r44 -> p879 [p874], r49 -> p880 [p878] | TEST AND
924: 150 158 159 166, r49 -> p880 | J JMP_IMM
925: 150 153 154 166, r8 -> p861, r44 -> p881 [p879], r49 -> p882 [p880] | CMP SUB_IMM
926: 150 154 155 166, r49 -> p882 | J JMP_IMM
927: 150 153 154 166, r6 -> p860, r44 -> p883 [p881], r49 -> p884 [p882] | CMP SUB_IMM
928: 150 154 155 166, r49 -> p884 | J JMP_IMM
929: 151 153 154 167, r12 -> p859, r7 -> p885 [p833] | MOV ADD
930: 151 152 153 167 | JMP JMP_IMM
931: 151 154 157 167, r7 -> p885, r1 -> p886 [p853] | MOV LOAD
932: 151 157 158 167, r1 -> p886, r1 -> p886, r44 -> p887 [p883], r49 -> p888 [p884] | TEST AND
933: 151 158 159 167, r49 -> p888 | J JMP_IMM
934: 151 157 160 167, r1 -> p886, r0 -> p889 [p877] | MOV LOAD
935: 151 158 161 167, r1 -> p886, r2 -> p890 [p863] | MOV LOAD
936: 151 160 161 167, r0 -> p889, r6 -> p860, r44 -> p891 [p887], r49 -> p892 [p888] | CMP SUB
937: 152 161 162 168, r49 -> p892 | J JMP_IMM
938: 152 161 162 168, r8 -> p861, r2 -> p890, r44 -> p893 [p891], r49 -> p894 [p892] | CMP SUB
939: 152 162 163 168, r49 -> p894 | J JMP_IMM
940: 152 160 161 168, r0 -> p889, r6 -> p860, r44 -> p895 [p893], r49 -> p896 [p894] | CMP SUB
941: 152 161 162 168, r49 -> p896 | J JMP_IMM
942: 152 161 162 168, r8 -> p861, r2 -> p890, r44 -> p897 [p895], r49 -> p898 [p896] | CMP SUB
943: 152 154 155 168 | NOP NOP
944: 152 162 163 168, r49 -> p898 | J JMP_IMM
945: 153 158 159 169, r1 -> p886, r13 -> p711 | MOV STORE
946: 153 158 159 169, r13 -> p711, r1 -> p886 | MOV STORE
947: 153 154 155 169, r7 -> p885, r13 -> p711 | MOV STORE
948: 153 154 155 169, r13 -> p711, r7 -> p885 | MOV STORE
949: 153 154 155 169, r12 -> p859, r13 -> p711 | MOV STORE
950: 153 155 158 169, r13 -> p711, r45 -> p899 [p699] | CMP LOAD
951: 153 158 159 169, r45 -> p899, r44 -> p900 [p897], r49 -> p901 [p898] | CMP SUB
952: 153 159 160 169, r49 -> p901 | J JMP_IMM
953: 154 155 158 170, r5 -> p797, r45 -> p902 [p899] | CMP LOAD
954: 154 158 159 170, r45 -> p902, r44 -> p903 [p900], r49 -> p904 [p901] | CMP SUB_IMM
955: 154 159 160 170, r49 -> p904 | J JMP_IMM
956: 154 155 158 170, r5 -> p797, r3 -> p905 [p795] | MOV LOAD
957: 154 155 156 170, r45 -> p906 [p902] | CMP SAVE_PC
958: 154 156 159 170, r45 -> p906, r45 -> p907 [p906] | CMP LOAD
959: 154 159 160 170, r3 -> p905, r45 -> p907, r44 -> p908 [p903], r49 -> p909 [p904] | CMP SUB
960: 154 160 161 170, r49 -> p909 | J JMP_IMM
961: 155 156 157 171, r44 -> p910 [p908] | MOV SAVE_PC
962: 155 158 161 171, r44 -> p910, r2 -> p911 [p890] | MOV LOAD
963: 155 161 162 171, r2 -> p911, r2 -> p911, r44 -> p912 [p910], r49 -> p913 [p909] | TEST AND
964: 155 162 163 171, r49 -> p913 | J JMP_IMM
965: 155 161 164 171, r2 -> p911, r44 -> p914 [p912] | MOVSX LOAD
966: 155 164 165 171, r44 -> p914, r0 -> p915 [p889] | MOVSX SEXT_DWORD_TO_QWORD
967: 155 159 160 171, r44 -> p916 [p914] | MOV SAVE_PC
968: 155 160 163 171, r44 -> p916, r2 -> p917 [p911] | MOV LOAD
969: 156 165 166 172, r0 -> p915, r0 -> p915, r0 -> p918 [p915] | LEA LEA
970: 156 166 167 172, r0 -> p918, r0 -> p919 [p918], r49 -> p920 [p913] | SHL SHL_IMM
971: 156 167 170 172, r2 -> p917, r0 -> p919, r45 -> p921 [p907] | CMP LOAD
972: 156 170 171 172, r45 -> p921, r44 -> p922 [p916], r49 -> p923 [p920] | CMP SUB
973: 156 171 172 172, r49 -> p923 | J JMP_IMM
974: 156 159 162 172, r5 -> p797, r45 -> p924 [p921] | CMP LOAD
975: 156 162 163 172, r45 -> p924, r44 -> p925 [p922], r49 -> p926 [p923] | CMP SUB_IMM
976: 156 163 164 172, r49 -> p926 | J JMP_IMM
977: 157 159 162 173, r5 -> p797, r3 -> p927 [p905] | MOV LOAD
978: 157 159 160 173, r45 -> p928 [p924] | CMP SAVE_PC
979: 157 160 163 173, r45 -> p928, r45 -> p929 [p928] | CMP LOAD
980: 157 163 164 173, r3 -> p927, r45 -> p929, r44 -> p930 [p925], r49 -> p931 [p926] | CMP SUB
981: 157 164 165 173, r49 -> p931 | J JMP_IMM
982: 157 159 160 173, r44 -> p932 [p930] | MOV SAVE_PC
983: 157 160 163 173, r44 -> p932, r2 -> p933 [p917] | MOV LOAD
984: 157 163 164 173, r2 -> p933, r2 -> p933, r44 -> p934 [p932], r49 -> p935 [p931] | TEST AND
985: 158 164 165 174, r49 -> p935 | J JMP_IMM
986: 158 163 166 174, r2 -> p933, r44 -> p936 [p934] | MOVSX LOAD
987: 158 166 167 174, r44 -> p936, r0 -> p937 [p919] | MOVSX SEXT_DWORD_TO_QWORD
988: 158 160 161 174, r44 -> p938 [p936] | MOV SAVE_PC
989: 158 161 164 174, r44 -> p938, r6 -> p939 [p860] | MOV LOAD
990: 158 167 168 174, r0 -> p937, r0 -> p937, r0 -> p940 [p937] | LEA LEA
991: 158 168 169 174, r0 -> p940, r0 -> p941 [p940], r49 -> p942 [p935] | SHL SHL_IMM
992: 158 169 172 174, r6 -> p939, r0 -> p941, r45 -> p943 [p929] | CMP LOAD
993: 159 172 173 175, r45 -> p943, r44 -> p944 [p938], r49 -> p945 [p942] | CMP SUB
994: 159 173 174 175, r49 -> p945 | J JMP_IMM
995: 159 160 163 175, r5 -> p797, r3 -> p946 [p927] | MOV LOAD
996: 159 161 162 175, r45 -> p947 [p943] | CMP SAVE_PC
997: 159 162 165 175, r45 -> p947, r45 -> p948 [p947] | CMP LOAD
998: 159 165 166 175, r3 -> p946, r45 -> p948, r44 -> p949 [p944], r49 -> p950 [p945] | CMP SUB
999: 159 162 165 175, r5 -> p797, r44 -> p951 [p949] | MOVZX LOAD
1000: 159 165 166 175, r44 -> p951, r14 -> p952 [p713] | MOVZX ZEXT_BYTE_TO_DWORD
Processed 1000 trace records.
Micro-ops: 1000
Macro-ops: 754
TotalCycles: 176
uIPC: 5.68182
