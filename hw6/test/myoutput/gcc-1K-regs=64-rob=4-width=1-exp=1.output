Processing trace...
1: 0 1 2 2, r13 -> p50 [p13] | SET ADD
2: 1 2 3 3, r49 -> p49, r13 -> p51 [p50] | SET ADD_IMM
3: 2 3 6 6, r5 -> p5, r45 -> p52 [p45] | CMP LOAD
4: 3 6 7 7, r45 -> p52, r3 -> p3, r44 -> p53 [p44], r49 -> p54 [p49] | CMP SUB
5: 4 5 8 8, r5 -> p5, r3 -> p55 [p3] | MOV LOAD
6: 5 7 8 9, r0 -> p56 [p0] | SET ADD
7: 6 8 9 10, r49 -> p54, r0 -> p57 [p56] | SET ADD_IMM
8: 7 9 10 11, r12 -> p58 [p12] | XOR ADD
9: 8 10 11 12, r13 -> p51, r0 -> p57, r13 -> p59 [p51], r49 -> p60 [p54] | OR OR
10: 9 11 12 13 | JMP JMP_IMM
11: 10 12 15 15, r3 -> p55, r0 -> p61 [p57] | MOV LOAD
12: 11 15 16 16, r0 -> p61, r0 -> p61, r44 -> p62 [p53], r49 -> p63 [p60] | TEST AND
13: 12 16 17 17, r49 -> p63 | J JMP_IMM
14: 13 17 20 20, r0 -> p61, r7 -> p13 [p7] | MOV LOAD
15: 15 20 23 23, r7 -> p13, r44 -> p50 [p62] | MOVZX LOAD
16: 16 23 24 24, r44 -> p50, r0 -> p45 [p61] | MOVZX ZEXT_WORD_TO_DWORD
17: 17 24 25 25, r0 -> p45, r44 -> p44 [p50], r49 -> p49 [p63] | CMP SUB_IMM
18: 20 25 26 26, r49 -> p49 | J JMP_IMM
19: 23 26 27 27, r6 -> p3 [p6] | XOR ADD
20: 24 27 28 28, r44 -> p0 [p44] | CALL SAVE_PC
21: 25 28 29 29, r4 -> p4, r4 -> p56 [p4] | CALL SUB_IMM
22: 26 29 30 30, r44 -> p0, r4 -> p56 | CALL STORE
23: 27 30 31 31 | CALL JMP_IMM
24: 28 31 32 32, r15 -> p15, r4 -> p56 | PUSH STORE
25: 29 32 33 33, r4 -> p56, r4 -> p12 [p56] | PUSH SUB_IMM
26: 30 33 34 34, r14 -> p14, r4 -> p12 | PUSH STORE
27: 31 34 35 35, r4 -> p12, r4 -> p51 [p12] | PUSH SUB_IMM
28: 32 35 36 36, r13 -> p59, r4 -> p51 | PUSH STORE
29: 33 36 37 37, r4 -> p51, r4 -> p54 [p51] | PUSH SUB_IMM
30: 34 37 38 38, r7 -> p13, r13 -> p57 [p59] | MOV ADD
31: 35 38 39 39, r12 -> p58, r4 -> p54 | PUSH STORE
32: 36 39 40 40, r4 -> p54, r4 -> p53 [p54] | PUSH SUB_IMM
33: 37 40 41 41, r6 -> p3, r12 -> p60 [p58] | MOV ADD
34: 38 41 42 42, r5 -> p5, r4 -> p53 | PUSH STORE
35: 39 42 43 43, r4 -> p53, r4 -> p7 [p53] | PUSH SUB_IMM
36: 40 43 44 44, r3 -> p55, r4 -> p7 | PUSH STORE
37: 41 44 45 45, r4 -> p7, r4 -> p62 [p7] | PUSH SUB_IMM
38: 42 45 46 46, r4 -> p62, r4 -> p61 [p62], r49 -> p50 [p49] | SUB SUB_IMM
39: 43 46 49 49, r7 -> p13, r44 -> p63 [p0] | MOVZX LOAD
40: 44 49 50 50, r44 -> p63, r0 -> p6 [p45] | MOVZX ZEXT_WORD_TO_DWORD
41: 45 50 51 51, r0 -> p6, r44 -> p44 [p63], r49 -> p4 [p50] | CMP SUB_IMM
42: 46 51 52 52, r49 -> p4 | J JMP_IMM
43: 49 52 55 55, r7 -> p13, r5 -> p56 [p5] | MOV LOAD
44: 50 55 56 56, r5 -> p56, r44 -> p12 [p44], r49 -> p51 [p4] | CMP SUB_IMM
45: 51 56 57 57, r49 -> p51 | J JMP_IMM
46: 52 53 54 58, r45 -> p59 [p52] | CMP SAVE_PC
47: 55 57 60 60, r45 -> p59, r45 -> p54 [p59] | CMP LOAD
48: 56 60 61 61, r5 -> p56, r45 -> p54, r44 -> p58 [p12], r49 -> p53 [p51] | CMP SUB
49: 57 61 62 62, r49 -> p53 | J JMP_IMM
50: 58 59 60 63, r44 -> p7 [p58] | MOV SAVE_PC
51: 60 62 65 65, r44 -> p7, r2 -> p62 [p2] | MOV LOAD
52: 61 65 66 66, r2 -> p62, r2 -> p62, r44 -> p49 [p7], r49 -> p0 [p53] | TEST AND
53: 62 66 67 67, r49 -> p0 | J JMP_IMM
54: 63 67 70 70, r2 -> p62, r12 -> p45 [p60] | MOV LOAD
55: 65 70 71 71, r12 -> p45, r12 -> p63 [p45], r49 -> p50 [p0] | AND AND_IMM
56: 66 68 69 72, r45 -> p5 [p54] | CMP SAVE_PC
57: 67 69 72 73, r45 -> p5, r45 -> p44 [p5] | CMP LOAD
58: 70 72 73 74, r5 -> p56, r45 -> p44, r44 -> p4 [p49], r49 -> p52 [p50] | CMP SUB
59: 71 73 74 75, r49 -> p52 | J JMP_IMM
60: 72 74 75 76, r44 -> p59 [p4] | MOV SAVE_PC
61: 73 75 78 78, r44 -> p59, r2 -> p12 [p62] | MOV LOAD
62: 74 78 79 79, r2 -> p12, r2 -> p12, r44 -> p51 [p59], r49 -> p58 [p52] | TEST AND
63: 75 79 80 80, r49 -> p58 | J JMP_IMM
64: 76 80 83 83, r2 -> p12, r0 -> p2 [p6] | MOV LOAD
65: 78 83 84 84, r5 -> p56, r0 -> p2, r44 -> p7 [p51], r49 -> p53 [p58] | CMP SUB
66: 79 84 85 85, r49 -> p53 | J JMP_IMM
67: 80 81 82 86, r45 -> p60 [p44] | CMP SAVE_PC
68: 83 85 88 88, r45 -> p60, r45 -> p45 [p60] | CMP LOAD
69: 84 88 89 89, r5 -> p56, r45 -> p45, r44 -> p0 [p7], r49 -> p54 [p53] | CMP SUB
70: 85 89 90 90, r49 -> p54 | J JMP_IMM
71: 86 87 88 91, r44 -> p5 [p0] | MOV SAVE_PC
72: 88 90 93 93, r44 -> p5, r2 -> p49 [p12] | MOV LOAD
73: 89 93 94 94, r2 -> p49, r2 -> p49, r44 -> p50 [p5], r49 -> p4 [p54] | TEST AND
74: 90 94 95 95, r49 -> p4 | J JMP_IMM
75: 91 95 98 98, r2 -> p49, r45 -> p62 [p45] | ADD LOAD
76: 93 98 99 99, r45 -> p62, r44 -> p59 [p50], r49 -> p52 [p4] | ADD ADD_IMM
77: 94 99 100 100, r44 -> p59, r2 -> p49 | ADD STORE
78: 95 96 97 101, r5 -> p56, r44 -> p6 [p59], r49 -> p51 [p52] | CMP SUB_IMM
79: 98 100 101 102, r12 -> p63, r12 -> p58 [p63] | MOV ADD
80: 99 101 102 103, r49 -> p51 | J JMP_IMM
81: 100 102 105 105, r13 -> p57, r45 -> p44 [p62] | CMP LOAD
82: 101 105 106 106, r45 -> p44, r44 -> p60 [p6], r49 -> p7 [p51] | CMP SUB_IMM
83: 102 103 106 107, r13 -> p57, r44 -> p53 [p60] | MOVZX LOAD
84: 103 106 107 108, r44 -> p53, r5 -> p0 [p56] | MOVZX ZEXT_BYTE_TO_DWORD
85: 105 107 108 109, r49 -> p7 | J JMP_IMM
86: 106 108 111 111, r12 -> p58, r3 -> p12 [p55] | MOV LOAD
87: 107 109 112 112, r13 -> p57, r2 -> p5 [p49] | MOV LOAD
88: 108 111 112 113, r3 -> p12, r3 -> p12, r44 -> p54 [p53], r49 -> p45 [p7] | TEST AND
89: 109 112 113 114, r49 -> p45 | J JMP_IMM
90: 111 113 116 116, r3 -> p12, r0 -> p50 [p2] | MOV LOAD
91: 112 116 119 119, r0 -> p50, r45 -> p4 [p44] | CMP LOAD
92: 113 119 120 120, r45 -> p4, r44 -> p59 [p54], r49 -> p52 [p45] | CMP SUB_IMM
93: 114 120 121 121, r49 -> p52 | J JMP_IMM
94: 116 117 120 122, r3 -> p12, r3 -> p63 [p12] | MOV LOAD
95: 119 121 122 123, r3 -> p63, r3 -> p63, r44 -> p62 [p59], r49 -> p6 [p52] | TEST AND
96: 120 122 123 124, r49 -> p6 | J JMP_IMM
97: 121 123 124 125, r4 -> p61, r4 -> p51 [p61], r49 -> p60 [p6] | ADD ADD_IMM
98: 122 124 127 127, r4 -> p51, r3 -> p56 [p63] | POP LOAD
99: 123 125 126 128, r4 -> p51, r4 -> p55 [p51] | POP ADD_IMM
100: 124 126 129 129, r4 -> p55, r5 -> p49 [p0] | POP LOAD
101: 125 127 128 130, r4 -> p55, r4 -> p53 [p55] | POP ADD_IMM
102: 127 128 131 131, r4 -> p53, r12 -> p7 [p58] | POP LOAD
103: 128 129 130 132, r4 -> p53, r4 -> p2 [p53] | POP ADD_IMM
104: 129 130 133 133, r4 -> p2, r13 -> p44 [p57] | POP LOAD
105: 130 131 132 134, r4 -> p2, r4 -> p54 [p2] | POP ADD_IMM
106: 131 132 135 135, r4 -> p54, r14 -> p45 [p14] | POP LOAD
107: 132 133 134 136, r4 -> p54, r4 -> p12 [p54] | POP ADD_IMM
108: 133 134 137 137, r4 -> p12, r15 -> p59 [p15] | POP LOAD
109: 134 135 136 138, r4 -> p12, r4 -> p52 [p12] | POP ADD_IMM
110: 135 136 139 139, r4 -> p52, r44 -> p61 [p62] | RET LOAD
111: 136 137 138 140, r4 -> p52, r4 -> p6 [p52] | RET ADD_IMM
112: 137 139 140 141, r44 -> p61 | RET JMP_REG
113: 138 140 141 142 | JMP JMP_IMM
114: 139 141 142 143, r12 -> p7, r12 -> p63 [p7], r49 -> p51 [p60] | ADD ADD_IMM
115: 140 142 143 144, r3 -> p56, r3 -> p0 [p56], r49 -> p55 [p51] | ADD ADD_IMM
116: 141 143 146 146, r5 -> p49, r45 -> p58 [p4] | CMP LOAD
117: 142 146 147 147, r12 -> p63, r45 -> p58, r44 -> p53 [p61], r49 -> p57 [p55] | CMP SUB
118: 143 147 148 148, r49 -> p57 | J JMP_IMM
119: 144 145 148 149, r5 -> p49, r0 -> p2 [p50] | MOV LOAD
120: 146 148 151 151, r0 -> p2, r45 -> p14 [p58] | CMP LOAD
121: 147 151 152 152, r45 -> p14, r44 -> p54 [p53], r49 -> p15 [p57] | CMP SUB_IMM
122: 148 152 153 153, r49 -> p15 | J JMP_IMM
123: 149 150 153 154, r0 -> p2, r0 -> p12 [p2] | MOV LOAD
124: 151 153 156 156, r0 -> p12, r0 -> p62 [p12] | MOV LOAD
125: 152 156 157 157, r0 -> p62, r0 -> p52 [p62], r49 -> p7 [p15] | AND AND_IMM
126: 153 157 158 158, r0 -> p52, r44 -> p60 [p54], r49 -> p56 [p7] | CMP SUB_IMM
127: 154 158 159 159, r49 -> p56 | J JMP_IMM
128: 156 159 162 162, r5 -> p49, r11 -> p51 [p11] | MOV LOAD
129: 157 162 163 163, r11 -> p51, r11 -> p51, r44 -> p4 [p60], r49 -> p61 [p56] | TEST AND
130: 158 163 164 164, r49 -> p61 | J JMP_IMM
131: 159 160 163 165, r5 -> p49, r1 -> p55 [p1] | MOV LOAD
132: 162 164 165 166, r5 -> p49 | MOV STORE
133: 163 165 166 167, r1 -> p55, r5 -> p49 | MOV STORE
134: 164 166 167 168 | JMP JMP_IMM
135: 165 167 170 170, r5 -> p49, r3 -> p50 [p0] | MOV LOAD
136: 166 170 173 173, r3 -> p50, r0 -> p58 [p52] | MOV LOAD
137: 167 173 174 174, r0 -> p58, r0 -> p58, r44 -> p53 [p4], r49 -> p57 [p61] | TEST AND
138: 168 174 175 175, r49 -> p57 | J JMP_IMM
139: 170 175 178 178, r0 -> p58, r7 -> p2 [p13] | MOV LOAD
140: 173 178 181 181, r7 -> p2, r45 -> p12 [p14] | CMP LOAD
141: 174 181 182 182, r45 -> p12, r44 -> p62 [p53], r49 -> p15 [p57] | CMP SUB_IMM
142: 175 182 183 183, r49 -> p15 | J JMP_IMM
143: 178 179 182 184, r7 -> p2, r1 -> p54 [p55] | MOV LOAD
144: 181 183 184 185, r1 -> p54, r44 -> p7 [p62], r49 -> p11 [p15] | CMP SUB_IMM
145: 182 184 185 186, r49 -> p11 | J JMP_IMM
146: 183 185 186 187, r0 -> p60 [p58] | MOV ADD_IMM
147: 184 186 187 188 | JMP JMP_IMM
148: 185 187 188 189, r0 -> p60, r1 -> p54, r0 -> p56 [p60], r49 -> p1 [p11] | ADD ADD
149: 186 188 189 190, r1 -> p54, r0 -> p56, r44 -> p0 [p7], r49 -> p52 [p1] | CMP SUB
150: 187 189 190 191, r49 -> p52 | J JMP_IMM
151: 188 190 191 192, r1 -> p54, r13 -> p4 [p44] | MOV ADD
152: 189 191 192 193, r45 -> p61 [p12] | CMP SAVE_PC
153: 190 192 195 195, r45 -> p61, r45 -> p13 [p61] | CMP LOAD
154: 191 195 196 196, r45 -> p13, r13 -> p4, r44 -> p14 [p0], r49 -> p53 [p52] | CMP SUB
155: 192 193 194 197, r0 -> p56, r5 -> p49 | MOV STORE
156: 193 196 197 198, r49 -> p53 | J JMP_IMM
157: 195 197 198 199, r44 -> p57 [p14] | MOV SAVE_PC
158: 196 198 201 201, r44 -> p57, r2 -> p55 [p5] | MOV LOAD
159: 197 201 202 202, r2 -> p55, r2 -> p55, r44 -> p62 [p57], r49 -> p15 [p53] | TEST AND
160: 198 202 203 203, r49 -> p15 | J JMP_IMM
161: 199 203 206 206, r2 -> p55, r10 -> p58 [p10] | MOV LOAD
162: 201 206 207 207, r10 -> p58, r10 -> p58, r44 -> p60 [p62], r49 -> p11 [p15] | TEST AND
163: 202 207 208 208, r49 -> p11 | J JMP_IMM
164: 203 204 205 209, r13 -> p4, r13 -> p7 [p4], r49 -> p1 [p11] | ADD ADD_IMM
165: 206 208 211 211, r5 -> p49, r45 -> p44 [p13] | CMP LOAD
166: 207 211 212 212, r45 -> p44, r13 -> p7, r44 -> p12 [p60], r49 -> p61 [p1] | CMP SUB
167: 208 212 213 213, r49 -> p61 | J JMP_IMM
168: 209 210 213 214, r5 -> p49, r45 -> p0 [p44] | ADD LOAD
169: 211 213 214 215, r45 -> p0, r44 -> p52 [p12], r49 -> p14 [p61] | ADD ADD_IMM
170: 212 214 215 216, r44 -> p52, r5 -> p49 | ADD STORE
171: 213 215 218 218, r5 -> p49, r45 -> p5 [p0] | ADD LOAD
172: 214 218 219 219, r45 -> p5, r44 -> p57 [p52], r49 -> p53 [p14] | ADD ADD_IMM
173: 215 219 220 220, r44 -> p57, r5 -> p49 | ADD STORE
174: 216 217 220 221, r5 -> p49, r0 -> p10 [p56] | MOV LOAD
175: 218 220 223 223, r5 -> p49, r45 -> p62 [p5] | CMP LOAD
176: 219 223 224 224, r45 -> p62, r0 -> p10, r44 -> p15 [p57], r49 -> p4 [p53] | CMP SUB
177: 220 224 225 225, r49 -> p4 | J JMP_IMM
178: 221 222 225 226, r5 -> p49, r1 -> p11 [p54] | MOV LOAD
179: 223 225 226 227, r6 -> p13 [p3] | XOR ADD
180: 224 226 227 228 | XCHG NOP
181: 225 227 228 229 | JMP JMP_IMM
182: 226 228 231 231, r1 -> p11, r45 -> p60 [p62] | CMP LOAD
183: 227 231 232 232, r45 -> p60, r44 -> p1 [p15], r49 -> p44 [p4] | CMP SUB
184: 228 232 233 233, r49 -> p44 | J JMP_IMM
185: 229 230 233 234, r1 -> p11, r0 -> p12 [p10] | MOV LOAD
186: 231 233 234 235, r0 -> p12, r0 -> p12, r44 -> p61 [p1], r49 -> p0 [p44] | TEST AND
187: 232 234 235 236, r49 -> p0 | J JMP_IMM
188: 233 235 238 238, r0 -> p12, r45 -> p52 [p60] | CMP LOAD
189: 234 238 239 239, r45 -> p52, r44 -> p14 [p61], r49 -> p56 [p0] | CMP SUB
190: 235 239 240 240, r49 -> p56 | J JMP_IMM
191: 236 237 238 241, r6 -> p13, r6 -> p5 [p13], r49 -> p57 [p56] | ADD ADD_IMM
192: 238 240 241 242, r1 -> p11, r1 -> p53 [p11], r49 -> p54 [p57] | ADD ADD_IMM
193: 239 241 244 244, r5 -> p49, r45 -> p3 [p52] | CMP LOAD
194: 240 244 245 245, r6 -> p5, r45 -> p3, r44 -> p62 [p14], r49 -> p15 [p54] | CMP SUB
195: 241 245 246 246, r49 -> p15 | J JMP_IMM
196: 242 243 246 247, r5 -> p49, r1 -> p4 [p53] | MOV LOAD
197: 244 246 247 248, r5 -> p49 | MOV STORE
198: 245 247 248 249, r1 -> p4, r5 -> p49 | MOV STORE
199: 246 248 249 250 | JMP JMP_IMM
200: 247 249 252 252, r5 -> p49, r2 -> p10 [p55] | MOV LOAD
201: 248 252 255 255, r2 -> p10, r0 -> p1 [p12] | MOV LOAD
202: 249 255 256 256, r0 -> p1, r0 -> p1, r44 -> p44 [p62], r49 -> p60 [p15] | TEST AND
203: 250 256 257 257, r49 -> p60 | J JMP_IMM
204: 252 253 254 258, r44 -> p61 [p44] | MOV SAVE_PC
205: 255 257 260 260, r44 -> p61, r9 -> p0 [p9] | MOV LOAD
206: 256 258 261 261, r0 -> p1, r12 -> p13 [p63] | MOV LOAD
207: 257 259 262 262, r2 -> p10, r14 -> p56 [p45] | MOV LOAD
208: 258 260 261 263, r9 -> p0, r9 -> p0, r44 -> p11 [p61], r49 -> p57 [p60] | TEST AND
209: 260 261 262 264, r49 -> p57 | J JMP_IMM
210: 261 262 265 265, r12 -> p13, r44 -> p52 [p11] | MOVZX LOAD
211: 262 265 266 266, r44 -> p52, r2 -> p14 [p10] | MOVZX ZEXT_BYTE_TO_DWORD
212: 263 266 267 267, r2 -> p14, r44 -> p54 [p52], r49 -> p53 [p57] | CMP SUB_IMM
213: 264 267 268 268, r49 -> p53 | J JMP_IMM
214: 265 268 271 271, r5 -> p49, r45 -> p55 [p3] | CMP LOAD
215: 266 271 272 272, r45 -> p55, r44 -> p12 [p54], r49 -> p62 [p53] | CMP SUB
216: 267 272 273 273, r49 -> p62 | J JMP_IMM
217: 268 269 272 274, r5 -> p49, r1 -> p15 [p4] | MOV LOAD
218: 271 273 276 276, r1 -> p15, r6 -> p44 [p5] | MOV LOAD
219: 272 276 277 277, r6 -> p44, r6 -> p44, r44 -> p9 [p12], r49 -> p63 [p62] | TEST AND
220: 273 274 275 278 | NOP NOP
221: 274 277 278 279, r49 -> p63 | J JMP_IMM
222: 276 278 281 281, r12 -> p13, r44 -> p45 [p9] | MOVZX LOAD
223: 277 281 282 282, r44 -> p45, r0 -> p61 [p1] | MOVZX ZEXT_WORD_TO_DWORD
224: 278 282 283 283, r0 -> p61, r44 -> p60 [p45], r49 -> p11 [p63] | CMP SUB_IMM
225: 279 283 284 284, r49 -> p11 | J JMP_IMM
226: 281 284 285 285, r0 -> p61, r44 -> p10 [p60], r49 -> p52 [p11] | CMP SUB_IMM
227: 282 285 286 286, r49 -> p52 | J JMP_IMM
228: 283 286 287 287, r0 -> p61, r44 -> p57 [p10], r49 -> p3 [p52] | CMP SUB_IMM
229: 284 287 288 288, r49 -> p3 | J JMP_IMM
230: 285 288 289 289, r2 -> p54 [p14] | MOV ADD_IMM
231: 286 289 290 290, r12 -> p13, r7 -> p53 [p2] | MOV ADD
232: 287 290 291 291, r44 -> p4 [p57] | CALL SAVE_PC
233: 288 291 292 292, r4 -> p6, r4 -> p5 [p6] | CALL SUB_IMM
234: 289 292 293 293, r44 -> p4, r4 -> p5 | CALL STORE
235: 290 293 294 294 | CALL JMP_IMM
236: 291 294 295 295, r14 -> p56, r4 -> p5 | PUSH STORE
237: 292 295 296 296, r4 -> p5, r4 -> p12 [p5] | PUSH SUB_IMM
238: 293 296 297 297, r2 -> p54, r14 -> p62 [p56] | MOV ADD
239: 294 297 298 298, r13 -> p7, r4 -> p12 | PUSH STORE
240: 295 298 299 299, r4 -> p12, r4 -> p9 [p12] | PUSH SUB_IMM
241: 296 299 300 300, r6 -> p44, r13 -> p1 [p7] | MOV ADD
242: 297 300 301 301, r12 -> p13, r4 -> p9 | PUSH STORE
243: 298 301 302 302, r4 -> p9, r4 -> p45 [p9] | PUSH SUB_IMM
244: 299 302 303 303, r5 -> p49, r4 -> p45 | PUSH STORE
245: 300 303 304 304, r4 -> p45, r4 -> p63 [p45] | PUSH SUB_IMM
246: 301 304 305 305, r7 -> p53, r5 -> p60 [p49] | MOV ADD
247: 302 305 306 306, r3 -> p50, r4 -> p63 | PUSH STORE
248: 303 306 307 307, r4 -> p63, r4 -> p11 [p63] | PUSH SUB_IMM
249: 304 307 310 310, r7 -> p53, r44 -> p10 [p4] | MOVZX LOAD
250: 305 310 311 311, r44 -> p10, r0 -> p52 [p61] | MOVZX ZEXT_WORD_TO_DWORD
251: 306 311 312 312, r0 -> p52, r44 -> p14 [p10], r49 -> p2 [p3] | CMP SUB_IMM
252: 307 312 313 313, r49 -> p2 | J JMP_IMM
253: 310 313 316 316, r7 -> p53, r3 -> p57 [p50] | MOV LOAD
254: 311 314 315 317, r45 -> p6 [p55] | CMP SAVE_PC
255: 312 315 318 318, r45 -> p6, r45 -> p5 [p6] | CMP LOAD
256: 313 318 319 319, r3 -> p57, r45 -> p5, r44 -> p56 [p14], r49 -> p12 [p2] | CMP SUB
257: 316 319 320 320, r49 -> p12 | J JMP_IMM
258: 317 320 321 321, r44 -> p7 [p56] | MOV SAVE_PC
259: 318 321 324 324, r44 -> p7, r2 -> p9 [p54] | MOV LOAD
260: 319 324 325 325, r2 -> p9, r2 -> p9, r44 -> p45 [p7], r49 -> p49 [p12] | TEST AND
261: 320 325 326 326, r49 -> p49 | J JMP_IMM
262: 321 326 329 329, r2 -> p9, r45 -> p63 [p5] | CMP LOAD
263: 324 329 330 330, r45 -> p63, r3 -> p57, r44 -> p4 [p45], r49 -> p61 [p49] | CMP SUB
264: 325 330 331 331, r49 -> p61 | J JMP_IMM
265: 326 327 328 332, r13 -> p1, r13 -> p1, r44 -> p10 [p4], r49 -> p3 [p61] | TEST AND
266: 329 331 332 333, r49 -> p3 | J JMP_IMM
267: 330 332 335 335, r13 -> p1, r1 -> p50 [p15] | MOV LOAD
268: 331 335 336 336, r1 -> p50, r1 -> p50, r44 -> p55 [p10], r49 -> p6 [p3] | TEST AND
269: 332 336 337 337, r49 -> p6 | J JMP_IMM
270: 333 337 340 340, r1 -> p50, r2 -> p14 [p9] | MOV LOAD
271: 335 340 343 343, r2 -> p14, r45 -> p2 [p63] | CMP LOAD
272: 336 343 344 344, r45 -> p2, r44 -> p56 [p55], r49 -> p54 [p6] | CMP SUB_IMM
273: 337 344 345 345, r49 -> p54 | J JMP_IMM
274: 340 341 344 346, r1 -> p50, r1 -> p7 [p50] | MOV LOAD
275: 343 345 346 347, r1 -> p7, r1 -> p7, r44 -> p12 [p56], r49 -> p5 [p54] | TEST AND
276: 344 346 347 348, r49 -> p5 | J JMP_IMM
277: 345 347 350 350, r1 -> p7, r2 -> p45 [p14] | MOV LOAD
278: 346 350 353 353, r2 -> p45, r45 -> p49 [p2] | CMP LOAD
279: 347 353 354 354, r45 -> p49, r44 -> p4 [p12], r49 -> p61 [p5] | CMP SUB_IMM
280: 348 354 355 355, r49 -> p61 | J JMP_IMM
281: 350 351 354 356, r2 -> p45, r44 -> p15 [p4] | MOVZX LOAD
282: 353 355 356 357, r44 -> p15, r0 -> p10 [p52] | MOVZX ZEXT_BYTE_TO_DWORD
283: 354 356 359 359, r5 -> p60, r45 -> p3 [p49] | CMP LOAD
284: 355 359 360 360, r0 -> p10, r45 -> p3, r44 -> p9 [p15], r49 -> p63 [p61] | CMP SUB
285: 356 360 361 361, r49 -> p63 | J JMP_IMM
286: 357 358 361 362, r2 -> p45, r5 -> p55 [p60] | MOV LOAD
287: 359 361 362 363, r45 -> p6 [p3] | CMP SAVE_PC
288: 360 362 365 365, r45 -> p6, r45 -> p50 [p6] | CMP LOAD
289: 361 365 366 366, r5 -> p55, r45 -> p50, r44 -> p56 [p9], r49 -> p54 [p63] | CMP SUB
290: 362 366 367 367, r49 -> p54 | J JMP_IMM
291: 363 364 365 368, r5 -> p55, r0 -> p14 [p10] | MOV ADD
292: 365 367 368 369, r0 -> p14, r0 -> p2 [p14], r49 -> p12 [p54] | SHR SHR_IMM
293: 366 368 369 370, r0 -> p2, r5 -> p55, r0 -> p5 [p2], r49 -> p4 [p12] | XOR XOR
294: 367 369 370 371, r0 -> p5, r0 -> p52 [p5], r49 -> p49 [p4] | AND AND_IMM
295: 368 370 371 372, r0 -> p52, r0 -> p15 [p52], r49 -> p61 [p49] | SHL SHL_IMM
296: 369 371 374 374, r0 -> p15, r2 -> p60 [p45] | MOV LOAD
297: 370 372 373 375, r0 -> p15, r12 -> p3 [p13] | LEA LEA
298: 371 374 375 376, r2 -> p60, r2 -> p60, r44 -> p6 [p56], r49 -> p9 [p61] | TEST AND
299: 372 375 376 377, r49 -> p9 | J JMP_IMM
300: 374 376 379 379, r2 -> p60, r45 -> p63 [p50] | CMP LOAD
301: 375 379 380 380, r45 -> p63, r5 -> p55, r44 -> p10 [p6], r49 -> p14 [p9] | CMP SUB
302: 376 380 381 381, r49 -> p14 | J JMP_IMM
303: 377 378 379 382 | JMP JMP_IMM
304: 379 381 384 384, r2 -> p60, r12 -> p54 [p3] | MOV LOAD
305: 380 382 383 385, r44 -> p2 [p10] | MOV SAVE_PC
306: 381 383 384 386, r5 -> p55, r44 -> p2 | MOV STORE
307: 382 384 385 387, r44 -> p12 [p2] | MOV SAVE_PC
308: 384 385 386 388, r2 -> p60, r44 -> p12 | MOV STORE
309: 385 386 387 389, r12 -> p54, r0 -> p5 [p15] | MOVSX SEXT_DWORD_TO_QWORD
310: 386 387 388 390, r0 -> p5, r0 -> p5, r14 -> p4 [p62] | LEA LEA
311: 387 388 389 391, r14 -> p4, r14 -> p52 [p4], r49 -> p49 [p14] | SHL SHL_IMM
312: 388 389 390 392, r14 -> p52, r13 -> p45 [p1] | MOV ADD
313: 389 390 391 393, r44 -> p13 [p12] | ADD SAVE_PC
314: 390 391 394 394, r44 -> p13, r44 -> p56 [p13] | ADD LOAD
315: 391 394 395 395, r13 -> p45, r44 -> p56, r13 -> p61 [p45], r49 -> p50 [p49] | ADD ADD
316: 392 393 396 396, r2 -> p60, r45 -> p6 [p63] | CMP LOAD
317: 393 396 397 397, r45 -> p6, r5 -> p55, r44 -> p9 [p56], r49 -> p3 [p50] | CMP SUB
318: 394 397 398 398, r49 -> p3 | J JMP_IMM
319: 395 398 399 399, r45 -> p10 [p6] | CMP SAVE_PC
320: 396 399 402 402, r45 -> p10, r45 -> p2 [p10] | CMP LOAD
321: 397 402 403 403, r3 -> p57, r45 -> p2, r44 -> p15 [p9], r49 -> p62 [p3] | CMP SUB
322: 398 403 404 404, r49 -> p62 | J JMP_IMM
323: 399 400 401 405, r3 -> p57, r0 -> p4 [p5] | MOV ADD
324: 402 404 405 406, r0 -> p4, r0 -> p14 [p4], r49 -> p1 [p62] | SHR SHR_IMM
325: 403 405 406 407, r0 -> p14, r3 -> p57, r0 -> p12 [p14], r49 -> p13 [p1] | XOR XOR
326: 404 406 407 408, r0 -> p12, r0 -> p45 [p12], r49 -> p49 [p13] | AND AND_IMM
327: 405 407 408 409, r0 -> p45, r0 -> p63 [p45], r49 -> p56 [p49] | SHL SHL_IMM
328: 406 408 411 411, r0 -> p63, r2 -> p50 [p60] | MOV LOAD
329: 407 409 410 412, r0 -> p63, r5 -> p6 [p55] | LEA LEA
330: 408 411 412 413, r2 -> p50, r2 -> p50, r44 -> p10 [p15], r49 -> p9 [p56] | TEST AND
331: 409 412 413 414, r49 -> p9 | J JMP_IMM
332: 411 413 416 416, r2 -> p50, r45 -> p3 [p2] | CMP LOAD
333: 412 416 417 417, r3 -> p57, r45 -> p3, r44 -> p5 [p10], r49 -> p4 [p9] | CMP SUB
334: 413 417 418 418, r49 -> p4 | J JMP_IMM
335: 414 415 416 419, r44 -> p62 [p5] | MOV SAVE_PC
336: 416 418 419 420, r3 -> p57, r44 -> p62 | MOV STORE
337: 417 419 420 421, r44 -> p14 [p62] | MOV SAVE_PC
338: 418 420 421 422, r2 -> p50, r44 -> p14 | MOV STORE
339: 419 421 422 423, r12 -> p54, r2 -> p50 | MOV STORE
340: 420 422 425 425, r13 -> p61, r2 -> p1 [p50] | MOV LOAD
341: 421 423 426 426, r13 -> p61, r7 -> p12 [p53] | MOV LOAD
342: 422 425 426 427, r2 -> p1, r44 -> p13 [p14], r49 -> p45 [p4] | CMP SUB_IMM
343: 423 426 427 428, r49 -> p45 | J JMP_IMM
344: 425 427 428 429, r3 -> p57, r44 -> p49 [p13], r49 -> p60 [p45] | CMP SUB_IMM
345: 426 428 429 430, r49 -> p60 | J JMP_IMM
346: 427 429 430 431, r2 -> p1, r44 -> p55 [p49], r49 -> p15 [p60] | CMP SUB_IMM
347: 428 430 431 432, r2 -> p1, r1 -> p56 [p7] | MOV ADD
348: 429 431 432 433, r3 -> p57, r8 -> p2 [p8] | MOV ADD
349: 430 432 433 434, r49 -> p15 | J JMP_IMM
350: 431 433 434 435, r44 -> p10 [p55] | MOV SAVE_PC
351: 432 434 437 437, r44 -> p10, r10 -> p9 [p58] | MOV LOAD
352: 433 435 436 438, r44 -> p5 [p10] | MOV SAVE_PC
353: 434 436 439 439, r44 -> p5, r6 -> p62 [p44] | MOV LOAD
354: 435 437 440 440, r8 -> p2, r10 -> p9, r1 -> p50 [p56] | MOV LOAD
355: 437 440 443 443, r1 -> p50, r44 -> p53 [p5] | MOVSX LOAD
356: 438 443 444 444, r44 -> p53, r0 -> p14 [p63] | MOVSX SEXT_DWORD_TO_QWORD
357: 439 444 447 447, r0 -> p14, r6 -> p62, r9 -> p4 [p0] | MOV LOAD
358: 440 441 442 448, r45 -> p13 [p3] | CMP SAVE_PC
359: 443 445 448 449, r45 -> p13, r45 -> p45 [p13] | CMP LOAD
360: 444 448 449 450, r9 -> p4, r45 -> p45, r44 -> p49 [p53], r49 -> p60 [p15] | CMP SUB
361: 447 449 450 451, r49 -> p60 | J JMP_IMM
362: 448 450 453 453, r1 -> p50, r44 -> p7 [p49] | MOVSX LOAD
363: 449 453 454 454, r44 -> p7, r0 -> p8 [p14] | MOVSX SEXT_DWORD_TO_QWORD
364: 450 454 457 457, r0 -> p8, r6 -> p62, r0 -> p55 [p8] | MOV LOAD
365: 451 452 453 458, r45 -> p58 [p45] | CMP SAVE_PC
366: 453 455 458 459, r45 -> p58, r45 -> p10 [p58] | CMP LOAD
367: 454 458 459 460, r0 -> p55, r45 -> p10, r44 -> p44 [p7], r49 -> p56 [p60] | CMP SUB
368: 457 459 460 461, r49 -> p56 | J JMP_IMM
369: 458 460 461 462, r7 -> p12, r44 -> p5 [p44], r49 -> p63 [p56] | CMP SUB_IMM
370: 459 461 462 463, r49 -> p63 | J JMP_IMM
371: 460 462 463 464, r44 -> p0 [p5] | MOV SAVE_PC
372: 461 463 466 466, r44 -> p0, r6 -> p3 [p62] | MOV LOAD
373: 462 464 465 467, r7 -> p12, r0 -> p13 [p55] | MOV ADD
374: 463 465 466 468, r0 -> p13, r0 -> p53 [p13], r49 -> p15 [p63] | SHL SHL_IMM
375: 464 466 467 469 | JMP JMP_IMM
376: 466 467 468 470, r0 -> p53, r6 -> p3, r2 -> p49 [p1] | LEA LEA
377: 467 468 469 471, r8 -> p2, r6 -> p3, r1 -> p14 [p50] | LEA LEA
378: 468 469 472 472, r2 -> p49, r0 -> p8 [p53] | MOV LOAD
379: 469 472 473 473, r0 -> p8, r1 -> p14 | MOV STORE
380: 470 471 474 474, r2 -> p49, r0 -> p45 [p8] | MOV LOAD
381: 471 474 475 475, r0 -> p45, r0 -> p45, r44 -> p58 [p0], r49 -> p7 [p15] | TEST AND
382: 472 475 476 476, r49 -> p7 | J JMP_IMM
383: 473 476 477 477, r44 -> p60 [p58] | MOV SAVE_PC
384: 474 477 480 480, r44 -> p60, r0 -> p44 [p45] | MOV LOAD
385: 475 480 481 481, r14 -> p52, r0 -> p44, r44 -> p56 [p60] | MOV LEA
386: 476 481 482 482, r3 -> p57, r44 -> p56 | MOV STORE
387: 477 478 479 483 | JMP JMP_IMM
388: 480 482 483 484, r0 -> p5 [p44] | MOV ADD_IMM
389: 481 483 484 485, r3 -> p57, r2 -> p49 | MOV STORE
390: 482 484 485 486, r7 -> p12, r1 -> p14 | MOV STORE
391: 483 485 486 487 | JMP JMP_IMM
392: 484 486 489 489, r4 -> p11, r3 -> p62 [p57] | POP LOAD
393: 485 487 488 490, r4 -> p11, r4 -> p55 [p11] | POP ADD_IMM
394: 486 488 491 491, r4 -> p55, r5 -> p13 [p6] | POP LOAD
395: 487 489 490 492, r4 -> p55, r4 -> p63 [p55] | POP ADD_IMM
396: 489 490 493 493, r4 -> p63, r12 -> p1 [p54] | POP LOAD
397: 490 491 492 494, r4 -> p63, r4 -> p50 [p63] | POP ADD_IMM
398: 491 492 495 495, r4 -> p50, r13 -> p53 [p61] | POP LOAD
399: 492 493 494 496, r4 -> p50, r4 -> p8 [p50] | POP ADD_IMM
400: 493 494 497 497, r4 -> p8, r14 -> p0 [p52] | POP LOAD
401: 494 495 496 498, r4 -> p8, r4 -> p15 [p8] | POP ADD_IMM
402: 495 496 499 499, r4 -> p15, r44 -> p58 [p56] | RET LOAD
403: 496 497 498 500, r4 -> p15, r4 -> p45 [p15] | RET ADD_IMM
404: 497 499 500 501, r44 -> p58 | RET JMP_REG
405: 498 500 501 502, r0 -> p5, r0 -> p5, r44 -> p60 [p58], r49 -> p44 [p7] | TEST AND
406: 499 501 502 503, r49 -> p44 | J JMP_IMM
407: 500 502 503 504, r12 -> p1, r7 -> p57 [p12] | MOV ADD
408: 501 503 504 505, r44 -> p11 [p60] | CALL SAVE_PC
409: 502 504 505 506, r4 -> p45, r4 -> p6 [p45] | CALL SUB_IMM
410: 503 505 506 507, r44 -> p11, r4 -> p6 | CALL STORE
411: 504 506 507 508 | CALL JMP_IMM
412: 505 507 508 509, r15 -> p59, r4 -> p6 | PUSH STORE
413: 506 508 509 510, r4 -> p6, r4 -> p55 [p6] | PUSH SUB_IMM
414: 507 509 510 511, r7 -> p57, r15 -> p54 [p59] | MOV ADD
415: 508 510 511 512, r14 -> p0, r4 -> p55 | PUSH STORE
416: 509 511 512 513, r4 -> p55, r4 -> p63 [p55] | PUSH SUB_IMM
417: 510 512 513 514, r13 -> p53, r4 -> p63 | PUSH STORE
418: 511 513 514 515, r4 -> p63, r4 -> p61 [p63] | PUSH SUB_IMM
419: 512 514 515 516, r12 -> p1, r4 -> p61 | PUSH STORE
420: 513 515 516 517, r4 -> p61, r4 -> p50 [p61] | PUSH SUB_IMM
421: 514 516 517 518, r5 -> p13, r4 -> p50 | PUSH STORE
422: 515 517 518 519, r4 -> p50, r4 -> p52 [p50] | PUSH SUB_IMM
423: 516 518 519 520, r3 -> p62, r4 -> p52 | PUSH STORE
424: 517 519 520 521, r4 -> p52, r4 -> p8 [p52] | PUSH SUB_IMM
425: 518 520 521 522, r4 -> p8, r4 -> p56 [p8], r49 -> p15 [p44] | SUB SUB_IMM
426: 519 521 524 524, r7 -> p57, r45 -> p58 [p10] | CMP LOAD
427: 520 524 525 525, r45 -> p58, r44 -> p7 [p11], r49 -> p12 [p15] | CMP SUB_IMM
428: 521 525 526 526, r49 -> p12 | J JMP_IMM
429: 522 523 526 527, r15 -> p54, r45 -> p60 [p58] | CMP LOAD
430: 524 526 527 528, r45 -> p60, r44 -> p45 [p7], r49 -> p6 [p12] | CMP SUB_IMM
431: 525 527 528 529, r49 -> p6 | J JMP_IMM
432: 526 528 531 531, r15 -> p54, r3 -> p59 [p62] | MOV LOAD
433: 527 529 530 532, r45 -> p55 [p60] | CMP SAVE_PC
434: 528 530 533 533, r45 -> p55, r45 -> p63 [p55] | CMP LOAD
435: 529 533 534 534, r3 -> p59, r45 -> p63, r44 -> p61 [p45], r49 -> p50 [p6] | CMP SUB
436: 531 534 535 535, r49 -> p50 | J JMP_IMM
437: 532 535 536 536, r44 -> p52 [p61] | MOV SAVE_PC
438: 533 536 539 539, r44 -> p52, r2 -> p8 [p49] | MOV LOAD
439: 534 539 540 540, r2 -> p8, r2 -> p8, r44 -> p44 [p52], r49 -> p10 [p50] | TEST AND
440: 535 540 541 541, r49 -> p10 | J JMP_IMM
441: 536 541 544 544, r2 -> p8, r5 -> p11 [p13] | MOV LOAD
442: 539 544 545 545, r5 -> p11, r5 -> p11, r44 -> p15 [p44], r49 -> p58 [p10] | TEST AND
443: 540 545 546 546, r49 -> p58 | J JMP_IMM
444: 541 542 543 547, r4 -> p56, r4 -> p7 [p56], r49 -> p12 [p58] | ADD ADD_IMM
445: 544 546 549 549, r4 -> p7, r3 -> p62 [p59] | POP LOAD
446: 545 547 548 550, r4 -> p7, r4 -> p60 [p7] | POP ADD_IMM
447: 546 548 551 551, r4 -> p60, r5 -> p55 [p11] | POP LOAD
448: 547 549 550 552, r4 -> p60, r4 -> p45 [p60] | POP ADD_IMM
449: 549 550 553 553, r4 -> p45, r12 -> p6 [p1] | POP LOAD
450: 550 551 552 554, r4 -> p45, r4 -> p61 [p45] | POP ADD_IMM
451: 551 552 555 555, r4 -> p61, r13 -> p49 [p53] | POP LOAD
452: 552 553 554 556, r4 -> p61, r4 -> p52 [p61] | POP ADD_IMM
453: 553 554 557 557, r4 -> p52, r14 -> p50 [p0] | POP LOAD
454: 554 555 556 558, r4 -> p52, r4 -> p13 [p52] | POP ADD_IMM
455: 555 556 559 559, r4 -> p13, r15 -> p44 [p54] | POP LOAD
456: 556 557 558 560, r4 -> p13, r4 -> p10 [p13] | POP ADD_IMM
457: 557 558 561 561, r4 -> p10, r44 -> p56 [p15] | RET LOAD
458: 558 559 560 562, r4 -> p10, r4 -> p58 [p10] | RET ADD_IMM
459: 559 561 562 563, r44 -> p56 | RET JMP_REG
460: 560 562 565 565, r12 -> p6, r45 -> p59 [p63] | CMP LOAD
461: 561 565 566 566, r45 -> p59, r44 -> p7 [p56], r49 -> p11 [p12] | CMP SUB_IMM
462: 562 566 567 567, r49 -> p11 | J JMP_IMM
463: 563 564 567 568, r12 -> p6, r3 -> p60 [p62] | MOV LOAD
464: 565 567 568 569, r3 -> p60, r44 -> p1 [p7], r49 -> p45 [p11] | CMP SUB_IMM
465: 566 568 569 570, r49 -> p45 | J JMP_IMM
466: 567 569 570 571, r45 -> p53 [p59] | CMP SAVE_PC
467: 568 570 573 573, r45 -> p53, r45 -> p61 [p53] | CMP LOAD
468: 569 573 574 574, r3 -> p60, r45 -> p61, r44 -> p0 [p1], r49 -> p52 [p45] | CMP SUB
469: 570 574 575 575, r49 -> p52 | J JMP_IMM
470: 571 572 573 576, r44 -> p54 [p0] | MOV SAVE_PC
471: 573 575 578 578, r44 -> p54, r2 -> p13 [p8] | MOV LOAD
472: 574 578 579 579, r2 -> p13, r2 -> p13, r44 -> p15 [p54], r49 -> p10 [p52] | TEST AND
473: 575 579 580 580, r49 -> p10 | J JMP_IMM
474: 576 580 583 583, r2 -> p13, r0 -> p63 [p5] | MOV LOAD
475: 578 583 584 584, r0 -> p63, r0 -> p56 [p63], r49 -> p12 [p10] | AND AND_IMM
476: 579 581 584 585, r5 -> p55, r2 -> p62 [p13] | MOV LOAD
477: 580 584 585 586, r0 -> p56, r2 -> p62 | MOV STORE
478: 583 585 586 587 | JMP JMP_IMM
479: 584 586 589 589, r14 -> p50, r45 -> p7 [p61] | CMP LOAD
480: 585 589 590 590, r45 -> p7, r44 -> p11 [p15], r49 -> p59 [p12] | CMP SUB_IMM
481: 586 590 591 591, r49 -> p59 | J JMP_IMM
482: 587 588 591 592, r5 -> p55, r0 -> p53 [p56] | MOV LOAD
483: 589 591 594 594, r12 -> p6, r44 -> p1 [p11] | MOVZX LOAD
484: 590 594 595 595, r44 -> p1, r1 -> p45 [p14] | MOVZX ZEXT_BYTE_TO_DWORD
485: 591 592 593 596, r12 -> p6, r7 -> p0 [p57] | MOV ADD
486: 592 593 596 597, r0 -> p53, r2 -> p8 [p62] | MOV LOAD
487: 594 595 598 598, r0 -> p53, r6 -> p54 [p3] | MOV LOAD
488: 595 596 597 599, r44 -> p52 [p1] | CALL SAVE_PC
489: 596 597 598 600, r4 -> p58, r4 -> p5 [p58] | CALL SUB_IMM
490: 597 598 599 601, r44 -> p52, r4 -> p5 | CALL STORE
491: 598 599 600 602 | CALL JMP_IMM
492: 599 600 601 603, r15 -> p44, r4 -> p5 | PUSH STORE
493: 600 601 602 604, r4 -> p5, r4 -> p63 [p5] | PUSH SUB_IMM
494: 601 602 603 605, r2 -> p8, r15 -> p10 [p44] | MOV ADD
495: 602 603 604 606, r14 -> p50, r4 -> p63 | PUSH STORE
496: 603 604 605 607, r4 -> p63, r4 -> p13 [p63] | PUSH SUB_IMM
497: 604 605 606 608, r6 -> p54, r14 -> p61 [p50] | MOV ADD
498: 605 606 607 609, r13 -> p49, r4 -> p13 | PUSH STORE
499: 606 607 608 610, r4 -> p13, r4 -> p15 [p13] | PUSH SUB_IMM
500: 607 608 609 611, r12 -> p6, r4 -> p15 | PUSH STORE
501: 608 609 610 612, r4 -> p15, r4 -> p12 [p15] | PUSH SUB_IMM
502: 609 610 611 613, r5 -> p55, r4 -> p12 | PUSH STORE
503: 610 611 612 614, r4 -> p12, r4 -> p56 [p12] | PUSH SUB_IMM
504: 611 612 613 615, r7 -> p0, r5 -> p11 [p55] | MOV ADD
505: 612 613 614 616, r3 -> p60, r4 -> p56 | PUSH STORE
506: 613 614 615 617, r4 -> p56, r4 -> p14 [p56] | PUSH SUB_IMM
507: 614 615 616 618, r4 -> p14, r4 -> p57 [p14], r49 -> p62 [p59] | SUB SUB_IMM
508: 615 616 619 619, r7 -> p0, r45 -> p3 [p7] | CMP LOAD
509: 616 619 620 620, r45 -> p3, r44 -> p1 [p52], r49 -> p58 [p62] | CMP SUB_IMM
510: 617 618 619 621, r1 -> p45, r4 -> p57 | MOV STORE
511: 618 620 621 622, r49 -> p58 | J JMP_IMM
512: 619 621 624 624, r7 -> p0, r3 -> p5 [p60] | MOV LOAD
513: 620 622 623 625, r45 -> p44 [p3] | CMP SAVE_PC
514: 621 623 626 626, r45 -> p44, r45 -> p63 [p44] | CMP LOAD
515: 622 626 627 627, r3 -> p5, r45 -> p63, r44 -> p50 [p1], r49 -> p13 [p58] | CMP SUB
516: 624 627 628 628, r49 -> p13 | J JMP_IMM
517: 625 628 629 629, r44 -> p15 [p50] | MOV SAVE_PC
518: 626 629 632 632, r44 -> p15, r2 -> p12 [p8] | MOV LOAD
519: 627 632 633 633, r2 -> p12, r2 -> p12, r44 -> p55 [p15], r49 -> p56 [p13] | TEST AND
520: 628 633 634 634, r49 -> p56 | J JMP_IMM
521: 629 634 637 637, r2 -> p12, r45 -> p14 [p63] | CMP LOAD
522: 632 637 638 638, r45 -> p14, r3 -> p5, r44 -> p59 [p55], r49 -> p7 [p56] | CMP SUB
523: 633 638 639 639, r49 -> p7 | J JMP_IMM
524: 634 635 638 640, r5 -> p11, r45 -> p52 [p14] | CMP LOAD
525: 637 639 640 641, r45 -> p52, r44 -> p62 [p59], r49 -> p60 [p7] | CMP SUB_IMM
526: 638 640 641 642, r49 -> p60 | J JMP_IMM
527: 639 641 642 643, r3 -> p5, r44 -> p3 [p62], r49 -> p44 [p60] | CMP SUB_IMM
528: 640 642 643 644, r49 -> p44 | J JMP_IMM
529: 641 643 644 645, r44 -> p1 [p3] | MOV SAVE_PC
530: 642 644 647 647, r44 -> p1, r13 -> p58 [p49] | MOV LOAD
531: 643 647 648 648, r13 -> p58, r13 -> p58, r44 -> p50 [p1], r49 -> p8 [p44] | TEST AND
532: 644 648 649 649, r49 -> p8 | J JMP_IMM
533: 645 649 652 652, r13 -> p58, r0 -> p15 [p53] | MOV LOAD
534: 647 650 651 653, r44 -> p13 [p50] | MOV SAVE_PC
535: 648 652 653 654, r0 -> p15, r44 -> p13 | MOV STORE
536: 649 651 652 655, r5 -> p11, r13 -> p58 | MOV STORE
537: 652 653 654 656, r13 -> p58 | MOV STORE
538: 653 654 657 657, r5 -> p11, r44 -> p63 [p13] | MOVZX LOAD
539: 654 657 658 658, r44 -> p63, r0 -> p55 [p15] | MOVZX ZEXT_WORD_TO_DWORD
540: 655 658 659 659, r0 -> p55, r44 -> p56 [p63], r49 -> p14 [p8] | CMP SUB_IMM
541: 656 659 660 660, r49 -> p14 | J JMP_IMM
542: 657 660 661 661, r0 -> p59 [p55] | XOR ADD
543: 658 661 662 662 | JMP JMP_IMM
544: 659 662 663 663, r0 -> p59, r13 -> p58 | MOV STORE
545: 660 663 664 664, r5 -> p11, r7 -> p7 [p0] | MOV ADD
546: 661 664 665 665, r44 -> p62 [p56] | CALL SAVE_PC
547: 662 665 666 666, r4 -> p57, r4 -> p60 [p57] | CALL SUB_IMM
548: 663 666 667 667, r44 -> p62, r4 -> p60 | CALL STORE
549: 664 667 668 668 | CALL JMP_IMM
550: 665 668 669 669, r12 -> p6, r4 -> p60 | PUSH STORE
551: 666 669 670 670, r4 -> p60, r4 -> p3 [p60] | PUSH SUB_IMM
552: 667 670 671 671, r5 -> p11, r4 -> p3 | PUSH STORE
553: 668 671 672 672, r4 -> p3, r4 -> p49 [p3] | PUSH SUB_IMM
554: 669 672 673 673, r5 -> p1 [p11] | XOR ADD
555: 670 673 674 674, r3 -> p5, r4 -> p49 | PUSH STORE
556: 671 674 675 675, r4 -> p49, r4 -> p44 [p49] | PUSH SUB_IMM
557: 672 675 676 676, r3 -> p53 [p5] | XOR ADD
558: 673 676 677 677, r4 -> p44, r4 -> p50 [p44], r49 -> p13 [p14] | SUB SUB_IMM
559: 674 677 678 678, r4 -> p50, r12 -> p15 [p6] | LEA LEA
560: 675 678 679 679, r7 -> p7, r4 -> p50 | MOV STORE
561: 676 679 680 680, r12 -> p15, r7 -> p63 [p7] | MOV ADD
562: 677 680 681 681, r44 -> p8 [p62] | CALL SAVE_PC
563: 678 681 682 682, r4 -> p50, r4 -> p55 [p50] | CALL SUB_IMM
564: 679 682 683 683, r44 -> p8, r4 -> p55 | CALL STORE
565: 680 683 684 684 | CALL JMP_IMM
566: 681 684 685 685, r7 -> p63, r0 -> p0 [p59] | MOV ADD
567: 682 685 686 686, r7 -> p63 | MOV STORE
568: 683 686 687 687, r7 -> p63 | MOV STORE
569: 684 687 690 690, r4 -> p55, r44 -> p56 [p8] | RET LOAD
570: 685 688 689 691, r4 -> p55, r4 -> p57 [p55] | RET ADD_IMM
571: 686 690 691 692, r44 -> p56 | RET JMP_REG
572: 687 689 690 693, r4 -> p57, r7 -> p60 [p63] | LEA LEA
573: 690 691 692 694, r12 -> p15, r2 -> p3 [p12] | MOV ADD
574: 691 692 693 695, r6 -> p11 [p54] | MOV ADD_IMM
575: 692 693 694 696, r44 -> p49 [p56] | CALL SAVE_PC
576: 693 694 695 697, r4 -> p57, r4 -> p5 [p57] | CALL SUB_IMM
577: 694 695 696 698, r44 -> p49, r4 -> p5 | CALL STORE
578: 695 696 697 699 | CALL JMP_IMM
579: 696 697 698 700, r15 -> p10, r4 -> p5 | PUSH STORE
580: 697 698 699 701, r4 -> p5, r4 -> p44 [p5] | PUSH SUB_IMM
581: 698 699 700 702, r6 -> p11, r15 -> p14 [p10] | MOV ADD
582: 699 700 701 703, r2 -> p3, r6 -> p6 [p11] | MOV ADD
583: 700 701 702 704, r14 -> p61, r4 -> p44 | PUSH STORE
584: 701 702 703 705, r4 -> p44, r4 -> p7 [p44] | PUSH SUB_IMM
585: 702 703 704 706, r2 -> p3, r14 -> p62 [p61] | MOV ADD
586: 703 704 705 707, r13 -> p58, r4 -> p7 | PUSH STORE
587: 704 705 706 708, r4 -> p7, r4 -> p50 [p7] | PUSH SUB_IMM
588: 705 706 707 709, r12 -> p15, r4 -> p50 | PUSH STORE
589: 706 707 708 710, r4 -> p50, r4 -> p59 [p50] | PUSH SUB_IMM
590: 707 708 709 711, r5 -> p1, r4 -> p59 | PUSH STORE
591: 708 709 710 712, r4 -> p59, r4 -> p8 [p59] | PUSH SUB_IMM
592: 709 710 711 713, r3 -> p53, r4 -> p8 | PUSH STORE
593: 710 711 712 714, r4 -> p8, r4 -> p55 [p8] | PUSH SUB_IMM
594: 711 712 713 715, r4 -> p55, r4 -> p63 [p55], r49 -> p12 [p13] | SUB SUB_IMM
595: 712 713 714 716, r7 -> p60, r4 -> p63 | MOV STORE
596: 713 714 715 717, r44 -> p54 [p49] | CALL SAVE_PC
597: 714 715 716 718, r4 -> p63, r4 -> p56 [p63] | CALL SUB_IMM
598: 715 716 717 719, r44 -> p54, r4 -> p56 | CALL STORE
599: 716 717 718 720, r15 -> p14 | CALL JMP_REG
600: 717 718 719 721, r4 -> p56, r4 -> p57 [p56], r49 -> p5 [p12] | SUB SUB_IMM
601: 718 719 722 722, r7 -> p60, r0 -> p10 [p0] | MOV LOAD
602: 719 720 721 723, r6 -> p6, r2 -> p11 [p3] | MOV ADD
603: 720 722 723 724, r0 -> p10, r0 -> p10, r44 -> p44 [p54], r49 -> p61 [p5] | TEST AND
604: 721 723 724 725, r49 -> p61 | J JMP_IMM
605: 722 724 727 727, r0 -> p10, r45 -> p7 [p52] | CMP LOAD
606: 723 727 728 728, r45 -> p7, r44 -> p50 [p44], r49 -> p59 [p61] | CMP SUB_IMM
607: 724 728 729 729, r49 -> p59 | J JMP_IMM
608: 725 726 729 730, r0 -> p10, r6 -> p8 [p6] | MOV LOAD
609: 727 729 730 731, r2 -> p11, r7 -> p55 [p60] | MOV ADD
610: 728 730 731 732, r44 -> p13 [p50] | CALL SAVE_PC
611: 729 731 732 733, r4 -> p57, r4 -> p49 [p57] | CALL SUB_IMM
612: 730 732 733 734, r44 -> p13, r4 -> p49 | CALL STORE
613: 731 733 734 735 | CALL JMP_IMM
614: 732 734 735 736, r12 -> p15, r4 -> p49 | PUSH STORE
615: 733 735 736 737, r4 -> p49, r4 -> p63 [p49] | PUSH SUB_IMM
616: 734 736 737 738, r6 -> p8, r12 -> p56 [p15] | MOV ADD
617: 735 737 738 739, r12 -> p56, r12 -> p12 [p56], r49 -> p0 [p59] | SHR SHR_IMM
618: 736 738 739 740, r5 -> p1, r4 -> p63 | PUSH STORE
619: 737 739 740 741, r4 -> p63, r4 -> p3 [p63] | PUSH SUB_IMM
620: 738 740 741 742, r7 -> p55, r5 -> p54 [p1] | MOV ADD
621: 739 741 742 743, r3 -> p53, r4 -> p3 | PUSH STORE
622: 740 742 743 744, r4 -> p3, r4 -> p5 [p3] | PUSH SUB_IMM
623: 741 743 746 746, r7 -> p55, r7 -> p52 [p55] | MOV LOAD
624: 742 744 745 747, r6 -> p8, r3 -> p44 [p53] | MOV ADD
625: 743 746 747 748, r7 -> p52, r7 -> p52, r44 -> p61 [p13], r49 -> p6 [p0] | TEST AND
626: 744 747 748 749, r49 -> p6 | J JMP_IMM
627: 746 748 749 750, r44 -> p60 [p61] | MOV SAVE_PC
628: 747 749 752 752, r44 -> p60, r6 -> p50 [p8] | MOV LOAD
629: 748 752 753 753, r6 -> p50, r6 -> p50, r44 -> p57 [p60], r49 -> p49 [p6] | TEST AND
630: 749 753 754 754, r49 -> p49 | J JMP_IMM
631: 750 754 757 757, r6 -> p50, r0 -> p15 [p10] | MOV LOAD
632: 752 755 756 758, r44 -> p56 [p57] | MOV SAVE_PC
633: 753 757 758 759, r0 -> p15, r44 -> p56 | MOV STORE
634: 754 756 757 760, r3 -> p44, r2 -> p59 [p11] | MOV ADD
635: 757 758 759 761, r3 -> p44, r3 -> p63 [p44], r49 -> p1 [p49] | AND AND_IMM
636: 758 759 760 762, r0 -> p3 [p15] | MOV ADD_IMM
637: 759 760 761 763, r2 -> p59, r2 -> p55 [p59], r49 -> p53 [p1] | SHR SHR_IMM
638: 760 761 762 764, r3 -> p63, r1 -> p13 [p45] | MOV ADD
639: 761 762 763 765, r6 -> p50 | MOV STORE
640: 762 763 764 766, r6 -> p50 | MOV STORE
641: 763 764 765 767, r2 -> p55, r2 -> p0 [p55], r49 -> p61 [p53] | AND AND_IMM
642: 764 765 766 768, r0 -> p3, r1 -> p13, r0 -> p8 [p3], r49 -> p60 [p61] | SHL SHL
643: 765 766 769 769, r5 -> p54, r45 -> p6 [p7] | CMP LOAD
644: 766 769 770 770, r45 -> p6, r44 -> p10 [p56], r49 -> p57 [p60] | CMP SUB
645: 767 768 769 771, r12 -> p12, r6 -> p50 | MOV STORE
646: 768 770 771 772, r2 -> p0, r6 -> p50, r44 -> p11 [p10] | MOV LEA
647: 769 771 772 773, r0 -> p8, r44 -> p11 | MOV STORE
648: 770 772 773 774, r49 -> p57 | J JMP_IMM
649: 771 773 774 775, r6 -> p50 | MOV STORE
650: 772 774 775 776, r6 -> p50 | MOV STORE
651: 773 775 776 777, r6 -> p50, r5 -> p54 | MOV STORE
652: 774 776 777 778 | JMP JMP_IMM
653: 775 777 778 779, r6 -> p50, r5 -> p54 | MOV STORE
654: 776 778 779 780, r12 -> p12, r5 -> p54 | MOV STORE
655: 777 779 782 782, r4 -> p5, r3 -> p44 [p63] | POP LOAD
656: 778 780 781 783, r4 -> p5, r4 -> p49 [p5] | POP ADD_IMM
657: 779 781 784 784, r4 -> p49, r5 -> p15 [p54] | POP LOAD
658: 780 782 783 785, r4 -> p49, r4 -> p59 [p49] | POP ADD_IMM
659: 782 783 786 786, r4 -> p59, r12 -> p1 [p12] | POP LOAD
660: 783 784 785 787, r4 -> p59, r4 -> p45 [p59] | POP ADD_IMM
661: 784 785 788 788, r4 -> p45, r44 -> p55 [p11] | RET LOAD
662: 785 786 787 789, r4 -> p45, r4 -> p53 [p45] | RET ADD_IMM
663: 786 788 789 790, r44 -> p55 | RET JMP_REG
664: 787 789 790 791, r0 -> p3 [p8] | XOR ADD
665: 788 790 791 792, r4 -> p53, r4 -> p61 [p53], r49 -> p7 [p57] | ADD ADD_IMM
666: 789 791 794 794, r4 -> p61, r44 -> p56 [p55] | RET LOAD
667: 790 792 793 795, r4 -> p61, r4 -> p60 [p61] | RET ADD_IMM
668: 791 794 795 796, r44 -> p56 | RET JMP_REG
669: 792 793 794 797, r0 -> p3, r4 -> p60 | MOV STORE
670: 794 795 796 798, r0 -> p3, r0 -> p10 [p3], r49 -> p63 [p7] | ADD ADD_IMM
671: 795 796 797 799, r49 -> p63 | J JMP_IMM
672: 796 797 800 800, r4 -> p60, r11 -> p5 [p51] | MOV LOAD
673: 797 800 801 801, r11 -> p5, r11 -> p5, r44 -> p54 [p56], r49 -> p49 [p63] | TEST AND
674: 798 801 802 802, r49 -> p49 | J JMP_IMM
675: 799 802 805 805, r4 -> p60, r2 -> p12 [p0] | MOV LOAD
676: 800 805 808 808, r2 -> p12, r0 -> p59 [p10] | MOV LOAD
677: 801 808 809 809, r0 -> p59, r0 -> p59, r44 -> p11 [p54], r49 -> p45 [p49] | TEST AND
678: 802 809 810 810, r49 -> p45 | J JMP_IMM
679: 805 810 813 813, r0 -> p59, r44 -> p8 [p11] | MOVZX LOAD
680: 808 813 814 814, r44 -> p8, r0 -> p53 [p59] | MOVZX ZEXT_WORD_TO_DWORD
681: 809 814 817 817, r0 -> p53, r1 -> p57 [p13] | MOV LOAD
682: 810 815 818 818, r0 -> p53, r44 -> p55 [p8] | MOVZX LOAD
683: 813 818 819 819, r44 -> p55, r0 -> p61 [p53] | MOVZX ZEXT_BYTE_TO_DWORD
684: 814 817 818 820, r1 -> p57, r4 -> p60 | MOV STORE
685: 817 819 820 821, r0 -> p61, r0 -> p61, r44 -> p3 [p55], r49 -> p7 [p45] | TEST AND
686: 818 820 821 822, r49 -> p7 | J JMP_IMM
687: 819 821 822 823, r0 -> p61, r0 -> p51 [p61], r49 -> p56 [p7] | SUB SUB_IMM
688: 820 822 823 824, r4 -> p60 | MOV STORE
689: 821 823 824 825, r0 -> p51, r0 -> p63 [p51], r49 -> p0 [p56] | ADD ADD_IMM
690: 822 824 825 826, r0 -> p63, r4 -> p60 | MOV STORE
691: 823 825 828 828, r4 -> p60, r3 -> p10 [p44] | MOV LOAD
692: 824 826 829 829, r4 -> p60, r1 -> p54 [p57] | MOV LOAD
693: 825 827 830 830, r4 -> p60, r2 -> p49 [p12] | MOV LOAD
694: 826 829 832 832, r1 -> p54, r3 -> p10, r44 -> p11 [p3] | MOVZX LOAD
695: 828 832 833 833, r44 -> p11, r0 -> p59 [p63] | MOVZX ZEXT_BYTE_TO_DWORD
696: 829 833 834 834, r0 -> p59, r44 -> p13 [p11], r49 -> p8 [p0] | CMP SUB_IMM
697: 830 834 835 835, r49 -> p8 | J JMP_IMM
698: 832 835 836 836, r0 -> p59, r44 -> p53 [p13], r49 -> p55 [p8] | CMP SUB_IMM
699: 833 836 837 837, r49 -> p55 | J JMP_IMM
700: 834 837 838 838, r0 -> p59, r44 -> p45 [p53], r49 -> p61 [p55] | CMP SUB_IMM
701: 835 838 839 839, r49 -> p61 | J JMP_IMM
702: 836 839 842 842, r4 -> p60, r45 -> p7 [p6] | ADD LOAD
703: 837 842 843 843, r45 -> p7, r44 -> p51 [p45], r49 -> p56 [p61] | ADD ADD_IMM
704: 838 843 844 844, r44 -> p51, r4 -> p60 | ADD STORE
705: 839 840 843 845, r4 -> p60, r0 -> p44 [p59] | MOV LOAD
706: 842 844 847 847, r4 -> p60, r45 -> p57 [p7] | CMP LOAD
707: 843 847 848 848, r45 -> p57, r0 -> p44, r44 -> p12 [p51], r49 -> p3 [p56] | CMP SUB
708: 844 848 849 849, r49 -> p3 | J JMP_IMM
709: 845 846 849 850, r4 -> p60, r3 -> p63 [p10] | MOV LOAD
710: 847 849 852 852, r4 -> p60, r1 -> p11 [p54] | MOV LOAD
711: 848 850 853 853, r4 -> p60, r2 -> p0 [p49] | MOV LOAD
712: 849 852 855 855, r1 -> p11, r3 -> p63, r44 -> p13 [p12] | MOVZX LOAD
713: 850 855 856 856, r44 -> p13, r0 -> p8 [p44] | MOVZX ZEXT_BYTE_TO_DWORD
714: 852 856 857 857, r0 -> p8, r44 -> p53 [p13], r49 -> p55 [p3] | CMP SUB_IMM
715: 853 857 858 858, r49 -> p55 | J JMP_IMM
716: 855 858 859 859, r0 -> p8, r44 -> p6 [p53], r49 -> p45 [p55] | CMP SUB_IMM
717: 856 859 860 860, r49 -> p45 | J JMP_IMM
718: 857 860 861 861, r0 -> p8, r44 -> p61 [p6], r49 -> p59 [p45] | CMP SUB_IMM
719: 858 861 862 862, r49 -> p59 | J JMP_IMM
720: 859 862 865 865, r4 -> p60, r45 -> p7 [p57] | ADD LOAD
721: 860 865 866 866, r45 -> p7, r44 -> p51 [p61], r49 -> p56 [p59] | ADD ADD_IMM
722: 861 866 867 867, r44 -> p51, r4 -> p60 | ADD STORE
723: 862 863 866 868, r4 -> p60, r0 -> p10 [p8] | MOV LOAD
724: 865 867 870 870, r4 -> p60, r45 -> p54 [p7] | CMP LOAD
725: 866 870 871 871, r45 -> p54, r0 -> p10, r44 -> p49 [p51], r49 -> p12 [p56] | CMP SUB
726: 867 871 872 872, r49 -> p12 | J JMP_IMM
727: 868 869 870 873 | NOP NOP
728: 870 872 875 875, r4 -> p60, r0 -> p44 [p10] | MOV LOAD
729: 871 873 874 876, r4 -> p60, r4 -> p13 [p60], r49 -> p3 [p12] | ADD ADD_IMM
730: 872 874 877 877, r4 -> p13, r3 -> p53 [p63] | POP LOAD
731: 873 875 876 878, r4 -> p13, r4 -> p55 [p13] | POP ADD_IMM
732: 875 876 879 879, r4 -> p55, r5 -> p6 [p15] | POP LOAD
733: 876 877 878 880, r4 -> p55, r4 -> p45 [p55] | POP ADD_IMM
734: 877 878 881 881, r4 -> p45, r12 -> p57 [p1] | POP LOAD
735: 878 879 880 882, r4 -> p45, r4 -> p61 [p45] | POP ADD_IMM
736: 879 880 883 883, r4 -> p61, r13 -> p59 [p58] | POP LOAD
737: 880 881 882 884, r4 -> p61, r4 -> p8 [p61] | POP ADD_IMM
738: 881 882 885 885, r4 -> p8, r14 -> p7 [p62] | POP LOAD
739: 882 883 884 886, r4 -> p8, r4 -> p51 [p8] | POP ADD_IMM
740: 883 884 887 887, r4 -> p51, r15 -> p56 [p14] | POP LOAD
741: 884 885 886 888, r4 -> p51, r4 -> p10 [p51] | POP ADD_IMM
742: 885 886 889 889, r4 -> p10, r44 -> p60 [p49] | RET LOAD
743: 886 887 888 890, r4 -> p10, r4 -> p12 [p10] | RET ADD_IMM
744: 887 889 890 891, r44 -> p60 | RET JMP_REG
745: 888 890 893 893, r4 -> p12, r8 -> p63 [p2] | MOV LOAD
746: 889 893 894 894, r8 -> p63, r8 -> p63, r44 -> p13 [p60], r49 -> p15 [p3] | TEST AND
747: 890 894 895 895, r49 -> p15 | J JMP_IMM
748: 891 892 893 896, r9 -> p55 [p4] | XOR ADD
749: 893 895 898 898, r9 -> p55, r8 -> p63, r6 -> p1 [p50] | MOV LOAD
750: 894 896 897 899, r9 -> p55, r10 -> p45 [p9] | MOV ADD
751: 895 898 899 900, r6 -> p1, r6 -> p1, r44 -> p58 [p13], r49 -> p61 [p15] | TEST AND
752: 896 899 900 901, r49 -> p61 | J JMP_IMM
753: 898 900 901 902, r7 -> p62 [p52] | XOR ADD
754: 899 901 902 903, r11 -> p8 [p5] | MOV ADD_IMM
755: 900 902 903 904 | NOP NOP
756: 901 903 904 905, r7 -> p62, r1 -> p14 [p11] | MOV ADD
757: 902 904 905 906, r11 -> p8, r0 -> p51 [p44] | MOV ADD
758: 903 905 906 907, r0 -> p51, r1 -> p14, r0 -> p49 [p51], r49 -> p10 [p61] | SHL SHL
759: 904 906 907 908, r0 -> p49, r6 -> p1, r44 -> p2 [p58], r49 -> p60 [p10] | TEST AND
760: 905 907 908 909, r49 -> p60 | J JMP_IMM
761: 906 908 909 910, r0 -> p49, r0 -> p3 [p49] | NOT NOT
762: 907 909 910 911, r6 -> p1, r0 -> p3, r6 -> p4 [p1], r49 -> p50 [p60] | AND AND
763: 908 910 913 913, r8 -> p63, r0 -> p9 [p3] | MOV LOAD
764: 909 913 914 914, r0 -> p9, r10 -> p45, r0 -> p13 [p9] | LEA LEA
765: 910 914 915 915, r0 -> p13, r0 -> p15 [p13], r49 -> p52 [p50] | SHL SHL_IMM
766: 911 915 916 916, r1 -> p14, r0 -> p15, r2 -> p5 [p0] | LEA LEA
767: 913 916 917 917, r2 -> p5, r44 -> p11 [p2], r49 -> p44 [p52] | CMP SUB_IMM
768: 914 917 918 918, r49 -> p44 | J JMP_IMM
769: 915 918 919 919, r2 -> p5, r44 -> p51 [p11], r49 -> p61 [p44] | CMP SUB_IMM
770: 916 919 920 920, r49 -> p61 | J JMP_IMM
771: 917 920 921 921, r2 -> p5, r44 -> p58 [p51], r49 -> p10 [p61] | CMP SUB_IMM
772: 918 921 922 922, r49 -> p10 | J JMP_IMM
773: 919 922 923 923, r2 -> p5, r44 -> p49 [p58], r49 -> p1 [p10] | CMP SUB_IMM
774: 920 923 924 924, r49 -> p1 | J JMP_IMM
775: 921 924 925 925, r2 -> p5, r0 -> p60 [p15] | LEA LEA
776: 922 925 926 926, r0 -> p60, r44 -> p3 [p49], r49 -> p9 [p1] | CMP SUB_IMM
777: 923 926 927 927, r49 -> p9 | J JMP_IMM
778: 924 927 928 928, r2 -> p5, r44 -> p13 [p3], r49 -> p50 [p9] | CMP SUB_IMM
779: 925 928 929 929, r0 -> p0 [p60] | MOV ADD_IMM
780: 926 929 930 930, r49 -> p50 | J JMP_IMM
781: 927 930 931 931, r3 -> p53, r0 -> p0, r3 -> p2 [p53], r49 -> p52 [p50] | ADD ADD
782: 928 931 932 932, r6 -> p4, r6 -> p4, r44 -> p11 [p13], r49 -> p44 [p52] | TEST AND
783: 929 932 933 933, r49 -> p44 | J JMP_IMM
784: 930 933 934 934, r9 -> p55, r9 -> p51 [p55], r49 -> p61 [p44] | ADD ADD_IMM
785: 931 934 935 935, r9 -> p51, r44 -> p58 [p11], r49 -> p10 [p61] | CMP SUB_IMM
786: 932 935 936 936, r49 -> p10 | J JMP_IMM
787: 933 936 939 939, r9 -> p51, r8 -> p63, r6 -> p15 [p4] | MOV LOAD
788: 934 937 938 940, r9 -> p51, r10 -> p49 [p45] | MOV ADD
789: 935 939 940 941, r6 -> p15, r6 -> p15, r44 -> p1 [p58], r49 -> p3 [p10] | TEST AND
790: 936 940 941 942, r49 -> p3 | J JMP_IMM
791: 939 941 942 943, r9 -> p51, r9 -> p9 [p51], r49 -> p60 [p3] | ADD ADD_IMM
792: 940 942 943 944, r9 -> p9, r44 -> p53 [p1], r49 -> p50 [p60] | CMP SUB_IMM
793: 941 943 944 945, r49 -> p50 | J JMP_IMM
794: 942 944 947 947, r8 -> p63, r8 -> p13 [p63] | MOV LOAD
795: 943 947 948 948, r8 -> p13, r8 -> p13, r44 -> p52 [p53], r49 -> p55 [p50] | TEST AND
796: 944 948 949 949, r49 -> p55 | J JMP_IMM
797: 945 946 947 950, r12 -> p57, r7 -> p44 [p62] | MOV ADD
798: 947 949 950 951, r44 -> p11 [p52] | CALL SAVE_PC
799: 948 950 951 952, r4 -> p12, r4 -> p61 [p12] | CALL SUB_IMM
800: 949 951 952 953, r44 -> p11, r4 -> p61 | CALL STORE
801: 950 952 953 954 | CALL JMP_IMM
802: 951 953 956 956, r7 -> p44, r0 -> p4 [p0] | MOV LOAD
803: 952 956 957 957, r0 -> p4, r0 -> p4, r44 -> p45 [p11], r49 -> p58 [p55] | TEST AND
804: 953 957 958 958, r49 -> p58 | J JMP_IMM
805: 954 955 956 959, r44 -> p10 [p45] | MOV SAVE_PC
806: 956 958 961 961, r44 -> p10, r1 -> p51 [p14] | MOV LOAD
807: 957 959 960 962 | JMP JMP_IMM
808: 958 960 963 963, r0 -> p4, r2 -> p3 [p5] | MOV LOAD
809: 959 961 962 964, r1 -> p51, r0 -> p4 | MOV STORE
810: 961 963 964 965, r2 -> p3, r2 -> p3, r44 -> p1 [p10], r49 -> p60 [p58] | TEST AND
811: 962 964 965 966, r49 -> p60 | J JMP_IMM
812: 963 965 966 967, r44 -> p63 [p1] | MOV SAVE_PC
813: 964 966 967 968, r0 -> p4, r44 -> p63 | MOV STORE
814: 965 967 968 969, r7 -> p44 | MOV STORE
815: 966 968 969 970, r7 -> p44 | MOV STORE
816: 967 969 972 972, r4 -> p61, r44 -> p53 [p63] | RET LOAD
817: 968 970 971 973, r4 -> p61, r4 -> p50 [p61] | RET ADD_IMM
818: 969 972 973 974, r44 -> p53 | RET JMP_REG
819: 970 971 972 975, r5 -> p6, r5 -> p6, r44 -> p62 [p53], r49 -> p52 [p60] | TEST AND
820: 972 973 974 976, r49 -> p52 | J JMP_IMM
821: 973 974 975 977, r4 -> p50, r4 -> p12 [p50], r49 -> p0 [p52] | ADD ADD_IMM
822: 974 975 976 978, r3 -> p2, r0 -> p11 [p4] | MOV ADD
823: 975 976 979 979, r4 -> p12, r3 -> p55 [p2] | POP LOAD
824: 976 977 978 980, r4 -> p12, r4 -> p45 [p12] | POP ADD_IMM
825: 977 978 981 981, r4 -> p45, r5 -> p14 [p6] | POP LOAD
826: 978 979 980 982, r4 -> p45, r4 -> p5 [p45] | POP ADD_IMM
827: 979 980 983 983, r4 -> p5, r12 -> p10 [p57] | POP LOAD
828: 980 981 982 984, r4 -> p5, r4 -> p58 [p5] | POP ADD_IMM
829: 981 982 985 985, r4 -> p58, r44 -> p1 [p62] | RET LOAD
830: 982 983 984 986, r4 -> p58, r4 -> p63 [p58] | RET ADD_IMM
831: 983 985 986 987, r44 -> p1 | RET JMP_REG
832: 984 986 987 988, r15 -> p56, r2 -> p61 [p3] | MOV ADD
833: 985 987 988 989, r0 -> p11, r13 -> p59 | MOV STORE
834: 986 988 989 990, r13 -> p59 | MOV STORE
835: 987 989 990 991, r13 -> p59 | MOV STORE
836: 988 990 993 993, r2 -> p61, r6 -> p53 [p15] | MOV LOAD
837: 989 991 992 994, r13 -> p59 | MOV STORE
838: 990 992 995 995, r4 -> p63, r0 -> p60 [p11] | MOV LOAD
839: 991 993 994 996, r13 -> p59 | MOV STORE
840: 993 994 995 997, r13 -> p59 | MOV STORE
841: 994 995 996 998, r6 -> p53, r13 -> p59 | MOV STORE
842: 995 996 997 999, r0 -> p60, r13 -> p59 | MOV STORE
843: 996 997 1000 1000, r5 -> p14, r44 -> p50 [p1] | MOVZX LOAD
844: 997 1000 1001 1001, r44 -> p50, r1 -> p52 [p51] | MOVZX ZEXT_WORD_TO_DWORD
845: 998 1001 1002 1002, r1 -> p52, r0 -> p4 [p60] | LEA LEA
846: 999 1002 1003 1003, r0 -> p4, r44 -> p2 [p50], r49 -> p12 [p0] | CMP SUB_IMM
847: 1000 1003 1004 1004, r49 -> p12 | J JMP_IMM
848: 1001 1004 1005 1005, r1 -> p52, r44 -> p6 [p2], r49 -> p45 [p12] | CMP SUB_IMM
849: 1002 1005 1006 1006, r49 -> p45 | J JMP_IMM
850: 1003 1006 1007 1007, r1 -> p52, r44 -> p57 [p6], r49 -> p5 [p45] | CMP SUB_IMM
851: 1004 1007 1008 1008, r49 -> p5 | J JMP_IMM
852: 1005 1008 1009 1009, r1 -> p52, r44 -> p62 [p57], r49 -> p58 [p5] | CMP SUB_IMM
853: 1006 1009 1010 1010 | NOP NOP
854: 1007 1010 1011 1011, r49 -> p58 | J JMP_IMM
855: 1008 1011 1012 1012, r1 -> p52, r44 -> p3 [p62], r49 -> p15 [p58] | CMP SUB_IMM
856: 1009 1012 1013 1013 | NOP NOP
857: 1010 1013 1014 1014, r49 -> p15 | J JMP_IMM
858: 1011 1014 1015 1015, r1 -> p52, r44 -> p11 [p3], r49 -> p1 [p15] | CMP SUB_IMM
859: 1012 1015 1016 1016, r49 -> p1 | J JMP_IMM
860: 1013 1016 1017 1017, r1 -> p52, r44 -> p51 [p11], r49 -> p60 [p1] | CMP SUB_IMM
861: 1014 1017 1018 1018, r49 -> p60 | J JMP_IMM
862: 1015 1018 1021 1021, r5 -> p14, r0 -> p50 [p4] | MOV LOAD
863: 1016 1021 1022 1022, r0 -> p50, r0 -> p0 [p50], r49 -> p2 [p60] | AND AND_IMM
864: 1017 1022 1023 1023, r0 -> p0, r44 -> p12 [p51], r49 -> p6 [p2] | CMP SUB_IMM
865: 1018 1023 1024 1024, r49 -> p6 | J JMP_IMM
866: 1021 1024 1025 1025, r44 -> p45 [p12] | MOV SAVE_PC
867: 1022 1025 1028 1028, r44 -> p45, r8 -> p57 [p13] | MOV LOAD
868: 1023 1028 1029 1029, r5 -> p14, r8 -> p57, r44 -> p5 [p45], r49 -> p62 [p6] | CMP SUB
869: 1024 1029 1030 1030, r49 -> p62 | J JMP_IMM
870: 1025 1026 1027 1031, r44 -> p58 [p5] | MOV SAVE_PC
871: 1028 1030 1033 1033, r44 -> p58, r7 -> p3 [p44] | MOV LOAD
872: 1029 1033 1034 1034, r5 -> p14, r7 -> p3, r44 -> p15 [p58], r49 -> p11 [p62] | CMP SUB
873: 1030 1034 1035 1035, r49 -> p11 | J JMP_IMM
874: 1031 1032 1033 1036, r44 -> p1 [p15] | MOV SAVE_PC
875: 1033 1035 1038 1038, r44 -> p1, r11 -> p4 [p8] | MOV LOAD
876: 1034 1038 1039 1039, r5 -> p14, r11 -> p4, r44 -> p50 [p1], r49 -> p60 [p11] | CMP SUB
877: 1035 1039 1040 1040, r49 -> p60 | J JMP_IMM
878: 1036 1037 1038 1041, r44 -> p51 [p50] | MOV SAVE_PC
879: 1038 1040 1043 1043, r44 -> p51, r9 -> p2 [p9] | MOV LOAD
880: 1039 1043 1044 1044, r5 -> p14, r9 -> p2, r44 -> p12 [p51], r49 -> p13 [p60] | CMP SUB
881: 1040 1044 1045 1045, r49 -> p13 | J JMP_IMM
882: 1041 1042 1043 1046, r44 -> p45 [p12] | MOV SAVE_PC
883: 1043 1045 1048 1048, r44 -> p45, r10 -> p6 [p49] | MOV LOAD
884: 1044 1048 1049 1049, r5 -> p14, r10 -> p6, r44 -> p5 [p45], r49 -> p44 [p13] | CMP SUB
885: 1045 1049 1050 1050, r49 -> p44 | J JMP_IMM
886: 1046 1047 1048 1051, r1 -> p52, r44 -> p58 [p5], r49 -> p62 [p44] | CMP SUB_IMM
887: 1048 1050 1051 1052, r49 -> p62 | J JMP_IMM
888: 1049 1051 1052 1053, r1 -> p52, r44 -> p15 [p58], r49 -> p8 [p62] | CMP SUB_IMM
889: 1050 1052 1053 1054, r1 -> p1 [p52] | SET ADD
890: 1051 1053 1054 1055, r49 -> p8, r1 -> p11 [p1] | SET ADD_IMM
891: 1052 1054 1055 1056 | JMP JMP_IMM
892: 1053 1055 1056 1057, r6 -> p53, r6 -> p53, r44 -> p50 [p15], r49 -> p9 [p8] | TEST AND
893: 1054 1056 1057 1058, r1 -> p11, r13 -> p59 | MOV STORE
894: 1055 1057 1058 1059, r49 -> p9 | J JMP_IMM
895: 1056 1058 1059 1060, r13 -> p59, r6 -> p53 | MOV STORE
896: 1057 1059 1060 1061, r14 -> p7, r14 -> p7, r44 -> p51 [p50], r49 -> p60 [p9] | TEST AND
897: 1058 1060 1061 1062, r2 -> p61, r44 -> p12 [p51] | MOV LEA
898: 1059 1061 1062 1063, r13 -> p59, r44 -> p12 | MOV STORE
899: 1060 1062 1063 1064, r49 -> p60 | J JMP_IMM
900: 1061 1063 1066 1066, r14 -> p7, r12 -> p49 [p10] | MOV LOAD
901: 1062 1064 1067 1067, r13 -> p59, r6 -> p45 [p53] | MOV LOAD
902: 1063 1065 1068 1068, r13 -> p59, r8 -> p13 [p57] | MOV LOAD
903: 1064 1066 1069 1069, r12 -> p49, r0 -> p5 [p0] | MOV LOAD
904: 1066 1067 1070 1070, r12 -> p49, r2 -> p44 [p61] | MOV LOAD
905: 1067 1069 1070 1071, r0 -> p5, r6 -> p45, r44 -> p58 [p12], r49 -> p62 [p60] | CMP SUB
906: 1068 1070 1071 1072, r49 -> p62 | J JMP_IMM
907: 1069 1071 1072 1073, r2 -> p44, r8 -> p13, r44 -> p52 [p58], r49 -> p1 [p62] | CMP SUB
908: 1070 1072 1073 1074, r49 -> p1 | J JMP_IMM
909: 1071 1073 1074 1075, r8 -> p13, r44 -> p15 [p52], r49 -> p8 [p1] | CMP SUB_IMM
910: 1072 1074 1075 1076, r49 -> p8 | J JMP_IMM
911: 1073 1075 1076 1077, r2 -> p44, r44 -> p50 [p15], r49 -> p9 [p8] | CMP SUB_IMM
912: 1074 1076 1077 1078, r49 -> p9 | J JMP_IMM
913: 1075 1077 1078 1079, r0 -> p5, r6 -> p45, r44 -> p51 [p50], r49 -> p10 [p9] | CMP SUB
914: 1076 1078 1079 1080 | XCHG NOP
915: 1077 1079 1080 1081, r49 -> p10 | J JMP_IMM
916: 1078 1080 1081 1082, r2 -> p44, r8 -> p13, r44 -> p53 [p51], r49 -> p57 [p10] | CMP SUB
917: 1079 1081 1082 1083 | NOP NOP
918: 1080 1082 1083 1084, r49 -> p57 | J JMP_IMM
919: 1081 1083 1084 1085, r8 -> p13, r0 -> p0 [p5] | MOV ADD
920: 1082 1084 1085 1086, r0 -> p0, r2 -> p44, r0 -> p61 [p0], r49 -> p12 [p57] | SUB SUB
921: 1083 1085 1086 1087 | NOP NOP
922: 1084 1086 1087 1088 | JMP JMP_IMM
923: 1085 1087 1088 1089, r0 -> p61, r0 -> p61, r44 -> p60 [p53], r49 -> p58 [p12] | TEST AND
924: 1086 1088 1089 1090, r49 -> p58 | J JMP_IMM
925: 1087 1089 1090 1091, r8 -> p13, r44 -> p62 [p60], r49 -> p52 [p58] | CMP SUB_IMM
926: 1088 1090 1091 1092, r49 -> p52 | J JMP_IMM
927: 1089 1091 1092 1093, r6 -> p45, r44 -> p1 [p62], r49 -> p15 [p52] | CMP SUB_IMM
928: 1090 1092 1093 1094, r49 -> p15 | J JMP_IMM
929: 1091 1093 1094 1095, r12 -> p49, r7 -> p8 [p3] | MOV ADD
930: 1092 1094 1095 1096 | JMP JMP_IMM
931: 1093 1095 1098 1098, r7 -> p8, r1 -> p50 [p11] | MOV LOAD
932: 1094 1098 1099 1099, r1 -> p50, r1 -> p50, r44 -> p9 [p1], r49 -> p51 [p15] | TEST AND
933: 1095 1099 1100 1100, r49 -> p51 | J JMP_IMM
934: 1096 1100 1103 1103, r1 -> p50, r0 -> p10 [p61] | MOV LOAD
935: 1098 1101 1104 1104, r1 -> p50, r2 -> p5 [p44] | MOV LOAD
936: 1099 1103 1104 1105, r0 -> p10, r6 -> p45, r44 -> p0 [p9], r49 -> p57 [p51] | CMP SUB
937: 1100 1104 1105 1106, r49 -> p57 | J JMP_IMM
938: 1103 1105 1106 1107, r8 -> p13, r2 -> p5, r44 -> p53 [p0], r49 -> p12 [p57] | CMP SUB
939: 1104 1106 1107 1108, r49 -> p12 | J JMP_IMM
940: 1105 1107 1108 1109, r0 -> p10, r6 -> p45, r44 -> p60 [p53], r49 -> p58 [p12] | CMP SUB
941: 1106 1108 1109 1110, r49 -> p58 | J JMP_IMM
942: 1107 1109 1110 1111, r8 -> p13, r2 -> p5, r44 -> p62 [p60], r49 -> p52 [p58] | CMP SUB
943: 1108 1110 1111 1112 | NOP NOP
944: 1109 1111 1112 1113, r49 -> p52 | J JMP_IMM
945: 1110 1112 1113 1114, r1 -> p50, r13 -> p59 | MOV STORE
946: 1111 1113 1114 1115, r13 -> p59, r1 -> p50 | MOV STORE
947: 1112 1114 1115 1116, r7 -> p8, r13 -> p59 | MOV STORE
948: 1113 1115 1116 1117, r13 -> p59, r7 -> p8 | MOV STORE
949: 1114 1116 1117 1118, r12 -> p49, r13 -> p59 | MOV STORE
950: 1115 1117 1120 1120, r13 -> p59, r45 -> p3 [p54] | CMP LOAD
951: 1116 1120 1121 1121, r45 -> p3, r44 -> p11 [p62], r49 -> p1 [p52] | CMP SUB
952: 1117 1121 1122 1122, r49 -> p1 | J JMP_IMM
953: 1118 1119 1122 1123, r5 -> p14, r45 -> p15 [p3] | CMP LOAD
954: 1120 1122 1123 1124, r45 -> p15, r44 -> p61 [p11], r49 -> p44 [p1] | CMP SUB_IMM
955: 1121 1123 1124 1125, r49 -> p44 | J JMP_IMM
956: 1122 1124 1127 1127, r5 -> p14, r3 -> p9 [p55] | MOV LOAD
957: 1123 1125 1126 1128, r45 -> p51 [p15] | CMP SAVE_PC
958: 1124 1126 1129 1129, r45 -> p51, r45 -> p0 [p51] | CMP LOAD
959: 1125 1129 1130 1130, r3 -> p9, r45 -> p0, r44 -> p57 [p61], r49 -> p53 [p44] | CMP SUB
960: 1127 1130 1131 1131, r49 -> p53 | J JMP_IMM
961: 1128 1131 1132 1132, r44 -> p12 [p57] | MOV SAVE_PC
962: 1129 1132 1135 1135, r44 -> p12, r2 -> p60 [p5] | MOV LOAD
963: 1130 1135 1136 1136, r2 -> p60, r2 -> p60, r44 -> p58 [p12], r49 -> p54 [p53] | TEST AND
964: 1131 1136 1137 1137, r49 -> p54 | J JMP_IMM
965: 1132 1137 1140 1140, r2 -> p60, r44 -> p62 [p58] | MOVSX LOAD
966: 1135 1140 1141 1141, r44 -> p62, r0 -> p52 [p10] | MOVSX SEXT_DWORD_TO_QWORD
967: 1136 1138 1139 1142, r44 -> p3 [p62] | MOV SAVE_PC
968: 1137 1139 1142 1143, r44 -> p3, r2 -> p11 [p60] | MOV LOAD
969: 1140 1141 1142 1144, r0 -> p52, r0 -> p52, r0 -> p1 [p52] | LEA LEA
970: 1141 1142 1143 1145, r0 -> p1, r0 -> p55 [p1], r49 -> p15 [p54] | SHL SHL_IMM
971: 1142 1143 1146 1146, r2 -> p11, r0 -> p55, r45 -> p51 [p0] | CMP LOAD
972: 1143 1146 1147 1147, r45 -> p51, r44 -> p61 [p3], r49 -> p44 [p15] | CMP SUB
973: 1144 1147 1148 1148, r49 -> p44 | J JMP_IMM
974: 1145 1148 1151 1151, r5 -> p14, r45 -> p57 [p51] | CMP LOAD
975: 1146 1151 1152 1152, r45 -> p57, r44 -> p5 [p61], r49 -> p12 [p44] | CMP SUB_IMM
976: 1147 1152 1153 1153, r49 -> p12 | J JMP_IMM
977: 1148 1149 1152 1154, r5 -> p14, r3 -> p53 [p9] | MOV LOAD
978: 1151 1153 1154 1155, r45 -> p58 [p57] | CMP SAVE_PC
979: 1152 1154 1157 1157, r45 -> p58, r45 -> p10 [p58] | CMP LOAD
980: 1153 1157 1158 1158, r3 -> p53, r45 -> p10, r44 -> p62 [p5], r49 -> p60 [p12] | CMP SUB
981: 1154 1158 1159 1159, r49 -> p60 | J JMP_IMM
982: 1155 1156 1157 1160, r44 -> p52 [p62] | MOV SAVE_PC
983: 1157 1159 1162 1162, r44 -> p52, r2 -> p1 [p11] | MOV LOAD
984: 1158 1162 1163 1163, r2 -> p1, r2 -> p1, r44 -> p54 [p52], r49 -> p0 [p60] | TEST AND
985: 1159 1163 1164 1164, r49 -> p0 | J JMP_IMM
986: 1160 1164 1167 1167, r2 -> p1, r44 -> p3 [p54] | MOVSX LOAD
987: 1162 1167 1168 1168, r44 -> p3, r0 -> p15 [p55] | MOVSX SEXT_DWORD_TO_QWORD
988: 1163 1165 1166 1169, r44 -> p51 [p3] | MOV SAVE_PC
989: 1164 1166 1169 1170, r44 -> p51, r6 -> p61 [p45] | MOV LOAD
990: 1167 1168 1169 1171, r0 -> p15, r0 -> p15, r0 -> p44 [p15] | LEA LEA
991: 1168 1169 1170 1172, r0 -> p44, r0 -> p9 [p44], r49 -> p57 [p0] | SHL SHL_IMM
992: 1169 1170 1173 1173, r6 -> p61, r0 -> p9, r45 -> p58 [p10] | CMP LOAD
993: 1170 1173 1174 1174, r45 -> p58, r44 -> p5 [p51], r49 -> p12 [p57] | CMP SUB
994: 1171 1174 1175 1175, r49 -> p12 | J JMP_IMM
995: 1172 1175 1178 1178, r5 -> p14, r3 -> p62 [p53] | MOV LOAD
996: 1173 1176 1177 1179, r45 -> p11 [p58] | CMP SAVE_PC
997: 1174 1177 1180 1180, r45 -> p11, r45 -> p52 [p11] | CMP LOAD
998: 1175 1180 1181 1181, r3 -> p62, r45 -> p52, r44 -> p60 [p5], r49 -> p54 [p12] | CMP SUB
999: 1178 1179 1182 1182, r5 -> p14, r44 -> p55 [p60] | MOVZX LOAD
1000: 1179 1182 1183 1183, r44 -> p55, r14 -> p3 [p7] | MOVZX ZEXT_BYTE_TO_DWORD
Processed 1000 trace records.
Micro-ops: 1000
Macro-ops: 754
TotalCycles: 1184
uIPC: 0.844595
