Processing trace...
1: 0 1 2 2, r13 -> p50 [p13] | SET ADD
2: 1 2 3 3, r49 -> p49, r13 -> p51 [p50] | SET ADD_IMM
3: 2 3 6 6, r5 -> p5, r45 -> p52 [p45] | CMP LOAD
4: 3 6 7 7, r45 -> p52, r3 -> p3, r44 -> p53 [p44], r49 -> p54 [p49] | CMP SUB
5: 4 5 8 8, r5 -> p5, r3 -> p55 [p3] | MOV LOAD
6: 5 7 8 9, r0 -> p56 [p0] | SET ADD
7: 6 8 9 10, r49 -> p54, r0 -> p57 [p56] | SET ADD_IMM
8: 7 9 10 11, r12 -> p58 [p12] | XOR ADD
9: 8 10 11 12, r13 -> p51, r0 -> p57, r13 -> p59 [p51], r49 -> p60 [p54] | OR OR
10: 9 11 12 13 | JMP JMP_IMM
11: 10 12 15 15, r3 -> p55, r0 -> p61 [p57] | MOV LOAD
12: 11 15 16 16, r0 -> p61, r0 -> p61, r44 -> p62 [p53], r49 -> p63 [p60] | TEST AND
13: 12 16 17 17, r49 -> p63 | J JMP_IMM
14: 13 17 20 20, r0 -> p61, r7 -> p13 [p7] | MOV LOAD
15: 15 20 23 23, r7 -> p13, r44 -> p50 [p62] | MOVZX LOAD
16: 16 23 24 24, r44 -> p50, r0 -> p45 [p61] | MOVZX ZEXT_WORD_TO_DWORD
17: 17 24 25 25, r0 -> p45, r44 -> p44 [p50], r49 -> p49 [p63] | CMP SUB_IMM
18: 20 25 26 26, r49 -> p49 | J JMP_IMM
19: 23 26 27 27, r6 -> p3 [p6] | XOR ADD
20: 24 27 28 28, r44 -> p0 [p44] | CALL SAVE_PC
21: 25 28 29 29, r4 -> p4, r4 -> p56 [p4] | CALL SUB_IMM
22: 26 29 30 30, r44 -> p0, r4 -> p56 | CALL STORE
23: 27 30 31 31 | CALL JMP_IMM
24: 28 31 32 32, r15 -> p15, r4 -> p56 | PUSH STORE
25: 29 32 33 33, r4 -> p56, r4 -> p12 [p56] | PUSH SUB_IMM
26: 30 33 34 34, r14 -> p14, r4 -> p12 | PUSH STORE
27: 31 34 35 35, r4 -> p12, r4 -> p51 [p12] | PUSH SUB_IMM
28: 32 35 36 36, r13 -> p59, r4 -> p51 | PUSH STORE
29: 33 36 37 37, r4 -> p51, r4 -> p54 [p51] | PUSH SUB_IMM
30: 34 37 38 38, r7 -> p13, r13 -> p57 [p59] | MOV ADD
31: 35 38 39 39, r12 -> p58, r4 -> p54 | PUSH STORE
32: 36 39 40 40, r4 -> p54, r4 -> p53 [p54] | PUSH SUB_IMM
33: 37 40 41 41, r6 -> p3, r12 -> p60 [p58] | MOV ADD
34: 38 41 42 42, r5 -> p5, r4 -> p53 | PUSH STORE
35: 39 42 43 43, r4 -> p53, r4 -> p7 [p53] | PUSH SUB_IMM
36: 40 43 44 44, r3 -> p55, r4 -> p7 | PUSH STORE
37: 41 44 45 45, r4 -> p7, r4 -> p62 [p7] | PUSH SUB_IMM
38: 42 45 46 46, r4 -> p62, r4 -> p61 [p62], r49 -> p50 [p49] | SUB SUB_IMM
39: 43 46 49 49, r7 -> p13, r44 -> p63 [p0] | MOVZX LOAD
40: 44 49 50 50, r44 -> p63, r0 -> p6 [p45] | MOVZX ZEXT_WORD_TO_DWORD
41: 45 50 51 51, r0 -> p6, r44 -> p44 [p63], r49 -> p4 [p50] | CMP SUB_IMM
42: 46 51 52 52, r49 -> p4 | J JMP_IMM
43: 49 52 55 55, r7 -> p13, r5 -> p56 [p5] | MOV LOAD
44: 50 55 56 56, r5 -> p56, r44 -> p12 [p44], r49 -> p51 [p4] | CMP SUB_IMM
45: 51 56 57 57, r49 -> p51 | J JMP_IMM
46: 52 53 54 58, r45 -> p59 [p52] | CMP SAVE_PC
47: 55 57 60 60, r45 -> p59, r45 -> p54 [p59] | CMP LOAD
48: 56 60 61 61, r5 -> p56, r45 -> p54, r44 -> p58 [p12], r49 -> p53 [p51] | CMP SUB
49: 57 61 62 62, r49 -> p53 | J JMP_IMM
50: 58 59 60 63, r44 -> p7 [p58] | MOV SAVE_PC
51: 60 62 65 65, r44 -> p7, r2 -> p62 [p2] | MOV LOAD
52: 61 65 66 66, r2 -> p62, r2 -> p62, r44 -> p49 [p7], r49 -> p0 [p53] | TEST AND
53: 62 66 67 67, r49 -> p0 | J JMP_IMM
54: 63 67 70 70, r2 -> p62, r12 -> p45 [p60] | MOV LOAD
55: 65 70 71 71, r12 -> p45, r12 -> p63 [p45], r49 -> p50 [p0] | AND AND_IMM
56: 66 68 69 72, r45 -> p5 [p54] | CMP SAVE_PC
57: 67 69 72 73, r45 -> p5, r45 -> p44 [p5] | CMP LOAD
58: 70 72 73 74, r5 -> p56, r45 -> p44, r44 -> p4 [p49], r49 -> p52 [p50] | CMP SUB
59: 71 73 74 75, r49 -> p52 | J JMP_IMM
60: 72 74 75 76, r44 -> p59 [p4] | MOV SAVE_PC
61: 73 75 78 78, r44 -> p59, r2 -> p12 [p62] | MOV LOAD
62: 74 78 79 79, r2 -> p12, r2 -> p12, r44 -> p51 [p59], r49 -> p58 [p52] | TEST AND
63: 75 79 80 80, r49 -> p58 | J JMP_IMM
64: 76 80 83 83, r2 -> p12, r0 -> p2 [p6] | MOV LOAD
65: 78 83 84 84, r5 -> p56, r0 -> p2, r44 -> p7 [p51], r49 -> p53 [p58] | CMP SUB
66: 79 84 85 85, r49 -> p53 | J JMP_IMM
67: 80 81 82 86, r45 -> p60 [p44] | CMP SAVE_PC
68: 83 85 88 88, r45 -> p60, r45 -> p45 [p60] | CMP LOAD
69: 84 88 89 89, r5 -> p56, r45 -> p45, r44 -> p0 [p7], r49 -> p54 [p53] | CMP SUB
70: 85 89 90 90, r49 -> p54 | J JMP_IMM
71: 86 87 88 91, r44 -> p5 [p0] | MOV SAVE_PC
72: 88 90 93 93, r44 -> p5, r2 -> p49 [p12] | MOV LOAD
73: 89 93 94 94, r2 -> p49, r2 -> p49, r44 -> p50 [p5], r49 -> p4 [p54] | TEST AND
74: 90 94 95 95, r49 -> p4 | J JMP_IMM
75: 91 95 98 98, r2 -> p49, r45 -> p62 [p45] | ADD LOAD
76: 93 98 99 99, r45 -> p62, r44 -> p59 [p50], r49 -> p52 [p4] | ADD ADD_IMM
77: 94 99 100 100, r44 -> p59, r2 -> p49 | ADD STORE
78: 95 96 97 101, r5 -> p56, r44 -> p6 [p59], r49 -> p51 [p52] | CMP SUB_IMM
79: 98 100 101 102, r12 -> p63, r12 -> p58 [p63] | MOV ADD
80: 99 101 102 103, r49 -> p51 | J JMP_IMM
81: 100 102 105 105, r13 -> p57, r45 -> p44 [p62] | CMP LOAD
82: 101 105 106 106, r45 -> p44, r44 -> p60 [p6], r49 -> p7 [p51] | CMP SUB_IMM
83: 102 103 106 107, r13 -> p57, r44 -> p53 [p60] | MOVZX LOAD
84: 103 106 107 108, r44 -> p53, r5 -> p0 [p56] | MOVZX ZEXT_BYTE_TO_DWORD
85: 105 107 108 109, r49 -> p7 | J JMP_IMM
86: 106 108 111 111, r12 -> p58, r3 -> p12 [p55] | MOV LOAD
87: 107 109 112 112, r13 -> p57, r2 -> p5 [p49] | MOV LOAD
88: 108 111 112 113, r3 -> p12, r3 -> p12, r44 -> p54 [p53], r49 -> p45 [p7] | TEST AND
89: 109 112 113 114, r49 -> p45 | J JMP_IMM
90: 111 113 116 116, r3 -> p12, r0 -> p50 [p2] | MOV LOAD
91: 112 116 119 119, r0 -> p50, r45 -> p4 [p44] | CMP LOAD
92: 113 119 120 120, r45 -> p4, r44 -> p59 [p54], r49 -> p52 [p45] | CMP SUB_IMM
93: 114 120 121 121, r49 -> p52 | J JMP_IMM
94: 116 117 120 122, r3 -> p12, r3 -> p63 [p12] | MOV LOAD
95: 119 121 122 123, r3 -> p63, r3 -> p63, r44 -> p62 [p59], r49 -> p6 [p52] | TEST AND
96: 120 122 123 124, r49 -> p6 | J JMP_IMM
97: 121 123 124 125, r4 -> p61, r4 -> p51 [p61], r49 -> p60 [p6] | ADD ADD_IMM
98: 122 124 127 127, r4 -> p51, r3 -> p56 [p63] | POP LOAD
99: 123 125 126 128, r4 -> p51, r4 -> p55 [p51] | POP ADD_IMM
100: 124 126 129 129, r4 -> p55, r5 -> p49 [p0] | POP LOAD
101: 125 127 128 130, r4 -> p55, r4 -> p53 [p55] | POP ADD_IMM
102: 127 128 131 131, r4 -> p53, r12 -> p7 [p58] | POP LOAD
103: 128 129 130 132, r4 -> p53, r4 -> p2 [p53] | POP ADD_IMM
104: 129 130 133 133, r4 -> p2, r13 -> p44 [p57] | POP LOAD
105: 130 131 132 134, r4 -> p2, r4 -> p54 [p2] | POP ADD_IMM
106: 131 132 135 135, r4 -> p54, r14 -> p45 [p14] | POP LOAD
107: 132 133 134 136, r4 -> p54, r4 -> p12 [p54] | POP ADD_IMM
108: 133 134 137 137, r4 -> p12, r15 -> p59 [p15] | POP LOAD
109: 134 135 136 138, r4 -> p12, r4 -> p52 [p12] | POP ADD_IMM
110: 135 136 139 139, r4 -> p52, r44 -> p61 [p62] | RET LOAD
111: 136 137 138 140, r4 -> p52, r4 -> p6 [p52] | RET ADD_IMM
112: 137 139 140 141, r44 -> p61 | RET JMP_REG
113: 138 140 141 142 | JMP JMP_IMM
114: 139 141 142 143, r12 -> p7, r12 -> p63 [p7], r49 -> p51 [p60] | ADD ADD_IMM
115: 140 142 143 144, r3 -> p56, r3 -> p0 [p56], r49 -> p55 [p51] | ADD ADD_IMM
116: 141 143 146 146, r5 -> p49, r45 -> p58 [p4] | CMP LOAD
117: 142 146 147 147, r12 -> p63, r45 -> p58, r44 -> p53 [p61], r49 -> p57 [p55] | CMP SUB
118: 143 147 148 148, r49 -> p57 | J JMP_IMM
119: 144 145 148 149, r5 -> p49, r0 -> p2 [p50] | MOV LOAD
120: 146 148 151 151, r0 -> p2, r45 -> p14 [p58] | CMP LOAD
121: 147 151 152 152, r45 -> p14, r44 -> p54 [p53], r49 -> p15 [p57] | CMP SUB_IMM
122: 148 152 153 153, r49 -> p15 | J JMP_IMM
123: 149 150 153 154, r0 -> p2, r0 -> p12 [p2] | MOV LOAD
124: 151 153 156 156, r0 -> p12, r0 -> p62 [p12] | MOV LOAD
125: 152 156 157 157, r0 -> p62, r0 -> p52 [p62], r49 -> p7 [p15] | AND AND_IMM
126: 153 157 158 158, r0 -> p52, r44 -> p60 [p54], r49 -> p56 [p7] | CMP SUB_IMM
127: 154 158 159 159, r49 -> p56 | J JMP_IMM
128: 156 159 162 162, r5 -> p49, r11 -> p51 [p11] | MOV LOAD
129: 157 162 163 163, r11 -> p51, r11 -> p51, r44 -> p4 [p60], r49 -> p61 [p56] | TEST AND
130: 158 163 164 164, r49 -> p61 | J JMP_IMM
131: 159 160 163 165, r5 -> p49, r1 -> p55 [p1] | MOV LOAD
132: 162 164 165 166, r5 -> p49 | MOV STORE
133: 163 165 166 167, r1 -> p55, r5 -> p49 | MOV STORE
134: 164 166 167 168 | JMP JMP_IMM
135: 165 167 170 170, r5 -> p49, r3 -> p50 [p0] | MOV LOAD
136: 166 170 173 173, r3 -> p50, r0 -> p58 [p52] | MOV LOAD
137: 167 173 174 174, r0 -> p58, r0 -> p58, r44 -> p53 [p4], r49 -> p57 [p61] | TEST AND
138: 168 174 175 175, r49 -> p57 | J JMP_IMM
139: 170 175 178 178, r0 -> p58, r7 -> p2 [p13] | MOV LOAD
140: 173 178 181 181, r7 -> p2, r45 -> p12 [p14] | CMP LOAD
141: 174 181 182 182, r45 -> p12, r44 -> p62 [p53], r49 -> p15 [p57] | CMP SUB_IMM
142: 175 182 183 183, r49 -> p15 | J JMP_IMM
143: 178 179 182 184, r7 -> p2, r1 -> p54 [p55] | MOV LOAD
144: 181 183 184 185, r1 -> p54, r44 -> p7 [p62], r49 -> p11 [p15] | CMP SUB_IMM
145: 182 184 185 186, r49 -> p11 | J JMP_IMM
146: 183 185 186 187, r0 -> p60 [p58] | MOV ADD_IMM
147: 184 186 187 188 | JMP JMP_IMM
148: 185 187 188 189, r0 -> p60, r1 -> p54, r0 -> p56 [p60], r49 -> p1 [p11] | ADD ADD
149: 186 188 189 190, r1 -> p54, r0 -> p56, r44 -> p0 [p7], r49 -> p52 [p1] | CMP SUB
150: 187 189 190 191, r49 -> p52 | J JMP_IMM
151: 188 190 191 192, r1 -> p54, r13 -> p4 [p44] | MOV ADD
152: 189 191 192 193, r45 -> p61 [p12] | CMP SAVE_PC
153: 190 192 195 195, r45 -> p61, r45 -> p13 [p61] | CMP LOAD
154: 191 195 196 196, r45 -> p13, r13 -> p4, r44 -> p14 [p0], r49 -> p53 [p52] | CMP SUB
155: 192 193 194 197, r0 -> p56, r5 -> p49 | MOV STORE
156: 193 196 197 198, r49 -> p53 | J JMP_IMM
157: 195 197 198 199, r44 -> p57 [p14] | MOV SAVE_PC
158: 196 198 201 201, r44 -> p57, r2 -> p55 [p5] | MOV LOAD
159: 197 201 202 202, r2 -> p55, r2 -> p55, r44 -> p62 [p57], r49 -> p15 [p53] | TEST AND
160: 198 202 203 203, r49 -> p15 | J JMP_IMM
161: 199 203 206 206, r2 -> p55, r10 -> p58 [p10] | MOV LOAD
162: 201 206 207 207, r10 -> p58, r10 -> p58, r44 -> p60 [p62], r49 -> p11 [p15] | TEST AND
163: 202 207 208 208, r49 -> p11 | J JMP_IMM
164: 203 204 205 209, r13 -> p4, r13 -> p7 [p4], r49 -> p1 [p11] | ADD ADD_IMM
165: 206 208 211 211, r5 -> p49, r45 -> p44 [p13] | CMP LOAD
166: 207 211 212 212, r45 -> p44, r13 -> p7, r44 -> p12 [p60], r49 -> p61 [p1] | CMP SUB
167: 208 212 213 213, r49 -> p61 | J JMP_IMM
168: 209 210 213 214, r5 -> p49, r45 -> p0 [p44] | ADD LOAD
169: 211 213 214 215, r45 -> p0, r44 -> p52 [p12], r49 -> p14 [p61] | ADD ADD_IMM
170: 212 214 215 216, r44 -> p52, r5 -> p49 | ADD STORE
171: 213 215 218 218, r5 -> p49, r45 -> p5 [p0] | ADD LOAD
172: 214 218 219 219, r45 -> p5, r44 -> p57 [p52], r49 -> p53 [p14] | ADD ADD_IMM
173: 215 219 220 220, r44 -> p57, r5 -> p49 | ADD STORE
174: 216 220 223 223, r5 -> p49, r0 -> p10 [p56] | MOV LOAD
175: 218 221 224 224, r5 -> p49, r45 -> p62 [p5] | CMP LOAD
176: 219 224 225 225, r45 -> p62, r0 -> p10, r44 -> p15 [p57], r49 -> p4 [p53] | CMP SUB
177: 220 225 226 226, r49 -> p4 | J JMP_IMM
178: 223 226 229 229, r5 -> p49, r1 -> p11 [p54] | MOV LOAD
179: 224 227 228 230, r6 -> p13 [p3] | XOR ADD
180: 225 228 229 231 | XCHG NOP
181: 226 229 230 232 | JMP JMP_IMM
182: 229 230 233 233, r1 -> p11, r45 -> p60 [p62] | CMP LOAD
183: 230 233 234 234, r45 -> p60, r44 -> p1 [p15], r49 -> p44 [p4] | CMP SUB
184: 231 234 235 235, r49 -> p44 | J JMP_IMM
185: 232 235 238 238, r1 -> p11, r0 -> p12 [p10] | MOV LOAD
186: 233 238 239 239, r0 -> p12, r0 -> p12, r44 -> p61 [p1], r49 -> p0 [p44] | TEST AND
187: 234 239 240 240, r49 -> p0 | J JMP_IMM
188: 235 240 243 243, r0 -> p12, r45 -> p52 [p60] | CMP LOAD
189: 238 243 244 244, r45 -> p52, r44 -> p14 [p61], r49 -> p56 [p0] | CMP SUB
190: 239 244 245 245, r49 -> p56 | J JMP_IMM
191: 240 241 242 246, r6 -> p13, r6 -> p5 [p13], r49 -> p57 [p56] | ADD ADD_IMM
192: 243 245 246 247, r1 -> p11, r1 -> p53 [p11], r49 -> p54 [p57] | ADD ADD_IMM
193: 244 246 249 249, r5 -> p49, r45 -> p3 [p52] | CMP LOAD
194: 245 249 250 250, r6 -> p5, r45 -> p3, r44 -> p62 [p14], r49 -> p15 [p54] | CMP SUB
195: 246 250 251 251, r49 -> p15 | J JMP_IMM
196: 247 248 251 252, r5 -> p49, r1 -> p4 [p53] | MOV LOAD
197: 249 251 252 253, r5 -> p49 | MOV STORE
198: 250 252 253 254, r1 -> p4, r5 -> p49 | MOV STORE
199: 251 253 254 255 | JMP JMP_IMM
200: 252 254 257 257, r5 -> p49, r2 -> p10 [p55] | MOV LOAD
201: 253 257 260 260, r2 -> p10, r0 -> p1 [p12] | MOV LOAD
202: 254 260 261 261, r0 -> p1, r0 -> p1, r44 -> p44 [p62], r49 -> p60 [p15] | TEST AND
203: 255 261 262 262, r49 -> p60 | J JMP_IMM
204: 257 258 259 263, r44 -> p61 [p44] | MOV SAVE_PC
205: 260 262 265 265, r44 -> p61, r9 -> p0 [p9] | MOV LOAD
206: 261 263 266 266, r0 -> p1, r12 -> p13 [p63] | MOV LOAD
207: 262 264 267 267, r2 -> p10, r14 -> p56 [p45] | MOV LOAD
208: 263 265 266 268, r9 -> p0, r9 -> p0, r44 -> p11 [p61], r49 -> p57 [p60] | TEST AND
209: 265 266 267 269, r49 -> p57 | J JMP_IMM
210: 266 267 270 270, r12 -> p13, r44 -> p52 [p11] | MOVZX LOAD
211: 267 270 271 271, r44 -> p52, r2 -> p14 [p10] | MOVZX ZEXT_BYTE_TO_DWORD
212: 268 271 272 272, r2 -> p14, r44 -> p54 [p52], r49 -> p53 [p57] | CMP SUB_IMM
213: 269 272 273 273, r49 -> p53 | J JMP_IMM
214: 270 273 276 276, r5 -> p49, r45 -> p55 [p3] | CMP LOAD
215: 271 276 277 277, r45 -> p55, r44 -> p12 [p54], r49 -> p62 [p53] | CMP SUB
216: 272 277 278 278, r49 -> p62 | J JMP_IMM
217: 273 274 277 279, r5 -> p49, r1 -> p15 [p4] | MOV LOAD
218: 276 278 281 281, r1 -> p15, r6 -> p44 [p5] | MOV LOAD
219: 277 281 282 282, r6 -> p44, r6 -> p44, r44 -> p9 [p12], r49 -> p63 [p62] | TEST AND
220: 278 279 280 283 | NOP NOP
221: 279 282 283 284, r49 -> p63 | J JMP_IMM
222: 281 283 286 286, r12 -> p13, r44 -> p45 [p9] | MOVZX LOAD
223: 282 286 287 287, r44 -> p45, r0 -> p61 [p1] | MOVZX ZEXT_WORD_TO_DWORD
224: 283 287 288 288, r0 -> p61, r44 -> p60 [p45], r49 -> p11 [p63] | CMP SUB_IMM
225: 284 288 289 289, r49 -> p11 | J JMP_IMM
226: 286 289 290 290, r0 -> p61, r44 -> p10 [p60], r49 -> p52 [p11] | CMP SUB_IMM
227: 287 290 291 291, r49 -> p52 | J JMP_IMM
228: 288 291 292 292, r0 -> p61, r44 -> p57 [p10], r49 -> p3 [p52] | CMP SUB_IMM
229: 289 292 293 293, r49 -> p3 | J JMP_IMM
230: 290 293 294 294, r2 -> p54 [p14] | MOV ADD_IMM
231: 291 294 295 295, r12 -> p13, r7 -> p53 [p2] | MOV ADD
232: 292 295 296 296, r44 -> p4 [p57] | CALL SAVE_PC
233: 293 296 297 297, r4 -> p6, r4 -> p5 [p6] | CALL SUB_IMM
234: 294 297 298 298, r44 -> p4, r4 -> p5 | CALL STORE
235: 295 298 299 299 | CALL JMP_IMM
236: 296 299 300 300, r14 -> p56, r4 -> p5 | PUSH STORE
237: 297 300 301 301, r4 -> p5, r4 -> p12 [p5] | PUSH SUB_IMM
238: 298 301 302 302, r2 -> p54, r14 -> p62 [p56] | MOV ADD
239: 299 302 303 303, r13 -> p7, r4 -> p12 | PUSH STORE
240: 300 303 304 304, r4 -> p12, r4 -> p9 [p12] | PUSH SUB_IMM
241: 301 304 305 305, r6 -> p44, r13 -> p1 [p7] | MOV ADD
242: 302 305 306 306, r12 -> p13, r4 -> p9 | PUSH STORE
243: 303 306 307 307, r4 -> p9, r4 -> p45 [p9] | PUSH SUB_IMM
244: 304 307 308 308, r5 -> p49, r4 -> p45 | PUSH STORE
245: 305 308 309 309, r4 -> p45, r4 -> p63 [p45] | PUSH SUB_IMM
246: 306 309 310 310, r7 -> p53, r5 -> p60 [p49] | MOV ADD
247: 307 310 311 311, r3 -> p50, r4 -> p63 | PUSH STORE
248: 308 311 312 312, r4 -> p63, r4 -> p11 [p63] | PUSH SUB_IMM
249: 309 312 315 315, r7 -> p53, r44 -> p10 [p4] | MOVZX LOAD
250: 310 315 316 316, r44 -> p10, r0 -> p52 [p61] | MOVZX ZEXT_WORD_TO_DWORD
251: 311 316 317 317, r0 -> p52, r44 -> p14 [p10], r49 -> p2 [p3] | CMP SUB_IMM
252: 312 317 318 318, r49 -> p2 | J JMP_IMM
253: 315 318 321 321, r7 -> p53, r3 -> p57 [p50] | MOV LOAD
254: 316 319 320 322, r45 -> p6 [p55] | CMP SAVE_PC
255: 317 320 323 323, r45 -> p6, r45 -> p5 [p6] | CMP LOAD
256: 318 323 324 324, r3 -> p57, r45 -> p5, r44 -> p56 [p14], r49 -> p12 [p2] | CMP SUB
257: 321 324 325 325, r49 -> p12 | J JMP_IMM
258: 322 325 326 326, r44 -> p7 [p56] | MOV SAVE_PC
259: 323 326 329 329, r44 -> p7, r2 -> p9 [p54] | MOV LOAD
260: 324 329 330 330, r2 -> p9, r2 -> p9, r44 -> p45 [p7], r49 -> p49 [p12] | TEST AND
261: 325 330 331 331, r49 -> p49 | J JMP_IMM
262: 326 331 334 334, r2 -> p9, r45 -> p63 [p5] | CMP LOAD
263: 329 334 335 335, r45 -> p63, r3 -> p57, r44 -> p4 [p45], r49 -> p61 [p49] | CMP SUB
264: 330 335 336 336, r49 -> p61 | J JMP_IMM
265: 331 332 333 337, r13 -> p1, r13 -> p1, r44 -> p10 [p4], r49 -> p3 [p61] | TEST AND
266: 334 336 337 338, r49 -> p3 | J JMP_IMM
267: 335 337 340 340, r13 -> p1, r1 -> p50 [p15] | MOV LOAD
268: 336 340 341 341, r1 -> p50, r1 -> p50, r44 -> p55 [p10], r49 -> p6 [p3] | TEST AND
269: 337 341 342 342, r49 -> p6 | J JMP_IMM
270: 338 342 345 345, r1 -> p50, r2 -> p14 [p9] | MOV LOAD
271: 340 345 348 348, r2 -> p14, r45 -> p2 [p63] | CMP LOAD
272: 341 348 349 349, r45 -> p2, r44 -> p56 [p55], r49 -> p54 [p6] | CMP SUB_IMM
273: 342 349 350 350, r49 -> p54 | J JMP_IMM
274: 345 346 349 351, r1 -> p50, r1 -> p7 [p50] | MOV LOAD
275: 348 350 351 352, r1 -> p7, r1 -> p7, r44 -> p12 [p56], r49 -> p5 [p54] | TEST AND
276: 349 351 352 353, r49 -> p5 | J JMP_IMM
277: 350 352 355 355, r1 -> p7, r2 -> p45 [p14] | MOV LOAD
278: 351 355 358 358, r2 -> p45, r45 -> p49 [p2] | CMP LOAD
279: 352 358 359 359, r45 -> p49, r44 -> p4 [p12], r49 -> p61 [p5] | CMP SUB_IMM
280: 353 359 360 360, r49 -> p61 | J JMP_IMM
281: 355 356 359 361, r2 -> p45, r44 -> p15 [p4] | MOVZX LOAD
282: 358 360 361 362, r44 -> p15, r0 -> p10 [p52] | MOVZX ZEXT_BYTE_TO_DWORD
283: 359 361 364 364, r5 -> p60, r45 -> p3 [p49] | CMP LOAD
284: 360 364 365 365, r0 -> p10, r45 -> p3, r44 -> p9 [p15], r49 -> p63 [p61] | CMP SUB
285: 361 365 366 366, r49 -> p63 | J JMP_IMM
286: 362 363 366 367, r2 -> p45, r5 -> p55 [p60] | MOV LOAD
287: 364 366 367 368, r45 -> p6 [p3] | CMP SAVE_PC
288: 365 367 370 370, r45 -> p6, r45 -> p50 [p6] | CMP LOAD
289: 366 370 371 371, r5 -> p55, r45 -> p50, r44 -> p56 [p9], r49 -> p54 [p63] | CMP SUB
290: 367 371 372 372, r49 -> p54 | J JMP_IMM
291: 368 369 370 373, r5 -> p55, r0 -> p14 [p10] | MOV ADD
292: 370 372 373 374, r0 -> p14, r0 -> p2 [p14], r49 -> p12 [p54] | SHR SHR_IMM
293: 371 373 374 375, r0 -> p2, r5 -> p55, r0 -> p5 [p2], r49 -> p4 [p12] | XOR XOR
294: 372 374 375 376, r0 -> p5, r0 -> p52 [p5], r49 -> p49 [p4] | AND AND_IMM
295: 373 375 376 377, r0 -> p52, r0 -> p15 [p52], r49 -> p61 [p49] | SHL SHL_IMM
296: 374 376 379 379, r0 -> p15, r2 -> p60 [p45] | MOV LOAD
297: 375 377 378 380, r0 -> p15, r12 -> p3 [p13] | LEA LEA
298: 376 379 380 381, r2 -> p60, r2 -> p60, r44 -> p6 [p56], r49 -> p9 [p61] | TEST AND
299: 377 380 381 382, r49 -> p9 | J JMP_IMM
300: 379 381 384 384, r2 -> p60, r45 -> p63 [p50] | CMP LOAD
301: 380 384 385 385, r45 -> p63, r5 -> p55, r44 -> p10 [p6], r49 -> p14 [p9] | CMP SUB
302: 381 385 386 386, r49 -> p14 | J JMP_IMM
303: 382 383 384 387 | JMP JMP_IMM
304: 384 386 389 389, r2 -> p60, r12 -> p54 [p3] | MOV LOAD
305: 385 387 388 390, r44 -> p2 [p10] | MOV SAVE_PC
306: 386 388 389 391, r5 -> p55, r44 -> p2 | MOV STORE
307: 387 389 390 392, r44 -> p12 [p2] | MOV SAVE_PC
308: 389 390 391 393, r2 -> p60, r44 -> p12 | MOV STORE
309: 390 391 392 394, r12 -> p54, r0 -> p5 [p15] | MOVSX SEXT_DWORD_TO_QWORD
310: 391 392 393 395, r0 -> p5, r0 -> p5, r14 -> p4 [p62] | LEA LEA
311: 392 393 394 396, r14 -> p4, r14 -> p52 [p4], r49 -> p49 [p14] | SHL SHL_IMM
312: 393 394 395 397, r14 -> p52, r13 -> p45 [p1] | MOV ADD
313: 394 395 396 398, r44 -> p13 [p12] | ADD SAVE_PC
314: 395 396 399 399, r44 -> p13, r44 -> p56 [p13] | ADD LOAD
315: 396 399 400 400, r13 -> p45, r44 -> p56, r13 -> p61 [p45], r49 -> p50 [p49] | ADD ADD
316: 397 398 401 401, r2 -> p60, r45 -> p6 [p63] | CMP LOAD
317: 398 401 402 402, r45 -> p6, r5 -> p55, r44 -> p9 [p56], r49 -> p3 [p50] | CMP SUB
318: 399 402 403 403, r49 -> p3 | J JMP_IMM
319: 400 403 404 404, r45 -> p10 [p6] | CMP SAVE_PC
320: 401 404 407 407, r45 -> p10, r45 -> p2 [p10] | CMP LOAD
321: 402 407 408 408, r3 -> p57, r45 -> p2, r44 -> p15 [p9], r49 -> p62 [p3] | CMP SUB
322: 403 408 409 409, r49 -> p62 | J JMP_IMM
323: 404 405 406 410, r3 -> p57, r0 -> p4 [p5] | MOV ADD
324: 407 409 410 411, r0 -> p4, r0 -> p14 [p4], r49 -> p1 [p62] | SHR SHR_IMM
325: 408 410 411 412, r0 -> p14, r3 -> p57, r0 -> p12 [p14], r49 -> p13 [p1] | XOR XOR
326: 409 411 412 413, r0 -> p12, r0 -> p45 [p12], r49 -> p49 [p13] | AND AND_IMM
327: 410 412 413 414, r0 -> p45, r0 -> p63 [p45], r49 -> p56 [p49] | SHL SHL_IMM
328: 411 413 416 416, r0 -> p63, r2 -> p50 [p60] | MOV LOAD
329: 412 414 415 417, r0 -> p63, r5 -> p6 [p55] | LEA LEA
330: 413 416 417 418, r2 -> p50, r2 -> p50, r44 -> p10 [p15], r49 -> p9 [p56] | TEST AND
331: 414 417 418 419, r49 -> p9 | J JMP_IMM
332: 416 418 421 421, r2 -> p50, r45 -> p3 [p2] | CMP LOAD
333: 417 421 422 422, r3 -> p57, r45 -> p3, r44 -> p5 [p10], r49 -> p4 [p9] | CMP SUB
334: 418 422 423 423, r49 -> p4 | J JMP_IMM
335: 419 420 421 424, r44 -> p62 [p5] | MOV SAVE_PC
336: 421 423 424 425, r3 -> p57, r44 -> p62 | MOV STORE
337: 422 424 425 426, r44 -> p14 [p62] | MOV SAVE_PC
338: 423 425 426 427, r2 -> p50, r44 -> p14 | MOV STORE
339: 424 426 427 428, r12 -> p54, r2 -> p50 | MOV STORE
340: 425 427 430 430, r13 -> p61, r2 -> p1 [p50] | MOV LOAD
341: 426 428 431 431, r13 -> p61, r7 -> p12 [p53] | MOV LOAD
342: 427 430 431 432, r2 -> p1, r44 -> p13 [p14], r49 -> p45 [p4] | CMP SUB_IMM
343: 428 431 432 433, r49 -> p45 | J JMP_IMM
344: 430 432 433 434, r3 -> p57, r44 -> p49 [p13], r49 -> p60 [p45] | CMP SUB_IMM
345: 431 433 434 435, r49 -> p60 | J JMP_IMM
346: 432 434 435 436, r2 -> p1, r44 -> p55 [p49], r49 -> p15 [p60] | CMP SUB_IMM
347: 433 435 436 437, r2 -> p1, r1 -> p56 [p7] | MOV ADD
348: 434 436 437 438, r3 -> p57, r8 -> p2 [p8] | MOV ADD
349: 435 437 438 439, r49 -> p15 | J JMP_IMM
350: 436 438 439 440, r44 -> p10 [p55] | MOV SAVE_PC
351: 437 439 442 442, r44 -> p10, r10 -> p9 [p58] | MOV LOAD
352: 438 440 441 443, r44 -> p5 [p10] | MOV SAVE_PC
353: 439 441 444 444, r44 -> p5, r6 -> p62 [p44] | MOV LOAD
354: 440 442 445 445, r8 -> p2, r10 -> p9, r1 -> p50 [p56] | MOV LOAD
355: 442 445 448 448, r1 -> p50, r44 -> p53 [p5] | MOVSX LOAD
356: 443 448 449 449, r44 -> p53, r0 -> p14 [p63] | MOVSX SEXT_DWORD_TO_QWORD
357: 444 449 452 452, r0 -> p14, r6 -> p62, r9 -> p4 [p0] | MOV LOAD
358: 445 446 447 453, r45 -> p13 [p3] | CMP SAVE_PC
359: 448 450 453 454, r45 -> p13, r45 -> p45 [p13] | CMP LOAD
360: 449 453 454 455, r9 -> p4, r45 -> p45, r44 -> p49 [p53], r49 -> p60 [p15] | CMP SUB
361: 452 454 455 456, r49 -> p60 | J JMP_IMM
362: 453 455 458 458, r1 -> p50, r44 -> p7 [p49] | MOVSX LOAD
363: 454 458 459 459, r44 -> p7, r0 -> p8 [p14] | MOVSX SEXT_DWORD_TO_QWORD
364: 455 459 462 462, r0 -> p8, r6 -> p62, r0 -> p55 [p8] | MOV LOAD
365: 456 457 458 463, r45 -> p58 [p45] | CMP SAVE_PC
366: 458 460 463 464, r45 -> p58, r45 -> p10 [p58] | CMP LOAD
367: 459 463 464 465, r0 -> p55, r45 -> p10, r44 -> p44 [p7], r49 -> p56 [p60] | CMP SUB
368: 462 464 465 466, r49 -> p56 | J JMP_IMM
369: 463 465 466 467, r7 -> p12, r44 -> p5 [p44], r49 -> p63 [p56] | CMP SUB_IMM
370: 464 466 467 468, r49 -> p63 | J JMP_IMM
371: 465 467 468 469, r44 -> p0 [p5] | MOV SAVE_PC
372: 466 468 471 471, r44 -> p0, r6 -> p3 [p62] | MOV LOAD
373: 467 469 470 472, r7 -> p12, r0 -> p13 [p55] | MOV ADD
374: 468 470 471 473, r0 -> p13, r0 -> p53 [p13], r49 -> p15 [p63] | SHL SHL_IMM
375: 469 471 472 474 | JMP JMP_IMM
376: 471 472 473 475, r0 -> p53, r6 -> p3, r2 -> p49 [p1] | LEA LEA
377: 472 473 474 476, r8 -> p2, r6 -> p3, r1 -> p14 [p50] | LEA LEA
378: 473 474 477 477, r2 -> p49, r0 -> p8 [p53] | MOV LOAD
379: 474 477 478 478, r0 -> p8, r1 -> p14 | MOV STORE
380: 475 478 481 481, r2 -> p49, r0 -> p45 [p8] | MOV LOAD
381: 476 481 482 482, r0 -> p45, r0 -> p45, r44 -> p58 [p0], r49 -> p7 [p15] | TEST AND
382: 477 482 483 483, r49 -> p7 | J JMP_IMM
383: 478 479 480 484, r44 -> p60 [p58] | MOV SAVE_PC
384: 481 483 486 486, r44 -> p60, r0 -> p44 [p45] | MOV LOAD
385: 482 486 487 487, r14 -> p52, r0 -> p44, r44 -> p56 [p60] | MOV LEA
386: 483 487 488 488, r3 -> p57, r44 -> p56 | MOV STORE
387: 484 485 486 489 | JMP JMP_IMM
388: 486 488 489 490, r0 -> p5 [p44] | MOV ADD_IMM
389: 487 489 490 491, r3 -> p57, r2 -> p49 | MOV STORE
390: 488 490 491 492, r7 -> p12, r1 -> p14 | MOV STORE
391: 489 491 492 493 | JMP JMP_IMM
392: 490 492 495 495, r4 -> p11, r3 -> p62 [p57] | POP LOAD
393: 491 493 494 496, r4 -> p11, r4 -> p55 [p11] | POP ADD_IMM
394: 492 494 497 497, r4 -> p55, r5 -> p13 [p6] | POP LOAD
395: 493 495 496 498, r4 -> p55, r4 -> p63 [p55] | POP ADD_IMM
396: 495 496 499 499, r4 -> p63, r12 -> p1 [p54] | POP LOAD
397: 496 497 498 500, r4 -> p63, r4 -> p50 [p63] | POP ADD_IMM
398: 497 498 501 501, r4 -> p50, r13 -> p53 [p61] | POP LOAD
399: 498 499 500 502, r4 -> p50, r4 -> p8 [p50] | POP ADD_IMM
400: 499 500 503 503, r4 -> p8, r14 -> p0 [p52] | POP LOAD
401: 500 501 502 504, r4 -> p8, r4 -> p15 [p8] | POP ADD_IMM
402: 501 502 505 505, r4 -> p15, r44 -> p58 [p56] | RET LOAD
403: 502 503 504 506, r4 -> p15, r4 -> p45 [p15] | RET ADD_IMM
404: 503 505 506 507, r44 -> p58 | RET JMP_REG
405: 504 506 507 508, r0 -> p5, r0 -> p5, r44 -> p60 [p58], r49 -> p44 [p7] | TEST AND
406: 505 507 508 509, r49 -> p44 | J JMP_IMM
407: 506 508 509 510, r12 -> p1, r7 -> p57 [p12] | MOV ADD
408: 507 509 510 511, r44 -> p11 [p60] | CALL SAVE_PC
409: 508 510 511 512, r4 -> p45, r4 -> p6 [p45] | CALL SUB_IMM
410: 509 511 512 513, r44 -> p11, r4 -> p6 | CALL STORE
411: 510 512 513 514 | CALL JMP_IMM
412: 511 513 514 515, r15 -> p59, r4 -> p6 | PUSH STORE
413: 512 514 515 516, r4 -> p6, r4 -> p55 [p6] | PUSH SUB_IMM
414: 513 515 516 517, r7 -> p57, r15 -> p54 [p59] | MOV ADD
415: 514 516 517 518, r14 -> p0, r4 -> p55 | PUSH STORE
416: 515 517 518 519, r4 -> p55, r4 -> p63 [p55] | PUSH SUB_IMM
417: 516 518 519 520, r13 -> p53, r4 -> p63 | PUSH STORE
418: 517 519 520 521, r4 -> p63, r4 -> p61 [p63] | PUSH SUB_IMM
419: 518 520 521 522, r12 -> p1, r4 -> p61 | PUSH STORE
420: 519 521 522 523, r4 -> p61, r4 -> p50 [p61] | PUSH SUB_IMM
421: 520 522 523 524, r5 -> p13, r4 -> p50 | PUSH STORE
422: 521 523 524 525, r4 -> p50, r4 -> p52 [p50] | PUSH SUB_IMM
423: 522 524 525 526, r3 -> p62, r4 -> p52 | PUSH STORE
424: 523 525 526 527, r4 -> p52, r4 -> p8 [p52] | PUSH SUB_IMM
425: 524 526 527 528, r4 -> p8, r4 -> p56 [p8], r49 -> p15 [p44] | SUB SUB_IMM
426: 525 527 530 530, r7 -> p57, r45 -> p58 [p10] | CMP LOAD
427: 526 530 531 531, r45 -> p58, r44 -> p7 [p11], r49 -> p12 [p15] | CMP SUB_IMM
428: 527 531 532 532, r49 -> p12 | J JMP_IMM
429: 528 529 532 533, r15 -> p54, r45 -> p60 [p58] | CMP LOAD
430: 530 532 533 534, r45 -> p60, r44 -> p45 [p7], r49 -> p6 [p12] | CMP SUB_IMM
431: 531 533 534 535, r49 -> p6 | J JMP_IMM
432: 532 534 537 537, r15 -> p54, r3 -> p59 [p62] | MOV LOAD
433: 533 535 536 538, r45 -> p55 [p60] | CMP SAVE_PC
434: 534 536 539 539, r45 -> p55, r45 -> p63 [p55] | CMP LOAD
435: 535 539 540 540, r3 -> p59, r45 -> p63, r44 -> p61 [p45], r49 -> p50 [p6] | CMP SUB
436: 537 540 541 541, r49 -> p50 | J JMP_IMM
437: 538 541 542 542, r44 -> p52 [p61] | MOV SAVE_PC
438: 539 542 545 545, r44 -> p52, r2 -> p8 [p49] | MOV LOAD
439: 540 545 546 546, r2 -> p8, r2 -> p8, r44 -> p44 [p52], r49 -> p10 [p50] | TEST AND
440: 541 546 547 547, r49 -> p10 | J JMP_IMM
441: 542 547 550 550, r2 -> p8, r5 -> p11 [p13] | MOV LOAD
442: 545 550 551 551, r5 -> p11, r5 -> p11, r44 -> p15 [p44], r49 -> p58 [p10] | TEST AND
443: 546 551 552 552, r49 -> p58 | J JMP_IMM
444: 547 548 549 553, r4 -> p56, r4 -> p7 [p56], r49 -> p12 [p58] | ADD ADD_IMM
445: 550 552 555 555, r4 -> p7, r3 -> p62 [p59] | POP LOAD
446: 551 553 554 556, r4 -> p7, r4 -> p60 [p7] | POP ADD_IMM
447: 552 554 557 557, r4 -> p60, r5 -> p55 [p11] | POP LOAD
448: 553 555 556 558, r4 -> p60, r4 -> p45 [p60] | POP ADD_IMM
449: 555 556 559 559, r4 -> p45, r12 -> p6 [p1] | POP LOAD
450: 556 557 558 560, r4 -> p45, r4 -> p61 [p45] | POP ADD_IMM
451: 557 558 561 561, r4 -> p61, r13 -> p49 [p53] | POP LOAD
452: 558 559 560 562, r4 -> p61, r4 -> p52 [p61] | POP ADD_IMM
453: 559 560 563 563, r4 -> p52, r14 -> p50 [p0] | POP LOAD
454: 560 561 562 564, r4 -> p52, r4 -> p13 [p52] | POP ADD_IMM
455: 561 562 565 565, r4 -> p13, r15 -> p44 [p54] | POP LOAD
456: 562 563 564 566, r4 -> p13, r4 -> p10 [p13] | POP ADD_IMM
457: 563 564 567 567, r4 -> p10, r44 -> p56 [p15] | RET LOAD
458: 564 565 566 568, r4 -> p10, r4 -> p58 [p10] | RET ADD_IMM
459: 565 567 568 569, r44 -> p56 | RET JMP_REG
460: 566 568 571 571, r12 -> p6, r45 -> p59 [p63] | CMP LOAD
461: 567 571 572 572, r45 -> p59, r44 -> p7 [p56], r49 -> p11 [p12] | CMP SUB_IMM
462: 568 572 573 573, r49 -> p11 | J JMP_IMM
463: 569 570 573 574, r12 -> p6, r3 -> p60 [p62] | MOV LOAD
464: 571 573 574 575, r3 -> p60, r44 -> p1 [p7], r49 -> p45 [p11] | CMP SUB_IMM
465: 572 574 575 576, r49 -> p45 | J JMP_IMM
466: 573 575 576 577, r45 -> p53 [p59] | CMP SAVE_PC
467: 574 576 579 579, r45 -> p53, r45 -> p61 [p53] | CMP LOAD
468: 575 579 580 580, r3 -> p60, r45 -> p61, r44 -> p0 [p1], r49 -> p52 [p45] | CMP SUB
469: 576 580 581 581, r49 -> p52 | J JMP_IMM
470: 577 578 579 582, r44 -> p54 [p0] | MOV SAVE_PC
471: 579 581 584 584, r44 -> p54, r2 -> p13 [p8] | MOV LOAD
472: 580 584 585 585, r2 -> p13, r2 -> p13, r44 -> p15 [p54], r49 -> p10 [p52] | TEST AND
473: 581 585 586 586, r49 -> p10 | J JMP_IMM
474: 582 586 589 589, r2 -> p13, r0 -> p63 [p5] | MOV LOAD
475: 584 589 590 590, r0 -> p63, r0 -> p56 [p63], r49 -> p12 [p10] | AND AND_IMM
476: 585 587 590 591, r5 -> p55, r2 -> p62 [p13] | MOV LOAD
477: 586 590 591 592, r0 -> p56, r2 -> p62 | MOV STORE
478: 589 591 592 593 | JMP JMP_IMM
479: 590 592 595 595, r14 -> p50, r45 -> p7 [p61] | CMP LOAD
480: 591 595 596 596, r45 -> p7, r44 -> p11 [p15], r49 -> p59 [p12] | CMP SUB_IMM
481: 592 596 597 597, r49 -> p59 | J JMP_IMM
482: 593 594 597 598, r5 -> p55, r0 -> p53 [p56] | MOV LOAD
483: 595 597 600 600, r12 -> p6, r44 -> p1 [p11] | MOVZX LOAD
484: 596 600 601 601, r44 -> p1, r1 -> p45 [p14] | MOVZX ZEXT_BYTE_TO_DWORD
485: 597 598 599 602, r12 -> p6, r7 -> p0 [p57] | MOV ADD
486: 598 599 602 603, r0 -> p53, r2 -> p8 [p62] | MOV LOAD
487: 600 601 604 604, r0 -> p53, r6 -> p54 [p3] | MOV LOAD
488: 601 602 603 605, r44 -> p52 [p1] | CALL SAVE_PC
489: 602 603 604 606, r4 -> p58, r4 -> p5 [p58] | CALL SUB_IMM
490: 603 604 605 607, r44 -> p52, r4 -> p5 | CALL STORE
491: 604 605 606 608 | CALL JMP_IMM
492: 605 606 607 609, r15 -> p44, r4 -> p5 | PUSH STORE
493: 606 607 608 610, r4 -> p5, r4 -> p63 [p5] | PUSH SUB_IMM
494: 607 608 609 611, r2 -> p8, r15 -> p10 [p44] | MOV ADD
495: 608 609 610 612, r14 -> p50, r4 -> p63 | PUSH STORE
496: 609 610 611 613, r4 -> p63, r4 -> p13 [p63] | PUSH SUB_IMM
497: 610 611 612 614, r6 -> p54, r14 -> p61 [p50] | MOV ADD
498: 611 612 613 615, r13 -> p49, r4 -> p13 | PUSH STORE
499: 612 613 614 616, r4 -> p13, r4 -> p15 [p13] | PUSH SUB_IMM
500: 613 614 615 617, r12 -> p6, r4 -> p15 | PUSH STORE
501: 614 615 616 618, r4 -> p15, r4 -> p12 [p15] | PUSH SUB_IMM
502: 615 616 617 619, r5 -> p55, r4 -> p12 | PUSH STORE
503: 616 617 618 620, r4 -> p12, r4 -> p56 [p12] | PUSH SUB_IMM
504: 617 618 619 621, r7 -> p0, r5 -> p11 [p55] | MOV ADD
505: 618 619 620 622, r3 -> p60, r4 -> p56 | PUSH STORE
506: 619 620 621 623, r4 -> p56, r4 -> p14 [p56] | PUSH SUB_IMM
507: 620 621 622 624, r4 -> p14, r4 -> p57 [p14], r49 -> p62 [p59] | SUB SUB_IMM
508: 621 622 625 625, r7 -> p0, r45 -> p3 [p7] | CMP LOAD
509: 622 625 626 626, r45 -> p3, r44 -> p1 [p52], r49 -> p58 [p62] | CMP SUB_IMM
510: 623 624 625 627, r1 -> p45, r4 -> p57 | MOV STORE
511: 624 626 627 628, r49 -> p58 | J JMP_IMM
512: 625 627 630 630, r7 -> p0, r3 -> p5 [p60] | MOV LOAD
513: 626 628 629 631, r45 -> p44 [p3] | CMP SAVE_PC
514: 627 629 632 632, r45 -> p44, r45 -> p63 [p44] | CMP LOAD
515: 628 632 633 633, r3 -> p5, r45 -> p63, r44 -> p50 [p1], r49 -> p13 [p58] | CMP SUB
516: 630 633 634 634, r49 -> p13 | J JMP_IMM
517: 631 634 635 635, r44 -> p15 [p50] | MOV SAVE_PC
518: 632 635 638 638, r44 -> p15, r2 -> p12 [p8] | MOV LOAD
519: 633 638 639 639, r2 -> p12, r2 -> p12, r44 -> p55 [p15], r49 -> p56 [p13] | TEST AND
520: 634 639 640 640, r49 -> p56 | J JMP_IMM
521: 635 640 643 643, r2 -> p12, r45 -> p14 [p63] | CMP LOAD
522: 638 643 644 644, r45 -> p14, r3 -> p5, r44 -> p59 [p55], r49 -> p7 [p56] | CMP SUB
523: 639 644 645 645, r49 -> p7 | J JMP_IMM
524: 640 641 644 646, r5 -> p11, r45 -> p52 [p14] | CMP LOAD
525: 643 645 646 647, r45 -> p52, r44 -> p62 [p59], r49 -> p60 [p7] | CMP SUB_IMM
526: 644 646 647 648, r49 -> p60 | J JMP_IMM
527: 645 647 648 649, r3 -> p5, r44 -> p3 [p62], r49 -> p44 [p60] | CMP SUB_IMM
528: 646 648 649 650, r49 -> p44 | J JMP_IMM
529: 647 649 650 651, r44 -> p1 [p3] | MOV SAVE_PC
530: 648 650 653 653, r44 -> p1, r13 -> p58 [p49] | MOV LOAD
531: 649 653 654 654, r13 -> p58, r13 -> p58, r44 -> p50 [p1], r49 -> p8 [p44] | TEST AND
532: 650 654 655 655, r49 -> p8 | J JMP_IMM
533: 651 655 658 658, r13 -> p58, r0 -> p15 [p53] | MOV LOAD
534: 653 656 657 659, r44 -> p13 [p50] | MOV SAVE_PC
535: 654 658 659 660, r0 -> p15, r44 -> p13 | MOV STORE
536: 655 657 658 661, r5 -> p11, r13 -> p58 | MOV STORE
537: 658 659 660 662, r13 -> p58 | MOV STORE
538: 659 660 663 663, r5 -> p11, r44 -> p63 [p13] | MOVZX LOAD
539: 660 663 664 664, r44 -> p63, r0 -> p55 [p15] | MOVZX ZEXT_WORD_TO_DWORD
540: 661 664 665 665, r0 -> p55, r44 -> p56 [p63], r49 -> p14 [p8] | CMP SUB_IMM
541: 662 665 666 666, r49 -> p14 | J JMP_IMM
542: 663 666 667 667, r0 -> p59 [p55] | XOR ADD
543: 664 667 668 668 | JMP JMP_IMM
544: 665 668 669 669, r0 -> p59, r13 -> p58 | MOV STORE
545: 666 669 670 670, r5 -> p11, r7 -> p7 [p0] | MOV ADD
546: 667 670 671 671, r44 -> p62 [p56] | CALL SAVE_PC
547: 668 671 672 672, r4 -> p57, r4 -> p60 [p57] | CALL SUB_IMM
548: 669 672 673 673, r44 -> p62, r4 -> p60 | CALL STORE
549: 670 673 674 674 | CALL JMP_IMM
550: 671 674 675 675, r12 -> p6, r4 -> p60 | PUSH STORE
551: 672 675 676 676, r4 -> p60, r4 -> p3 [p60] | PUSH SUB_IMM
552: 673 676 677 677, r5 -> p11, r4 -> p3 | PUSH STORE
553: 674 677 678 678, r4 -> p3, r4 -> p49 [p3] | PUSH SUB_IMM
554: 675 678 679 679, r5 -> p1 [p11] | XOR ADD
555: 676 679 680 680, r3 -> p5, r4 -> p49 | PUSH STORE
556: 677 680 681 681, r4 -> p49, r4 -> p44 [p49] | PUSH SUB_IMM
557: 678 681 682 682, r3 -> p53 [p5] | XOR ADD
558: 679 682 683 683, r4 -> p44, r4 -> p50 [p44], r49 -> p13 [p14] | SUB SUB_IMM
559: 680 683 684 684, r4 -> p50, r12 -> p15 [p6] | LEA LEA
560: 681 684 685 685, r7 -> p7, r4 -> p50 | MOV STORE
561: 682 685 686 686, r12 -> p15, r7 -> p63 [p7] | MOV ADD
562: 683 686 687 687, r44 -> p8 [p62] | CALL SAVE_PC
563: 684 687 688 688, r4 -> p50, r4 -> p55 [p50] | CALL SUB_IMM
564: 685 688 689 689, r44 -> p8, r4 -> p55 | CALL STORE
565: 686 689 690 690 | CALL JMP_IMM
566: 687 690 691 691, r7 -> p63, r0 -> p0 [p59] | MOV ADD
567: 688 691 692 692, r7 -> p63 | MOV STORE
568: 689 692 693 693, r7 -> p63 | MOV STORE
569: 690 693 696 696, r4 -> p55, r44 -> p56 [p8] | RET LOAD
570: 691 694 695 697, r4 -> p55, r4 -> p57 [p55] | RET ADD_IMM
571: 692 696 697 698, r44 -> p56 | RET JMP_REG
572: 693 695 696 699, r4 -> p57, r7 -> p60 [p63] | LEA LEA
573: 696 697 698 700, r12 -> p15, r2 -> p3 [p12] | MOV ADD
574: 697 698 699 701, r6 -> p11 [p54] | MOV ADD_IMM
575: 698 699 700 702, r44 -> p49 [p56] | CALL SAVE_PC
576: 699 700 701 703, r4 -> p57, r4 -> p5 [p57] | CALL SUB_IMM
577: 700 701 702 704, r44 -> p49, r4 -> p5 | CALL STORE
578: 701 702 703 705 | CALL JMP_IMM
579: 702 703 704 706, r15 -> p10, r4 -> p5 | PUSH STORE
580: 703 704 705 707, r4 -> p5, r4 -> p44 [p5] | PUSH SUB_IMM
581: 704 705 706 708, r6 -> p11, r15 -> p14 [p10] | MOV ADD
582: 705 706 707 709, r2 -> p3, r6 -> p6 [p11] | MOV ADD
583: 706 707 708 710, r14 -> p61, r4 -> p44 | PUSH STORE
584: 707 708 709 711, r4 -> p44, r4 -> p7 [p44] | PUSH SUB_IMM
585: 708 709 710 712, r2 -> p3, r14 -> p62 [p61] | MOV ADD
586: 709 710 711 713, r13 -> p58, r4 -> p7 | PUSH STORE
587: 710 711 712 714, r4 -> p7, r4 -> p50 [p7] | PUSH SUB_IMM
588: 711 712 713 715, r12 -> p15, r4 -> p50 | PUSH STORE
589: 712 713 714 716, r4 -> p50, r4 -> p59 [p50] | PUSH SUB_IMM
590: 713 714 715 717, r5 -> p1, r4 -> p59 | PUSH STORE
591: 714 715 716 718, r4 -> p59, r4 -> p8 [p59] | PUSH SUB_IMM
592: 715 716 717 719, r3 -> p53, r4 -> p8 | PUSH STORE
593: 716 717 718 720, r4 -> p8, r4 -> p55 [p8] | PUSH SUB_IMM
594: 717 718 719 721, r4 -> p55, r4 -> p63 [p55], r49 -> p12 [p13] | SUB SUB_IMM
595: 718 719 720 722, r7 -> p60, r4 -> p63 | MOV STORE
596: 719 720 721 723, r44 -> p54 [p49] | CALL SAVE_PC
597: 720 721 722 724, r4 -> p63, r4 -> p56 [p63] | CALL SUB_IMM
598: 721 722 723 725, r44 -> p54, r4 -> p56 | CALL STORE
599: 722 723 724 726, r15 -> p14 | CALL JMP_REG
600: 723 724 725 727, r4 -> p56, r4 -> p57 [p56], r49 -> p5 [p12] | SUB SUB_IMM
601: 724 725 728 728, r7 -> p60, r0 -> p10 [p0] | MOV LOAD
602: 725 726 727 729, r6 -> p6, r2 -> p11 [p3] | MOV ADD
603: 726 728 729 730, r0 -> p10, r0 -> p10, r44 -> p44 [p54], r49 -> p61 [p5] | TEST AND
604: 727 729 730 731, r49 -> p61 | J JMP_IMM
605: 728 730 733 733, r0 -> p10, r45 -> p7 [p52] | CMP LOAD
606: 729 733 734 734, r45 -> p7, r44 -> p50 [p44], r49 -> p59 [p61] | CMP SUB_IMM
607: 730 734 735 735, r49 -> p59 | J JMP_IMM
608: 731 732 735 736, r0 -> p10, r6 -> p8 [p6] | MOV LOAD
609: 733 735 736 737, r2 -> p11, r7 -> p55 [p60] | MOV ADD
610: 734 736 737 738, r44 -> p13 [p50] | CALL SAVE_PC
611: 735 737 738 739, r4 -> p57, r4 -> p49 [p57] | CALL SUB_IMM
612: 736 738 739 740, r44 -> p13, r4 -> p49 | CALL STORE
613: 737 739 740 741 | CALL JMP_IMM
614: 738 740 741 742, r12 -> p15, r4 -> p49 | PUSH STORE
615: 739 741 742 743, r4 -> p49, r4 -> p63 [p49] | PUSH SUB_IMM
616: 740 742 743 744, r6 -> p8, r12 -> p56 [p15] | MOV ADD
617: 741 743 744 745, r12 -> p56, r12 -> p12 [p56], r49 -> p0 [p59] | SHR SHR_IMM
618: 742 744 745 746, r5 -> p1, r4 -> p63 | PUSH STORE
619: 743 745 746 747, r4 -> p63, r4 -> p3 [p63] | PUSH SUB_IMM
620: 744 746 747 748, r7 -> p55, r5 -> p54 [p1] | MOV ADD
621: 745 747 748 749, r3 -> p53, r4 -> p3 | PUSH STORE
622: 746 748 749 750, r4 -> p3, r4 -> p5 [p3] | PUSH SUB_IMM
623: 747 749 752 752, r7 -> p55, r7 -> p52 [p55] | MOV LOAD
624: 748 750 751 753, r6 -> p8, r3 -> p44 [p53] | MOV ADD
625: 749 752 753 754, r7 -> p52, r7 -> p52, r44 -> p61 [p13], r49 -> p6 [p0] | TEST AND
626: 750 753 754 755, r49 -> p6 | J JMP_IMM
627: 752 754 755 756, r44 -> p60 [p61] | MOV SAVE_PC
628: 753 755 758 758, r44 -> p60, r6 -> p50 [p8] | MOV LOAD
629: 754 758 759 759, r6 -> p50, r6 -> p50, r44 -> p57 [p60], r49 -> p49 [p6] | TEST AND
630: 755 759 760 760, r49 -> p49 | J JMP_IMM
631: 756 760 763 763, r6 -> p50, r0 -> p15 [p10] | MOV LOAD
632: 758 761 762 764, r44 -> p56 [p57] | MOV SAVE_PC
633: 759 763 764 765, r0 -> p15, r44 -> p56 | MOV STORE
634: 760 762 763 766, r3 -> p44, r2 -> p59 [p11] | MOV ADD
635: 763 764 765 767, r3 -> p44, r3 -> p63 [p44], r49 -> p1 [p49] | AND AND_IMM
636: 764 765 766 768, r0 -> p3 [p15] | MOV ADD_IMM
637: 765 766 767 769, r2 -> p59, r2 -> p55 [p59], r49 -> p53 [p1] | SHR SHR_IMM
638: 766 767 768 770, r3 -> p63, r1 -> p13 [p45] | MOV ADD
639: 767 768 769 771, r6 -> p50 | MOV STORE
640: 768 769 770 772, r6 -> p50 | MOV STORE
641: 769 770 771 773, r2 -> p55, r2 -> p0 [p55], r49 -> p61 [p53] | AND AND_IMM
642: 770 771 772 774, r0 -> p3, r1 -> p13, r0 -> p8 [p3], r49 -> p60 [p61] | SHL SHL
643: 771 772 775 775, r5 -> p54, r45 -> p6 [p7] | CMP LOAD
644: 772 775 776 776, r45 -> p6, r44 -> p10 [p56], r49 -> p57 [p60] | CMP SUB
645: 773 774 775 777, r12 -> p12, r6 -> p50 | MOV STORE
646: 774 776 777 778, r2 -> p0, r6 -> p50, r44 -> p11 [p10] | MOV LEA
647: 775 777 778 779, r0 -> p8, r44 -> p11 | MOV STORE
648: 776 778 779 780, r49 -> p57 | J JMP_IMM
649: 777 779 780 781, r6 -> p50 | MOV STORE
650: 778 780 781 782, r6 -> p50 | MOV STORE
651: 779 781 782 783, r6 -> p50, r5 -> p54 | MOV STORE
652: 780 782 783 784 | JMP JMP_IMM
653: 781 783 784 785, r6 -> p50, r5 -> p54 | MOV STORE
654: 782 784 785 786, r12 -> p12, r5 -> p54 | MOV STORE
655: 783 785 788 788, r4 -> p5, r3 -> p44 [p63] | POP LOAD
656: 784 786 787 789, r4 -> p5, r4 -> p49 [p5] | POP ADD_IMM
657: 785 787 790 790, r4 -> p49, r5 -> p15 [p54] | POP LOAD
658: 786 788 789 791, r4 -> p49, r4 -> p59 [p49] | POP ADD_IMM
659: 788 789 792 792, r4 -> p59, r12 -> p1 [p12] | POP LOAD
660: 789 790 791 793, r4 -> p59, r4 -> p45 [p59] | POP ADD_IMM
661: 790 791 794 794, r4 -> p45, r44 -> p55 [p11] | RET LOAD
662: 791 792 793 795, r4 -> p45, r4 -> p53 [p45] | RET ADD_IMM
663: 792 794 795 796, r44 -> p55 | RET JMP_REG
664: 793 795 796 797, r0 -> p3 [p8] | XOR ADD
665: 794 796 797 798, r4 -> p53, r4 -> p61 [p53], r49 -> p7 [p57] | ADD ADD_IMM
666: 795 797 800 800, r4 -> p61, r44 -> p56 [p55] | RET LOAD
667: 796 798 799 801, r4 -> p61, r4 -> p60 [p61] | RET ADD_IMM
668: 797 800 801 802, r44 -> p56 | RET JMP_REG
669: 798 799 800 803, r0 -> p3, r4 -> p60 | MOV STORE
670: 800 801 802 804, r0 -> p3, r0 -> p10 [p3], r49 -> p63 [p7] | ADD ADD_IMM
671: 801 802 803 805, r49 -> p63 | J JMP_IMM
672: 802 803 806 806, r4 -> p60, r11 -> p5 [p51] | MOV LOAD
673: 803 806 807 807, r11 -> p5, r11 -> p5, r44 -> p54 [p56], r49 -> p49 [p63] | TEST AND
674: 804 807 808 808, r49 -> p49 | J JMP_IMM
675: 805 808 811 811, r4 -> p60, r2 -> p12 [p0] | MOV LOAD
676: 806 811 814 814, r2 -> p12, r0 -> p59 [p10] | MOV LOAD
677: 807 814 815 815, r0 -> p59, r0 -> p59, r44 -> p11 [p54], r49 -> p45 [p49] | TEST AND
678: 808 815 816 816, r49 -> p45 | J JMP_IMM
679: 811 816 819 819, r0 -> p59, r44 -> p8 [p11] | MOVZX LOAD
680: 814 819 820 820, r44 -> p8, r0 -> p53 [p59] | MOVZX ZEXT_WORD_TO_DWORD
681: 815 820 823 823, r0 -> p53, r1 -> p57 [p13] | MOV LOAD
682: 816 821 824 824, r0 -> p53, r44 -> p55 [p8] | MOVZX LOAD
683: 819 824 825 825, r44 -> p55, r0 -> p61 [p53] | MOVZX ZEXT_BYTE_TO_DWORD
684: 820 823 824 826, r1 -> p57, r4 -> p60 | MOV STORE
685: 823 825 826 827, r0 -> p61, r0 -> p61, r44 -> p3 [p55], r49 -> p7 [p45] | TEST AND
686: 824 826 827 828, r49 -> p7 | J JMP_IMM
687: 825 827 828 829, r0 -> p61, r0 -> p51 [p61], r49 -> p56 [p7] | SUB SUB_IMM
688: 826 828 829 830, r4 -> p60 | MOV STORE
689: 827 829 830 831, r0 -> p51, r0 -> p63 [p51], r49 -> p0 [p56] | ADD ADD_IMM
690: 828 830 831 832, r0 -> p63, r4 -> p60 | MOV STORE
691: 829 831 834 834, r4 -> p60, r3 -> p10 [p44] | MOV LOAD
692: 830 832 835 835, r4 -> p60, r1 -> p54 [p57] | MOV LOAD
693: 831 833 836 836, r4 -> p60, r2 -> p49 [p12] | MOV LOAD
694: 832 835 838 838, r1 -> p54, r3 -> p10, r44 -> p11 [p3] | MOVZX LOAD
695: 834 838 839 839, r44 -> p11, r0 -> p59 [p63] | MOVZX ZEXT_BYTE_TO_DWORD
696: 835 839 840 840, r0 -> p59, r44 -> p13 [p11], r49 -> p8 [p0] | CMP SUB_IMM
697: 836 840 841 841, r49 -> p8 | J JMP_IMM
698: 838 841 842 842, r0 -> p59, r44 -> p53 [p13], r49 -> p55 [p8] | CMP SUB_IMM
699: 839 842 843 843, r49 -> p55 | J JMP_IMM
700: 840 843 844 844, r0 -> p59, r44 -> p45 [p53], r49 -> p61 [p55] | CMP SUB_IMM
701: 841 844 845 845, r49 -> p61 | J JMP_IMM
702: 842 845 848 848, r4 -> p60, r45 -> p7 [p6] | ADD LOAD
703: 843 848 849 849, r45 -> p7, r44 -> p51 [p45], r49 -> p56 [p61] | ADD ADD_IMM
704: 844 849 850 850, r44 -> p51, r4 -> p60 | ADD STORE
705: 845 850 853 853, r4 -> p60, r0 -> p44 [p59] | MOV LOAD
706: 848 851 854 854, r4 -> p60, r45 -> p57 [p7] | CMP LOAD
707: 849 854 855 855, r45 -> p57, r0 -> p44, r44 -> p12 [p51], r49 -> p3 [p56] | CMP SUB
708: 850 855 856 856, r49 -> p3 | J JMP_IMM
709: 853 856 859 859, r4 -> p60, r3 -> p63 [p10] | MOV LOAD
710: 854 857 860 860, r4 -> p60, r1 -> p11 [p54] | MOV LOAD
711: 855 858 861 861, r4 -> p60, r2 -> p0 [p49] | MOV LOAD
712: 856 860 863 863, r1 -> p11, r3 -> p63, r44 -> p13 [p12] | MOVZX LOAD
713: 859 863 864 864, r44 -> p13, r0 -> p8 [p44] | MOVZX ZEXT_BYTE_TO_DWORD
714: 860 864 865 865, r0 -> p8, r44 -> p53 [p13], r49 -> p55 [p3] | CMP SUB_IMM
715: 861 865 866 866, r49 -> p55 | J JMP_IMM
716: 863 866 867 867, r0 -> p8, r44 -> p6 [p53], r49 -> p45 [p55] | CMP SUB_IMM
717: 864 867 868 868, r49 -> p45 | J JMP_IMM
718: 865 868 869 869, r0 -> p8, r44 -> p61 [p6], r49 -> p59 [p45] | CMP SUB_IMM
719: 866 869 870 870, r49 -> p59 | J JMP_IMM
720: 867 870 873 873, r4 -> p60, r45 -> p7 [p57] | ADD LOAD
721: 868 873 874 874, r45 -> p7, r44 -> p51 [p61], r49 -> p56 [p59] | ADD ADD_IMM
722: 869 874 875 875, r44 -> p51, r4 -> p60 | ADD STORE
723: 870 875 878 878, r4 -> p60, r0 -> p10 [p8] | MOV LOAD
724: 873 876 879 879, r4 -> p60, r45 -> p54 [p7] | CMP LOAD
725: 874 879 880 880, r45 -> p54, r0 -> p10, r44 -> p49 [p51], r49 -> p12 [p56] | CMP SUB
726: 875 880 881 881, r49 -> p12 | J JMP_IMM
727: 878 881 882 882 | NOP NOP
728: 879 882 885 885, r4 -> p60, r0 -> p44 [p10] | MOV LOAD
729: 880 883 884 886, r4 -> p60, r4 -> p13 [p60], r49 -> p3 [p12] | ADD ADD_IMM
730: 881 884 887 887, r4 -> p13, r3 -> p53 [p63] | POP LOAD
731: 882 885 886 888, r4 -> p13, r4 -> p55 [p13] | POP ADD_IMM
732: 885 886 889 889, r4 -> p55, r5 -> p6 [p15] | POP LOAD
733: 886 887 888 890, r4 -> p55, r4 -> p45 [p55] | POP ADD_IMM
734: 887 888 891 891, r4 -> p45, r12 -> p57 [p1] | POP LOAD
735: 888 889 890 892, r4 -> p45, r4 -> p61 [p45] | POP ADD_IMM
736: 889 890 893 893, r4 -> p61, r13 -> p59 [p58] | POP LOAD
737: 890 891 892 894, r4 -> p61, r4 -> p8 [p61] | POP ADD_IMM
738: 891 892 895 895, r4 -> p8, r14 -> p7 [p62] | POP LOAD
739: 892 893 894 896, r4 -> p8, r4 -> p51 [p8] | POP ADD_IMM
740: 893 894 897 897, r4 -> p51, r15 -> p56 [p14] | POP LOAD
741: 894 895 896 898, r4 -> p51, r4 -> p10 [p51] | POP ADD_IMM
742: 895 896 899 899, r4 -> p10, r44 -> p60 [p49] | RET LOAD
743: 896 897 898 900, r4 -> p10, r4 -> p12 [p10] | RET ADD_IMM
744: 897 899 900 901, r44 -> p60 | RET JMP_REG
745: 898 900 903 903, r4 -> p12, r8 -> p63 [p2] | MOV LOAD
746: 899 903 904 904, r8 -> p63, r8 -> p63, r44 -> p13 [p60], r49 -> p15 [p3] | TEST AND
747: 900 904 905 905, r49 -> p15 | J JMP_IMM
748: 901 902 903 906, r9 -> p55 [p4] | XOR ADD
749: 903 905 908 908, r9 -> p55, r8 -> p63, r6 -> p1 [p50] | MOV LOAD
750: 904 906 907 909, r9 -> p55, r10 -> p45 [p9] | MOV ADD
751: 905 908 909 910, r6 -> p1, r6 -> p1, r44 -> p58 [p13], r49 -> p61 [p15] | TEST AND
752: 906 909 910 911, r49 -> p61 | J JMP_IMM
753: 908 910 911 912, r7 -> p62 [p52] | XOR ADD
754: 909 911 912 913, r11 -> p8 [p5] | MOV ADD_IMM
755: 910 912 913 914 | NOP NOP
756: 911 913 914 915, r7 -> p62, r1 -> p14 [p11] | MOV ADD
757: 912 914 915 916, r11 -> p8, r0 -> p51 [p44] | MOV ADD
758: 913 915 916 917, r0 -> p51, r1 -> p14, r0 -> p49 [p51], r49 -> p10 [p61] | SHL SHL
759: 914 916 917 918, r0 -> p49, r6 -> p1, r44 -> p2 [p58], r49 -> p60 [p10] | TEST AND
760: 915 917 918 919, r49 -> p60 | J JMP_IMM
761: 916 918 919 920, r0 -> p49, r0 -> p3 [p49] | NOT NOT
762: 917 919 920 921, r6 -> p1, r0 -> p3, r6 -> p4 [p1], r49 -> p50 [p60] | AND AND
763: 918 920 923 923, r8 -> p63, r0 -> p9 [p3] | MOV LOAD
764: 919 923 924 924, r0 -> p9, r10 -> p45, r0 -> p13 [p9] | LEA LEA
765: 920 924 925 925, r0 -> p13, r0 -> p15 [p13], r49 -> p52 [p50] | SHL SHL_IMM
766: 921 925 926 926, r1 -> p14, r0 -> p15, r2 -> p5 [p0] | LEA LEA
767: 923 926 927 927, r2 -> p5, r44 -> p11 [p2], r49 -> p44 [p52] | CMP SUB_IMM
768: 924 927 928 928, r49 -> p44 | J JMP_IMM
769: 925 928 929 929, r2 -> p5, r44 -> p51 [p11], r49 -> p61 [p44] | CMP SUB_IMM
770: 926 929 930 930, r49 -> p61 | J JMP_IMM
771: 927 930 931 931, r2 -> p5, r44 -> p58 [p51], r49 -> p10 [p61] | CMP SUB_IMM
772: 928 931 932 932, r49 -> p10 | J JMP_IMM
773: 929 932 933 933, r2 -> p5, r44 -> p49 [p58], r49 -> p1 [p10] | CMP SUB_IMM
774: 930 933 934 934, r49 -> p1 | J JMP_IMM
775: 931 934 935 935, r2 -> p5, r0 -> p60 [p15] | LEA LEA
776: 932 935 936 936, r0 -> p60, r44 -> p3 [p49], r49 -> p9 [p1] | CMP SUB_IMM
777: 933 936 937 937, r49 -> p9 | J JMP_IMM
778: 934 937 938 938, r2 -> p5, r44 -> p13 [p3], r49 -> p50 [p9] | CMP SUB_IMM
779: 935 938 939 939, r0 -> p0 [p60] | MOV ADD_IMM
780: 936 939 940 940, r49 -> p50 | J JMP_IMM
781: 937 940 941 941, r3 -> p53, r0 -> p0, r3 -> p2 [p53], r49 -> p52 [p50] | ADD ADD
782: 938 941 942 942, r6 -> p4, r6 -> p4, r44 -> p11 [p13], r49 -> p44 [p52] | TEST AND
783: 939 942 943 943, r49 -> p44 | J JMP_IMM
784: 940 943 944 944, r9 -> p55, r9 -> p51 [p55], r49 -> p61 [p44] | ADD ADD_IMM
785: 941 944 945 945, r9 -> p51, r44 -> p58 [p11], r49 -> p10 [p61] | CMP SUB_IMM
786: 942 945 946 946, r49 -> p10 | J JMP_IMM
787: 943 946 949 949, r9 -> p51, r8 -> p63, r6 -> p15 [p4] | MOV LOAD
788: 944 947 948 950, r9 -> p51, r10 -> p49 [p45] | MOV ADD
789: 945 949 950 951, r6 -> p15, r6 -> p15, r44 -> p1 [p58], r49 -> p3 [p10] | TEST AND
790: 946 950 951 952, r49 -> p3 | J JMP_IMM
791: 949 951 952 953, r9 -> p51, r9 -> p9 [p51], r49 -> p60 [p3] | ADD ADD_IMM
792: 950 952 953 954, r9 -> p9, r44 -> p53 [p1], r49 -> p50 [p60] | CMP SUB_IMM
793: 951 953 954 955, r49 -> p50 | J JMP_IMM
794: 952 954 957 957, r8 -> p63, r8 -> p13 [p63] | MOV LOAD
795: 953 957 958 958, r8 -> p13, r8 -> p13, r44 -> p52 [p53], r49 -> p55 [p50] | TEST AND
796: 954 958 959 959, r49 -> p55 | J JMP_IMM
797: 955 956 957 960, r12 -> p57, r7 -> p44 [p62] | MOV ADD
798: 957 959 960 961, r44 -> p11 [p52] | CALL SAVE_PC
799: 958 960 961 962, r4 -> p12, r4 -> p61 [p12] | CALL SUB_IMM
800: 959 961 962 963, r44 -> p11, r4 -> p61 | CALL STORE
801: 960 962 963 964 | CALL JMP_IMM
802: 961 963 966 966, r7 -> p44, r0 -> p4 [p0] | MOV LOAD
803: 962 966 967 967, r0 -> p4, r0 -> p4, r44 -> p45 [p11], r49 -> p58 [p55] | TEST AND
804: 963 967 968 968, r49 -> p58 | J JMP_IMM
805: 964 965 966 969, r44 -> p10 [p45] | MOV SAVE_PC
806: 966 968 971 971, r44 -> p10, r1 -> p51 [p14] | MOV LOAD
807: 967 969 970 972 | JMP JMP_IMM
808: 968 970 973 973, r0 -> p4, r2 -> p3 [p5] | MOV LOAD
809: 969 971 972 974, r1 -> p51, r0 -> p4 | MOV STORE
810: 971 973 974 975, r2 -> p3, r2 -> p3, r44 -> p1 [p10], r49 -> p60 [p58] | TEST AND
811: 972 974 975 976, r49 -> p60 | J JMP_IMM
812: 973 975 976 977, r44 -> p63 [p1] | MOV SAVE_PC
813: 974 976 977 978, r0 -> p4, r44 -> p63 | MOV STORE
814: 975 977 978 979, r7 -> p44 | MOV STORE
815: 976 978 979 980, r7 -> p44 | MOV STORE
816: 977 979 982 982, r4 -> p61, r44 -> p53 [p63] | RET LOAD
817: 978 980 981 983, r4 -> p61, r4 -> p50 [p61] | RET ADD_IMM
818: 979 982 983 984, r44 -> p53 | RET JMP_REG
819: 980 981 982 985, r5 -> p6, r5 -> p6, r44 -> p62 [p53], r49 -> p52 [p60] | TEST AND
820: 982 983 984 986, r49 -> p52 | J JMP_IMM
821: 983 984 985 987, r4 -> p50, r4 -> p12 [p50], r49 -> p0 [p52] | ADD ADD_IMM
822: 984 985 986 988, r3 -> p2, r0 -> p11 [p4] | MOV ADD
823: 985 986 989 989, r4 -> p12, r3 -> p55 [p2] | POP LOAD
824: 986 987 988 990, r4 -> p12, r4 -> p45 [p12] | POP ADD_IMM
825: 987 988 991 991, r4 -> p45, r5 -> p14 [p6] | POP LOAD
826: 988 989 990 992, r4 -> p45, r4 -> p5 [p45] | POP ADD_IMM
827: 989 990 993 993, r4 -> p5, r12 -> p10 [p57] | POP LOAD
828: 990 991 992 994, r4 -> p5, r4 -> p58 [p5] | POP ADD_IMM
829: 991 992 995 995, r4 -> p58, r44 -> p1 [p62] | RET LOAD
830: 992 993 994 996, r4 -> p58, r4 -> p63 [p58] | RET ADD_IMM
831: 993 995 996 997, r44 -> p1 | RET JMP_REG
832: 994 996 997 998, r15 -> p56, r2 -> p61 [p3] | MOV ADD
833: 995 997 998 999, r0 -> p11, r13 -> p59 | MOV STORE
834: 996 998 999 1000, r13 -> p59 | MOV STORE
835: 997 999 1000 1001, r13 -> p59 | MOV STORE
836: 998 1000 1003 1003, r2 -> p61, r6 -> p53 [p15] | MOV LOAD
837: 999 1001 1002 1004, r13 -> p59 | MOV STORE
838: 1000 1002 1005 1005, r4 -> p63, r0 -> p60 [p11] | MOV LOAD
839: 1001 1003 1004 1006, r13 -> p59 | MOV STORE
840: 1003 1004 1005 1007, r13 -> p59 | MOV STORE
841: 1004 1005 1006 1008, r6 -> p53, r13 -> p59 | MOV STORE
842: 1005 1006 1007 1009, r0 -> p60, r13 -> p59 | MOV STORE
843: 1006 1007 1010 1010, r5 -> p14, r44 -> p50 [p1] | MOVZX LOAD
844: 1007 1010 1011 1011, r44 -> p50, r1 -> p52 [p51] | MOVZX ZEXT_WORD_TO_DWORD
845: 1008 1011 1012 1012, r1 -> p52, r0 -> p4 [p60] | LEA LEA
846: 1009 1012 1013 1013, r0 -> p4, r44 -> p2 [p50], r49 -> p12 [p0] | CMP SUB_IMM
847: 1010 1013 1014 1014, r49 -> p12 | J JMP_IMM
848: 1011 1014 1015 1015, r1 -> p52, r44 -> p6 [p2], r49 -> p45 [p12] | CMP SUB_IMM
849: 1012 1015 1016 1016, r49 -> p45 | J JMP_IMM
850: 1013 1016 1017 1017, r1 -> p52, r44 -> p57 [p6], r49 -> p5 [p45] | CMP SUB_IMM
851: 1014 1017 1018 1018, r49 -> p5 | J JMP_IMM
852: 1015 1018 1019 1019, r1 -> p52, r44 -> p62 [p57], r49 -> p58 [p5] | CMP SUB_IMM
853: 1016 1019 1020 1020 | NOP NOP
854: 1017 1020 1021 1021, r49 -> p58 | J JMP_IMM
855: 1018 1021 1022 1022, r1 -> p52, r44 -> p3 [p62], r49 -> p15 [p58] | CMP SUB_IMM
856: 1019 1022 1023 1023 | NOP NOP
857: 1020 1023 1024 1024, r49 -> p15 | J JMP_IMM
858: 1021 1024 1025 1025, r1 -> p52, r44 -> p11 [p3], r49 -> p1 [p15] | CMP SUB_IMM
859: 1022 1025 1026 1026, r49 -> p1 | J JMP_IMM
860: 1023 1026 1027 1027, r1 -> p52, r44 -> p51 [p11], r49 -> p60 [p1] | CMP SUB_IMM
861: 1024 1027 1028 1028, r49 -> p60 | J JMP_IMM
862: 1025 1028 1031 1031, r5 -> p14, r0 -> p50 [p4] | MOV LOAD
863: 1026 1031 1032 1032, r0 -> p50, r0 -> p0 [p50], r49 -> p2 [p60] | AND AND_IMM
864: 1027 1032 1033 1033, r0 -> p0, r44 -> p12 [p51], r49 -> p6 [p2] | CMP SUB_IMM
865: 1028 1033 1034 1034, r49 -> p6 | J JMP_IMM
866: 1031 1034 1035 1035, r44 -> p45 [p12] | MOV SAVE_PC
867: 1032 1035 1038 1038, r44 -> p45, r8 -> p57 [p13] | MOV LOAD
868: 1033 1038 1039 1039, r5 -> p14, r8 -> p57, r44 -> p5 [p45], r49 -> p62 [p6] | CMP SUB
869: 1034 1039 1040 1040, r49 -> p62 | J JMP_IMM
870: 1035 1036 1037 1041, r44 -> p58 [p5] | MOV SAVE_PC
871: 1038 1040 1043 1043, r44 -> p58, r7 -> p3 [p44] | MOV LOAD
872: 1039 1043 1044 1044, r5 -> p14, r7 -> p3, r44 -> p15 [p58], r49 -> p11 [p62] | CMP SUB
873: 1040 1044 1045 1045, r49 -> p11 | J JMP_IMM
874: 1041 1042 1043 1046, r44 -> p1 [p15] | MOV SAVE_PC
875: 1043 1045 1048 1048, r44 -> p1, r11 -> p4 [p8] | MOV LOAD
876: 1044 1048 1049 1049, r5 -> p14, r11 -> p4, r44 -> p50 [p1], r49 -> p60 [p11] | CMP SUB
877: 1045 1049 1050 1050, r49 -> p60 | J JMP_IMM
878: 1046 1047 1048 1051, r44 -> p51 [p50] | MOV SAVE_PC
879: 1048 1050 1053 1053, r44 -> p51, r9 -> p2 [p9] | MOV LOAD
880: 1049 1053 1054 1054, r5 -> p14, r9 -> p2, r44 -> p12 [p51], r49 -> p13 [p60] | CMP SUB
881: 1050 1054 1055 1055, r49 -> p13 | J JMP_IMM
882: 1051 1052 1053 1056, r44 -> p45 [p12] | MOV SAVE_PC
883: 1053 1055 1058 1058, r44 -> p45, r10 -> p6 [p49] | MOV LOAD
884: 1054 1058 1059 1059, r5 -> p14, r10 -> p6, r44 -> p5 [p45], r49 -> p44 [p13] | CMP SUB
885: 1055 1059 1060 1060, r49 -> p44 | J JMP_IMM
886: 1056 1057 1058 1061, r1 -> p52, r44 -> p58 [p5], r49 -> p62 [p44] | CMP SUB_IMM
887: 1058 1060 1061 1062, r49 -> p62 | J JMP_IMM
888: 1059 1061 1062 1063, r1 -> p52, r44 -> p15 [p58], r49 -> p8 [p62] | CMP SUB_IMM
889: 1060 1062 1063 1064, r1 -> p1 [p52] | SET ADD
890: 1061 1063 1064 1065, r49 -> p8, r1 -> p11 [p1] | SET ADD_IMM
891: 1062 1064 1065 1066 | JMP JMP_IMM
892: 1063 1065 1066 1067, r6 -> p53, r6 -> p53, r44 -> p50 [p15], r49 -> p9 [p8] | TEST AND
893: 1064 1066 1067 1068, r1 -> p11, r13 -> p59 | MOV STORE
894: 1065 1067 1068 1069, r49 -> p9 | J JMP_IMM
895: 1066 1068 1069 1070, r13 -> p59, r6 -> p53 | MOV STORE
896: 1067 1069 1070 1071, r14 -> p7, r14 -> p7, r44 -> p51 [p50], r49 -> p60 [p9] | TEST AND
897: 1068 1070 1071 1072, r2 -> p61, r44 -> p12 [p51] | MOV LEA
898: 1069 1071 1072 1073, r13 -> p59, r44 -> p12 | MOV STORE
899: 1070 1072 1073 1074, r49 -> p60 | J JMP_IMM
900: 1071 1073 1076 1076, r14 -> p7, r12 -> p49 [p10] | MOV LOAD
901: 1072 1074 1077 1077, r13 -> p59, r6 -> p45 [p53] | MOV LOAD
902: 1073 1075 1078 1078, r13 -> p59, r8 -> p13 [p57] | MOV LOAD
903: 1074 1076 1079 1079, r12 -> p49, r0 -> p5 [p0] | MOV LOAD
904: 1076 1077 1080 1080, r12 -> p49, r2 -> p44 [p61] | MOV LOAD
905: 1077 1079 1080 1081, r0 -> p5, r6 -> p45, r44 -> p58 [p12], r49 -> p62 [p60] | CMP SUB
906: 1078 1080 1081 1082, r49 -> p62 | J JMP_IMM
907: 1079 1081 1082 1083, r2 -> p44, r8 -> p13, r44 -> p52 [p58], r49 -> p1 [p62] | CMP SUB
908: 1080 1082 1083 1084, r49 -> p1 | J JMP_IMM
909: 1081 1083 1084 1085, r8 -> p13, r44 -> p15 [p52], r49 -> p8 [p1] | CMP SUB_IMM
910: 1082 1084 1085 1086, r49 -> p8 | J JMP_IMM
911: 1083 1085 1086 1087, r2 -> p44, r44 -> p50 [p15], r49 -> p9 [p8] | CMP SUB_IMM
912: 1084 1086 1087 1088, r49 -> p9 | J JMP_IMM
913: 1085 1087 1088 1089, r0 -> p5, r6 -> p45, r44 -> p51 [p50], r49 -> p10 [p9] | CMP SUB
914: 1086 1088 1089 1090 | XCHG NOP
915: 1087 1089 1090 1091, r49 -> p10 | J JMP_IMM
916: 1088 1090 1091 1092, r2 -> p44, r8 -> p13, r44 -> p53 [p51], r49 -> p57 [p10] | CMP SUB
917: 1089 1091 1092 1093 | NOP NOP
918: 1090 1092 1093 1094, r49 -> p57 | J JMP_IMM
919: 1091 1093 1094 1095, r8 -> p13, r0 -> p0 [p5] | MOV ADD
920: 1092 1094 1095 1096, r0 -> p0, r2 -> p44, r0 -> p61 [p0], r49 -> p12 [p57] | SUB SUB
921: 1093 1095 1096 1097 | NOP NOP
922: 1094 1096 1097 1098 | JMP JMP_IMM
923: 1095 1097 1098 1099, r0 -> p61, r0 -> p61, r44 -> p60 [p53], r49 -> p58 [p12] | TEST AND
924: 1096 1098 1099 1100, r49 -> p58 | J JMP_IMM
925: 1097 1099 1100 1101, r8 -> p13, r44 -> p62 [p60], r49 -> p52 [p58] | CMP SUB_IMM
926: 1098 1100 1101 1102, r49 -> p52 | J JMP_IMM
927: 1099 1101 1102 1103, r6 -> p45, r44 -> p1 [p62], r49 -> p15 [p52] | CMP SUB_IMM
928: 1100 1102 1103 1104, r49 -> p15 | J JMP_IMM
929: 1101 1103 1104 1105, r12 -> p49, r7 -> p8 [p3] | MOV ADD
930: 1102 1104 1105 1106 | JMP JMP_IMM
931: 1103 1105 1108 1108, r7 -> p8, r1 -> p50 [p11] | MOV LOAD
932: 1104 1108 1109 1109, r1 -> p50, r1 -> p50, r44 -> p9 [p1], r49 -> p51 [p15] | TEST AND
933: 1105 1109 1110 1110, r49 -> p51 | J JMP_IMM
934: 1106 1110 1113 1113, r1 -> p50, r0 -> p10 [p61] | MOV LOAD
935: 1108 1111 1114 1114, r1 -> p50, r2 -> p5 [p44] | MOV LOAD
936: 1109 1113 1114 1115, r0 -> p10, r6 -> p45, r44 -> p0 [p9], r49 -> p57 [p51] | CMP SUB
937: 1110 1114 1115 1116, r49 -> p57 | J JMP_IMM
938: 1113 1115 1116 1117, r8 -> p13, r2 -> p5, r44 -> p53 [p0], r49 -> p12 [p57] | CMP SUB
939: 1114 1116 1117 1118, r49 -> p12 | J JMP_IMM
940: 1115 1117 1118 1119, r0 -> p10, r6 -> p45, r44 -> p60 [p53], r49 -> p58 [p12] | CMP SUB
941: 1116 1118 1119 1120, r49 -> p58 | J JMP_IMM
942: 1117 1119 1120 1121, r8 -> p13, r2 -> p5, r44 -> p62 [p60], r49 -> p52 [p58] | CMP SUB
943: 1118 1120 1121 1122 | NOP NOP
944: 1119 1121 1122 1123, r49 -> p52 | J JMP_IMM
945: 1120 1122 1123 1124, r1 -> p50, r13 -> p59 | MOV STORE
946: 1121 1123 1124 1125, r13 -> p59, r1 -> p50 | MOV STORE
947: 1122 1124 1125 1126, r7 -> p8, r13 -> p59 | MOV STORE
948: 1123 1125 1126 1127, r13 -> p59, r7 -> p8 | MOV STORE
949: 1124 1126 1127 1128, r12 -> p49, r13 -> p59 | MOV STORE
950: 1125 1127 1130 1130, r13 -> p59, r45 -> p3 [p54] | CMP LOAD
951: 1126 1130 1131 1131, r45 -> p3, r44 -> p11 [p62], r49 -> p1 [p52] | CMP SUB
952: 1127 1131 1132 1132, r49 -> p1 | J JMP_IMM
953: 1128 1129 1132 1133, r5 -> p14, r45 -> p15 [p3] | CMP LOAD
954: 1130 1132 1133 1134, r45 -> p15, r44 -> p61 [p11], r49 -> p44 [p1] | CMP SUB_IMM
955: 1131 1133 1134 1135, r49 -> p44 | J JMP_IMM
956: 1132 1134 1137 1137, r5 -> p14, r3 -> p9 [p55] | MOV LOAD
957: 1133 1135 1136 1138, r45 -> p51 [p15] | CMP SAVE_PC
958: 1134 1136 1139 1139, r45 -> p51, r45 -> p0 [p51] | CMP LOAD
959: 1135 1139 1140 1140, r3 -> p9, r45 -> p0, r44 -> p57 [p61], r49 -> p53 [p44] | CMP SUB
960: 1137 1140 1141 1141, r49 -> p53 | J JMP_IMM
961: 1138 1141 1142 1142, r44 -> p12 [p57] | MOV SAVE_PC
962: 1139 1142 1145 1145, r44 -> p12, r2 -> p60 [p5] | MOV LOAD
963: 1140 1145 1146 1146, r2 -> p60, r2 -> p60, r44 -> p58 [p12], r49 -> p54 [p53] | TEST AND
964: 1141 1146 1147 1147, r49 -> p54 | J JMP_IMM
965: 1142 1147 1150 1150, r2 -> p60, r44 -> p62 [p58] | MOVSX LOAD
966: 1145 1150 1151 1151, r44 -> p62, r0 -> p52 [p10] | MOVSX SEXT_DWORD_TO_QWORD
967: 1146 1148 1149 1152, r44 -> p3 [p62] | MOV SAVE_PC
968: 1147 1149 1152 1153, r44 -> p3, r2 -> p11 [p60] | MOV LOAD
969: 1150 1151 1152 1154, r0 -> p52, r0 -> p52, r0 -> p1 [p52] | LEA LEA
970: 1151 1152 1153 1155, r0 -> p1, r0 -> p55 [p1], r49 -> p15 [p54] | SHL SHL_IMM
971: 1152 1153 1156 1156, r2 -> p11, r0 -> p55, r45 -> p51 [p0] | CMP LOAD
972: 1153 1156 1157 1157, r45 -> p51, r44 -> p61 [p3], r49 -> p44 [p15] | CMP SUB
973: 1154 1157 1158 1158, r49 -> p44 | J JMP_IMM
974: 1155 1158 1161 1161, r5 -> p14, r45 -> p57 [p51] | CMP LOAD
975: 1156 1161 1162 1162, r45 -> p57, r44 -> p5 [p61], r49 -> p12 [p44] | CMP SUB_IMM
976: 1157 1162 1163 1163, r49 -> p12 | J JMP_IMM
977: 1158 1159 1162 1164, r5 -> p14, r3 -> p53 [p9] | MOV LOAD
978: 1161 1163 1164 1165, r45 -> p58 [p57] | CMP SAVE_PC
979: 1162 1164 1167 1167, r45 -> p58, r45 -> p10 [p58] | CMP LOAD
980: 1163 1167 1168 1168, r3 -> p53, r45 -> p10, r44 -> p62 [p5], r49 -> p60 [p12] | CMP SUB
981: 1164 1168 1169 1169, r49 -> p60 | J JMP_IMM
982: 1165 1166 1167 1170, r44 -> p52 [p62] | MOV SAVE_PC
983: 1167 1169 1172 1172, r44 -> p52, r2 -> p1 [p11] | MOV LOAD
984: 1168 1172 1173 1173, r2 -> p1, r2 -> p1, r44 -> p54 [p52], r49 -> p0 [p60] | TEST AND
985: 1169 1173 1174 1174, r49 -> p0 | J JMP_IMM
986: 1170 1174 1177 1177, r2 -> p1, r44 -> p3 [p54] | MOVSX LOAD
987: 1172 1177 1178 1178, r44 -> p3, r0 -> p15 [p55] | MOVSX SEXT_DWORD_TO_QWORD
988: 1173 1175 1176 1179, r44 -> p51 [p3] | MOV SAVE_PC
989: 1174 1176 1179 1180, r44 -> p51, r6 -> p61 [p45] | MOV LOAD
990: 1177 1178 1179 1181, r0 -> p15, r0 -> p15, r0 -> p44 [p15] | LEA LEA
991: 1178 1179 1180 1182, r0 -> p44, r0 -> p9 [p44], r49 -> p57 [p0] | SHL SHL_IMM
992: 1179 1180 1183 1183, r6 -> p61, r0 -> p9, r45 -> p58 [p10] | CMP LOAD
993: 1180 1183 1184 1184, r45 -> p58, r44 -> p5 [p51], r49 -> p12 [p57] | CMP SUB
994: 1181 1184 1185 1185, r49 -> p12 | J JMP_IMM
995: 1182 1185 1188 1188, r5 -> p14, r3 -> p62 [p53] | MOV LOAD
996: 1183 1186 1187 1189, r45 -> p11 [p58] | CMP SAVE_PC
997: 1184 1187 1190 1190, r45 -> p11, r45 -> p52 [p11] | CMP LOAD
998: 1185 1190 1191 1191, r3 -> p62, r45 -> p52, r44 -> p60 [p5], r49 -> p54 [p12] | CMP SUB
999: 1188 1189 1192 1192, r5 -> p14, r44 -> p55 [p60] | MOVZX LOAD
1000: 1189 1192 1193 1193, r44 -> p55, r14 -> p3 [p7] | MOVZX ZEXT_BYTE_TO_DWORD
Processed 1000 trace records.
Micro-ops: 1000
Macro-ops: 754
TotalCycles: 1194
uIPC: 0.837521
